/* vim: ts=2:sw=2:sts=2:et:syntax=c:
 **************************************************************************
 *  PROGRAM NAME: slicgldFMT.pc
 *
 *  PURPOSE: The purpose of this program is to process the activity files
 *		from the programs that pull the SLIC Change Data and to format
 *		the records into GOLD API Records.  The program will create
 *	        either a file for API processing or based upon Options C/D it
 *              will create comma delimited files that can be put into Excel
 *              spreadsheets and processed into Gold as load files.
 *
 *  INPUTS:   1. Candidate HG Records - Processing Seq '00'
 * 	      2. Candidate HB Records - Processing Seq '03'
 * 	      3. Candidate HP Records - Processing Seq '00'
 * 	      4. Candidate HA Records - Processing Seq '04'
 * 	      5. Candidate HAX04 Records - Processing Seq '00'
 *	      6. Command Line Arguements:
 *		 - a/A - Input Candidates files containing HB/HG/HP/HA/HAX04 Rcds;
 *		 - b/B - Output API File Name Containing API Records;
 *		 - c/C - Y/N Indicator to tell the Option B files is to be
 *			 tab delimited or not;
 *		 - d/D - Output file name for VENC File
 *		 - e/E - Output Vendor Site Code file passed to Vendor Table Process
 *		 - f/F - Output WHSE File
 *		 - g/G - Processing MDL
 *		 - h/H - Output Log File
 *		 - i/I - Output PRC1 File
 *		 - w/W - Option used only for testing.  Tells the program whether or not it
 *			 should commit work or not.
 *		 - x/X - Option used in testing to tell program to not commit at end of processing
 *			 Instead of using this option, use Option w/W.
 *		 - z/Z - Option for testing only, used to by the validation
 *			 of the HA Part Numbers against GOLD CAT1 PRIME.
 *
 *
 *  OUTPUTS:  1. Gold API Records
 *	      2. Gold VENC Records
 *	      3. Gold WHSE Records
 *	      4. Vendor Site Code Records
 *
 *
 *  CHANGE HISTORY:
 *   REV     DATE    Programmer          CHANGE
 *   ---  --------   ------------------- ------
 *    00  03/02/00   Larry Mills         Initial coding
 *    01  03/05/01   Larry Mills         do not remember
 *    02  03/10/01   Larry Mills		 Change Default of Mils Auto Processing from 'F' to 'T'
 *    03  05/30/01   Ben Barth           Don't write pricing record when the seg code is virtual
 *    04  10/25/01   Ben Barth           Change customer code from 'MDA' to 'STL'
 *    05  11/19/01   Ben Barth           Added code to set the IMS Des Code to F18BZZ and the nsn
 *                                       to NSL if the part does not have a des code starting with
 *                                       F18 or VPV
 *    06  01/18/02   Ben Barth           Put in condition in check_nsn when the niin from SLIC is blank
 *    07  04/24/02   Ben Barth           Fixed problem with HB cage overwriting cage in GOLD if the
 *                                       alternate part is the same as the prime.
 *    08  07/25/02   Ben Barth           Modified code in A5999_01a_non_delimited_setup_ha() function
 *                                       to load hazardous material code from SLIC.
 *        07/26/02   Ben Barth           Added code to write out to the shelf life output file on a
 *                                       CAT1 create or update of shelf life.
 *    09  09/03/02   Ben Barth           Removed code to set IMS Des Code to F18BZZ when des code starts
 *                                       with F18 or VPV
 *    10  09/16/02   Ben Barth           Added function Z9999_confirm_write_to_gold() to include
 *                                       new criteria for loading a part to GOLD
 *        09/25/02   Ben Barth           Added code to set category_instrument to 'SE' for SE items
 *
 *	  12  12/16/02   Chandler Wilson	 Changed queries to dynamic SQL, Coded changes for the VARCHAR
 *                                       data conversion, Added code to NOT update lead times for f18
 *    13  01/24/03   Ben Barth           Commented out line 4885 'error_code = 0;' in
 *                                       Z9992_check_cat1_part
 **************************************************************************
*/
/* C System Includes                  */
#include <errno.h>
#include <time.h>
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <assert.h>

/* Application Peculiar Includes      */
#include "varcharSetup.h"

/*  Input records layouts     */

#include "slichb_chgrcd.h"
#include "slichg_chgrcd.h"
#include "slichp_chgrcd.h"
#include "slicha_chgrcd.h"
#include "slichax04_chgrcd.h"

/*  Output Record layouts     */

#include "gold685_cat1_api.h"
#include "gold68_cat1_delimit.h"
#include "gold685_cats_api.h"
#include "gold685_venc_api_sort_cntrl.h"
#include "gold68_venc_delimit.h"
#include "gold685_whse_api_FMT_v2.h"
#include "gold68_whse_delimit.h"
#include "gold68_prc1_delimit.h"
#include "gold685_prc1_api_FMT.h"

/* File Pointer Definitions           */
FILE *gold_venc_rcds_fp;
FILE *gold_cat1_rcds_fp;
FILE *gold_cats_rcds_fp;
FILE *gold_actd_rcds_fp;
FILE *candidates_in_fp;
FILE *gold_whse_rcds_fp;
FILE *gold_prc1_rcds_fp;
FILE *gold_log_rcds_fp;
FILE *shelf_life_rcds_fp;
FILE *fh_block2;
FILE *fh_block3;

slichb_chgrcd			Slichb_Chgrcd;
slichg_chgrcd			Slichg_Chgrcd;
slichp_chgrcd			Slichp_Chgrcd;
slicha_chgrcd			Slicha_Chgrcd;
slichax04_chgrcd	Slichax04_Chgrcd;

gold68_cat1_api_rcd			Gold68_Cat1_api_rcd;
gold68_cat1_delmtd_rcd		Gold68_Cat1_delmtd_rcd;
gold68_cats_api_rcd			Gold68_Cats_api_rcd;
gold68_venc_api_sort_rcd	Gold68_Venc_api_rcd;
gold68_venc_delmtd_rcd		Gold68_Venc_delmtd_rcd;
gold68_whse_api_FMT_rcd		Gold68_Whse_api_rcd;
gold68_whse_delmtd_rcd		Gold68_Whse_delmtd_rcd;
gold68_prc1_delmtd_rcd		Gold68_Prc1_delmtd_rcd;
gold68_prc1_api_FMT_rcd		Gold68_Prc1_api_rcd;

/* #define SQLCA_STORAGE_CLASS extern */
#define NOT_FND 1403
#define FND 0
#define MULTI_ROWS -2112

/* Application Peculiar Structures    */

EXEC SQL BEGIN DECLARE SECTION;

/*      Oracle User Sign-on Area   */
	char	uid[20];
	char	pwd[20];

/*	Select Host Variable  */

	varchar	prime[33];
	varchar	prime_cage[6];
	varchar	part[33];
	varchar	manufac_cage[6];
	varchar	manufac_cage_hb[6];
	varchar	processing_mdl[20];
	varchar	sql_delete_part[33];
	varchar	sql_delete_cage[6];
	varchar	sql_delete_adrefn[33];
	varchar	sql_delete_adrefcage[6];
	varchar sec_code[21];
	char	valid_scm_part;
	char	hold_fsc[5];
	char	hold_nsn[17];
	char	hold_nin[12];
	char	hold_smic[3];
	char	hold_cog[3];
	char	setup_nsn[17];
	char	setup_smic[3];
	char	setup_cog[3];
	char	hold_nsn_type[7];

/*      SCM PGM SC Host Variables */

	varchar	pgm_sc[21];
	varchar	scm_pgms[20];
	char	sc_exists;
	char	slic_price_exists;
	char	edi_sc[2];
	char	repair_sc[2];
	varchar	cust_model[20];

/*      CAT1 Table Host Variables */

	varchar	cat1_prime[51];
	varchar	cat1_part[51];

	varchar	gold_cat1_part[51];
	varchar	gold_cat1_prime[51];
	char    gold_cat_inst_code[13];
	varchar	gold_um_issue_code[4];
	varchar	gold_um_show_code[4];
	varchar gold_um_mil_show_count[5];
	varchar gold_um_mil_code_count[5];
	varchar gold_um_mil_factor[5];
	varchar	gold_noun[41];
	varchar	gold_manuf_cage[6];
	varchar	gold_nsn[17];
	varchar	gold_ave_cap_lead_time[6];
	char	gold_security_code;
	varchar	gold_pmi_code[21];
	varchar	gold_demilitarization_code[21];
	varchar	gold_hazardous_material_code[21];
	varchar	gold_critical_item_code[21];
	varchar	gold_cognizance_code[3];
	varchar	gold_smr_code[7];
	varchar	gold_source_code[4];
	varchar	gold_ims_designator_code[21];
	varchar	gold_nsn_smic[3];
	varchar gold_cat1_profile[21];
	char	gold_order_cap_b;
	char	gold_order_gfp_b;
	char	gold_delete_when_gone;
	char	gold_tracked_b;
	char	gold_part_make_b;
	char	gold_part_buy_b;
	char	gold_hazardous_material_b;
	char	gold_lot_batch_mandatory_b;
	char	gold_serial_mandatory_b;
	char	gold_agency_peculiar_b;
	char	gold_mils_auto_process_b;

/*      VENC Table Host Variables */
	varchar	gold_whse_part[51];
	varchar	gold_whse_prime[51];
	varchar	gold_whse_sc[21];

/*      PRICE Table Host Variables */
	varchar	gold_prc1_part[51];
	varchar	gold_prc1_cage[6];
	varchar	gold_prc1_sc[21];
	varchar unit_price[17];
	short   unit_price_i;
	varchar	gfp_price[17];
	short  	gfp_price_i;
        varchar fiscyrhd[3];
	short fiscyrhd_i;

/*      VENC Table Host Variables */
	varchar	gold_vendor_part[50];
	varchar	gold_vendor_code[20];
	char	gold_vendor_flag;
	int	gold_venc_count;

/*      SLIC HA Table Host Variables */

	varchar	itnameha[20];
	varchar	unitisha[3];
	varchar	prdldtha[6];
	varchar	prdldtha_m[6];
	char	physecha;
	varchar	cognsnha[3];
	varchar	smmnsnha[3];
	varchar	fscnsnha[5];
	varchar	niinsnha[10];
	varchar	nsn[17];
	varchar	nin[12];
	char	pmicodha;
	char	demiliha;
	char	hazcodha;
	char	shlifeha;
	char	crititha;
	char	aaplccha;

/*      SLIC HAX01 Table Host Variables */

	varchar	sos[4];
	varchar	ansncog[3];
	varchar	nicncog[3];
	varchar	ansnfsc[5];
	varchar ansnniin[10];
	varchar nicnfsc[5];
	varchar nicnniin[10];
	varchar	ansnsmic[3];
	varchar	nicnsmic[3];

/*      SLIC HAX01 Table Host Variables */

	varchar	hax04_scm_program[10];
	varchar	hax04_scm_program_temp[10];

/*      SLIC HB Table Host Variables */
	varchar	refnumhb[33];
	varchar	cagecdhb[6];
	varchar	addrefhb[32];
	varchar	adcagehb[5];
	char	rnvc;
	short	rnvc_i;
	char	rncc;
	short	rncc_i;

/*      SLIC HB Table Host Variables */
	varchar	adfsc[5];
	varchar	adniin[10];
	varchar	adcog[3];
	varchar	adsmm[3];

/*      SLIC HG Table Host Variables */

	varchar	smrcodhg[7];

	varchar	hg_eiacodxa[11];
	varchar	hg_lsaconxb[19];
	varchar	hg_altlcnxb[3];
 	char    smrcodhg_pos1;
 	char	smrcodhg_pos3;
	varchar	itmcathg[3];
	char 	repair_item;

/*      SLIC HGX01 Table Host Variables */

	varchar	suplyrcd[6];
	varchar	repragnt[7];
	varchar	repragnt2[7];

/*      SLIC HGX01 Table Host Variables */
    varchar hp_eiacodxa[11];
    varchar	hp_lsaconxb[19];
    varchar	hp_altlcnxb[3];
    varchar	hp_canumbhp[17];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

/*  Function prototype area       */

static int min(int i1, int i2) ;
int	A0000_initialize(void);
int	A0000_005_get_pgm_sc(void);
int	A0100_get_argmnt(int argc, char **argv);
int	A0100_010_check_argmnt_c(void);
int	A0100_015_check_argmnt_g(void);
int	A0100_020_check_argmnt_z(void);
int	A999_00_open_files(void);
int	A999_01_signon(void);
void	A999_02_dberr(void);
int	A1000_process_infile(void);
int	A1200_process_HB_rcd(void);
int 	A1201_setup_hb_host_variables(void);
int 	A1205_get_hb_info(void);
int 	A1210_process_hb(void);
int 	A1300_process_HG_rcd(void);
int 	A1301_setup_HG_host_variables(void);
int 	A1400_process_HA_rcd(void);
int 	A1401_setup_HA_host_variables(void);
int 	A1500_process_H4_rcd(void);
int 	A1501_setup_H4_host_variables(void);
int	A5000_process_GOLD_creation(void);
int	A5005_build_gold_api(void);
int	A5010_build_gold_cat1(void);
int	A5020_build_gold_catl(void);
int	A5030_build_gold_venc(void);
int	A5030_005_build_gold_mfg_venc(void);
int	A5030_010_build_gold_suplyr_venc(void);
int	A5030_020_build_gold_repair_venc(void);
int 	A5030_get_HB_info(void);
int 	A5999_01_get_ha(void);
int	A5999_01_initialize_rcds(void);
int 	A5999_01a_setup_ha(void);
int	A5999_01a_non_delimited_setup_ha(void);
int	A5999_01a_delimited_setup_ha(void);
int	A5999_01b_check_dlsc_info(void);
int	A5999_01b_01_setup_nsn(void);
int	A5999_01b_01a_check_nsn(void);
int	A5999_01c_01_setup_smic(void);
int	A5999_01c_01a_check_smic(void);
int	A5999_01d_01_setup_cog(void);
int	A5999_01d_01a_check_cog(void);
int	A5999_01e_get_hb_nsn(void);
int	A5999_02_setup_hax01(void);
int	A5999_02a_setup_hax01(void);
int	A5999_03_get_hg(void);
int	A5999_03a_setup_hg(void);
int	A5999_03b_get_hg_check_icc(void);
int 	A5999_04_get_hgx01(void);
int	A5999_05_get_repair_agents(void);
int 	Z9991_check_cat1_prime(void);
int 	Z9992_check_cat1_part(void);
int 	Z9993_check_authorized_scm_part(void);
int 	Z9994_check_venc(void);
int 	Z9995_check_whse(void);
int 	Z9995_check_slic_gfp_price(void);
int	Z9995_check_gold_gfp_price(void);
int	Z9996_check_SE_item(void);
int	Z9999_chk_alternate(char *cage, char rncc, char rnvc);
int 	Z9999_write_gold_cat1_rcds(void);
int 	Z9999_write_gold_cats_rcds(void);
int 	Z9999_write_gold_venc_rcds(void);
int 	Z9999_write_gold_whse_rcds(void);
int	Z9999_write_gold_whse_rcds_format(void);
int 	Z9999_write_gold_prc1_rcds(void);
int 	Z9999_write_gold_prc1_rcds_format(void);
int 	Z9999_write_shelf_life_rcd();
int 	Z9999_confirm_write_to_gold(void);
int	Z9999_confirm_write_to_gold_chk_cog_icc(void);
int	Z9999_initialize_cat1(void);
int 	Z9999_initialize_cats(void);
int	Z9999_initialize_venc(void);
int	Z9999_initialize_whse(void);
int	Z9999_initialize_prc1(void);
int	Z9999_initialize_gold_variables(void);

/*       program variables  */

#define MAXSEGCODE 200
struct
{
	char	sc[20];
	char	pgm[20];
	char	use[1];
	char    edi[1];
	char    repair[1];
	char    cust_model[20];
	char	ims_des[20];
} seg_code_tble[MAXSEGCODE];

typedef struct
{
	char	part[50];
	char	activity_code[50];
	char	lead_time[5];
	char	update_create_delete;
	char 	eol;
} shelf_life_rcd;

struct tm *tmstruct;
time_t	tnow;

char	suplyr_tble[100][6];
char	repr_agnt_tble[200][7];
int	seg_code_max,address;
int	suplyr_max;
int	repr_agnt_max=0;
char	*candidates_file_in ;
char	*gold_api_out_file ;
char	*gold_cats_out_file ;
char	*gold_actd_out_file ;
char	*gold_venc_out_file ;
char	*gold_whse_out_file ;
char	*gold_prc1_out_file ;
char	*shelf_life_file ;
char	*gold_log_out_file ;
char	candidates_in_area[5000];
char	candidates_out_area[5000];
char	gold_api_write_area[5000];
char	gold_cats_write_area[5000];
char	gold_acts_write_area[100];
char	gold_venc_write_area[5000];
char	gold_whse_write_area[5001];
char	gold_prc1_write_area[5000];
char	processing_seq[3];
char    ave_lead_time[6];
char	rcdtype[3];
char	prev_part[33];
char	prev_manufac_cage[6];
char	prev_prime[33];
char	prev_refnumhb[33];
char	prev_prime_cage[6];
char	delimited_file='?';
char	bypass_cat1_prime_chk='Y';
char	create_new_cat1='N';
char	delete_trigger_rcd_flag='Y';
char	ha_part_not_found='N';
char	update_cat1='N';
char	nsn_updated='N';
char	smic_updated='N';
char	cog_updated='N';
char	update_venc='N';
char	update_venc_leadtime='N';
char	gold_rcd_exists='N';
char	prime_mismatch='N';
char	stl_ims_des_code='Y';
char	unit_issue[3];
char	process_cats='N';
char	update_create_delete_cats='N';
char	write_shelf_life='N';
/* **************************************************************************** */
/*                    Testing Options - See Comments above                      */
char	option_w_commit_work='Y';                    /* Command line Option w/W */
char	rollback_update='N';                         /* Command line Option x/X */
/* **************************************************************************** */
int	count_new_price_rcds;
int	venc_seq;
int	max_commit_count=5000;

/*                 .........1.........2.........3.........4.........5.........6.........7.........8.........9.........0
                   1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890  */
char	spaces[]={"                                                                                                    "};

/*       Flags              */
int     errcode_global=0;

/*       Record Counts      */
int	candidate_rcds_read=0;
int	candidate_hb_rcds_read=0;
int	candidate_hg_rcds_read=0;
int	candidate_hp_rcds_read=0;
int	candidate_ha_rcds_read=0;
int	candidate_hax04_rcds_read=0;
int	gold_cat1_rcds_out=0;
int	gold_cats_rcds_out=0;
int	gold_venc_rcds_out=0;
int	gold_whse_rcds_out=0;
int	gold_prc1_rcds_out=0;
int 	shelf_life_rcds_out=0;
int 	alternate_count=0;
int	candidate_already_in_gold=0;
int 	candidate_not_in_hax04=0;
int	not_stl_ims_des_code=0;
int	delete_count_ha;
int	delete_count_hb;
int	delete_count_hg;
int	delete_count_hp;
int	delete_count_hax04;
int	update_commit_count=0;

int main(int argc, char **argv)
{
	int	errcode=0;
	char	pgmtime[21];
	int i = 0;
	#if DEBUG
	  printf("slicgldFMT DEBUG on") ;
          for (i = 0; i < argc; i++) {
	    printf("%d. %s\n",i,argv[i]);
	  }	  
	#endif

	printf("\n\n**************************************************************************");
	time(&tnow);
	tmstruct=localtime(&tnow);
	strftime(pgmtime,sizeof(pgmtime),"%m/%d/%Y-%H:%M:%S",tmstruct);
	printf("\n\n\tStarting Time (%s)\n",&pgmtime);

	errcode=A0100_get_argmnt(argc, argv) ;
	if (errcode == FND)
	{
		Login();
		if(sqlca.sqlcode == 0)
		{
			printf("Connect Successful\n");
		}
		else
		{
			printf("\n***********************************************************");
			printf("\n*                                                         *");
			printf("\n*       Not connected.                                    *");
			printf("\n*                                                         *");
			printf("\n***********************************************************");
			A999_02_dberr();
		}
	}
	else
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n*     Unable to Read Command Line Arguments               *");
		printf("\n*                                                         *");
		printf("\n***********************************************************");
	}

	if (errcode == FND)
	{
		errcode=A999_00_open_files();
		if (errcode == FND)
		{
			errcode=A0000_initialize();
			if(errcode==0)
			{
				errcode=A1000_process_infile();
			}
		}
		else
		{
			printf("\n***********************************************************");
			printf("\n*                                                         *");
			printf("\n*  Unable to Open Files for Processing                    *");
			printf("\n*                                                         *");
			printf("\n***********************************************************");
		}
	}

	printf("\n-----------------------------------------------------------");
	printf("\n- Number of records HB read\t\t%d",candidate_hb_rcds_read);
	printf("\n- Number of records HB deleted\t\t%d",delete_count_hb);
	printf("\n- Number of records HG read\t\t%d",candidate_hg_rcds_read);
	printf("\n- Number of records HG deleted\t\t%d",delete_count_hg);
	printf("\n- Number of records HP read\t\t%d",candidate_hp_rcds_read);
	printf("\n- Number of records HP deleted\t\t%d",delete_count_hp);
	printf("\n- Number of records HA read\t\t%d",candidate_ha_rcds_read);
	printf("\n- Number of records HA deleted\t\t%d",delete_count_ha);
	printf("\n- Number of records HAX04 read\t\t%d",candidate_hax04_rcds_read);
	printf("\n- Number of records HAX04 deleted\t\t%d",delete_count_hax04);
	printf("\n- Number of records read\t\t\t%d",candidate_rcds_read);
	printf("\n- Number of Gold CAT1 records created\t\t%d",gold_cat1_rcds_out);
	printf("\n- Number of Gold CATS records created\t\t%d",gold_cats_rcds_out);
	printf("\n- Number of Gold VENC records created\t\t%d",gold_venc_rcds_out);
	printf("\n- Number of Gold WHSE records created\t\t%d",gold_whse_rcds_out);
	printf("\n- Number of Gold PRC1 records created\t\t%d",gold_prc1_rcds_out);
	printf("\n- Number of Shelf Life  records created\t\t%d",shelf_life_rcds_out);
	printf("\n- Number of duplicate Gold records \t\t%d",candidate_already_in_gold);
	printf("\n- Number of records not in hax04 \t\t%d",candidate_not_in_hax04);
	printf("\n- Number of Parts not St. Louis \t\t%d",not_stl_ims_des_code);
	printf("\n- Number of alternate count \t\t%d",alternate_count);
	printf("\n-----------------------------------------------------------");

  if (gold_cat1_rcds_fp != NULL)
	  fclose(gold_cat1_rcds_fp);
  if (gold_cats_rcds_fp != NULL)
	  fclose(gold_cats_rcds_fp);
  if (candidates_in_fp != NULL)
	  fclose(candidates_in_fp);
  if (gold_venc_rcds_fp != NULL)
	  fclose(gold_venc_rcds_fp);
  if (gold_whse_rcds_fp != NULL)
	  fclose(gold_whse_rcds_fp);
  if (gold_prc1_rcds_fp != NULL)
	  fclose(gold_prc1_rcds_fp);
  if (shelf_life_rcds_fp != NULL)
	  fclose(shelf_life_rcds_fp);

  #if DEBUG
    printf("rollback_update=%c option_w_commit_work=%c\n", rollback_update, option_w_commit_work);
    printf("errcode=%d\n", errcode) ;
  #endif 
	if (errcode == FND)
	{
		printf("\n***********************************************************");
		printf("\nRollback Update option (%c)",rollback_update);
		printf("\nOption W Commit Work option (%c)",option_w_commit_work);
		printf("\n***********************************************************");
		if(rollback_update=='N' && option_w_commit_work=='Y')
		{
			printf("\n-----------------------------------------------------------");
			printf("\n-                                                         -");
			printf("\n-                    Commit Work                          -");
			printf("\n-                                                         -");
			printf("\n-----------------------------------------------------------");
/*			EXEC SQL ROLLBACK WORK RELEASE; */
			EXEC SQL COMMIT WORK RELEASE; 
		}
		else
		{
			printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			printf("\n~                                                         ~");
			printf("\n~            Work rolled back                             ~");
			printf("\n~                                                         ~");
			printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			EXEC SQL ROLLBACK WORK RELEASE;
		}
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~            Work not Committed                           ~");
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		EXEC SQL ROLLBACK WORK RELEASE;
	}

	time(&tnow);
	tmstruct=localtime(&tnow);
	strftime(pgmtime,sizeof(pgmtime),"%m/%d/%Y-%H:%M:%S",tmstruct);
	printf("\n\n\tEnding Time (%s)\n",&pgmtime);
	printf("\n\n**************************************************************************");

	printf("\n");

	return(errcode);
}
/*

*/
int	A0000_initialize(void)
{

        int	errcode=0;

	strncpy(prev_part,spaces,32);
	prev_part[32]='\0';
	strncpy(prev_manufac_cage,spaces,5);
	prev_manufac_cage[5]='\0';
	strncpy(prev_prime,spaces,32);
	prev_prime[32]='\0';
	strncpy(prev_prime_cage,spaces,5);
	prev_prime_cage[5]='\0';

	delete_count_ha=0;
	delete_count_hb=0;
	delete_count_hg=0;
	delete_count_hp=0;
	delete_count_hax04=0;
	update_commit_count=0;

	errcode=A0000_005_get_pgm_sc();

	return(errcode);
}
/*

*/



int	A0000_005_get_pgm_sc()
{
    int	errcode=0;
	int	fetch_sw=1;
	int	i=0;
	char	my_processing_mdl[20];
	char	mysql[1000];

	memset(my_processing_mdl,' ',sizeof(my_processing_mdl));

	strncpy(my_processing_mdl,(char *)processing_mdl.arr,processing_mdl.len);
	my_processing_mdl[processing_mdl.len]='\0';

	seg_code_max=0;

	#if DEBUG
		printf("\nA0000_005_get_pgm_sc");
		printf("\nProcessing MDL (%s) (%d)",(char *) processing_mdl.arr,processing_mdl.len);
	#endif

	memset(mysql,' ',sizeof(mysql));

	for(i=0;i < MAXSEGCODE;i++)
	{
		strncpy((char *) seg_code_tble[i].sc,spaces,20);
		strncpy((char *) seg_code_tble[i].pgm,spaces,20);
		strncpy((char *) seg_code_tble[i].use," ",1);
		strncpy((char *) seg_code_tble[i].edi," ",1);
		strncpy((char *) seg_code_tble[i].repair," ",1);
		strncpy((char *) seg_code_tble[i].cust_model,spaces,20);
		strncpy((char *) seg_code_tble[i].ims_des,spaces,20);
	}

	/*
		The default on the edi_sc and repair_sc was defaulted to 'N' 
		because TAV may not be setting the values and to write 
		out the records requires a 'Y' or a 'N' in these flags.  
		Null values assumnes 'N'.
		3/19/2012 DSE

	*
	*/
	strcpy(mysql,"select distinct rpad(sc,20,' '),nvl(edi_sc,'N')");
	strcat(mysql,",nvl(repair_sc,'N'),rpad(cust_model,20,' '),");
	if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
	{
		strcat(mysql,"rpad(substr(system,1,4),20,' ') ");
	}
	else
	{
		if((strncmp((char *) processing_mdl.arr,"F18",3)==0)||
		   (strncmp((char *) processing_mdl.arr,"F15",3)==0))
		{
			strcat(mysql,"rpad(substr(system,1,5),20,' ') ");
		}
	}
	strcat(mysql,"from scmsec.stlscm_scinf_v ");
	strcat(mysql,"where cust_model like '");
	strcat(mysql,my_processing_mdl);
	strcat(mysql,"%' and initl_sc = 'Y' and system like '%TAV%' order by 1,5 ");

	#if DEBUG
		printf("\nA0000_005_get_pgm_sc SQL (%s)",mysql);
	#endif

	EXEC SQL PREPARE pgm_sc_sql from :mysql;
	EXEC SQL DECLARE pgm_sc_csr CURSOR FOR pgm_sc_sql;

	EXEC SQL OPEN pgm_sc_csr;

	if(sqlca.sqlcode == FND)
	{
		while(fetch_sw)
		{
			EXEC SQL FETCH pgm_sc_csr
				into :pgm_sc,
				     :edi_sc,
				     :repair_sc,
				     :cust_model,
				     :scm_pgms;
			if(sqlca.sqlcode == FND)
			{
				strncpy((char *) seg_code_tble[seg_code_max].sc,(char *) pgm_sc.arr,pgm_sc.len);
				strncpy((char *) seg_code_tble[seg_code_max].pgm,(char *) scm_pgms.arr,scm_pgms.len);
				memcpy((char *) seg_code_tble[seg_code_max].edi,edi_sc,1);
				strncpy((char *) seg_code_tble[seg_code_max].repair,repair_sc,1);
				strncpy((char *) seg_code_tble[seg_code_max].use,"Y",1);
				strncpy((char *) seg_code_tble[seg_code_max].cust_model,(char *) cust_model.arr,cust_model.len);

				if(strncmp((char *) processing_mdl.arr,"F18",3)==0) {

					strncpy((char *) seg_code_tble[seg_code_max].ims_des,"F18ZZZ",6);

				} else if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0) {

					strncpy((char *) seg_code_tble[seg_code_max].ims_des,"HISSZZZ",7);

				} else if(strncmp((char *) processing_mdl.arr,"F15",3)==0) {

					if(strncmp((char *) cust_model.arr,"F15K",4)==0) {

						strncpy((char *) seg_code_tble[seg_code_max].ims_des,"F15KOREA",8);

					} else  if(strncmp((char *) cust_model.arr,"F15SG",5)==0) {

						strncpy((char *) seg_code_tble[seg_code_max].ims_des,"F15SG ",6);

					} else if(strncmp((char *) cust_model.arr,"F15SA",5)==0) {

						strncpy((char *) seg_code_tble[seg_code_max].ims_des,"F15SA ",6);

					}

						
				}
				seg_code_max++;
				if (seg_code_max > MAXSEGCODE) {
           				printf("\nA0000_005_get_pgm_sc - loading seg_code_table") ;
					printf("\nMAXSEGCODE=%d",MAXSEGCODE) ;
					errcode=4 ;
					exit(4) ;
				}
			}
			else
			{
				fetch_sw=0;
				if(sqlca.sqlcode ==NOT_FND)
				{
					if(seg_code_max==0)
					{
           					printf("\nUnable to locate Seg Codes for Processing Model (%s)",(char *) processing_mdl.arr);
						errcode=518;
					}
					else
					{
						seg_code_max--;
					}
				}
				else
				{
           				printf("\nA0000_005_get_pgm_sc - Fetch Cursor");
					printf("\nBad SQLCODE ");
					printf("\nProcessing MDL (%s)",(char *) processing_mdl.arr);
					printf("\nSQL (%s)",mysql);
					errcode=sqlca.sqlcode;
					A999_02_dberr();
				}
			}
		}
	}
	else
	{
		if(sqlca.sqlcode ==NOT_FND)
		{
           		printf("\nUnable to locate Seg Codes for Processing Model (%s)",(char *) processing_mdl.arr);
			errcode=517;
		}
		else
		{
           		printf("\nA0000_005_get_pgm_sc - Open Cursor");
			printf("\nBad SQLCODE ");
			printf("\nProcessing MDL (%s)",(char *) processing_mdl.arr);
			printf("\nSQL (%s)",mysql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	EXEC SQL CLOSE pgm_sc_csr;

	#if DEBUG
		for(i=0;i<=seg_code_max;i++)
		{
			printf("\nSeg_code_tble #1-Seg Code (%20.20s)",seg_code_tble[i].sc);
			printf("\nSeg_code_tble #2-Program (%10.10s)",seg_code_tble[i].pgm);
			printf("\nSeg_code_tble #3-Use (%1.1s)",seg_code_tble[i].use);
			printf("\nSeg_code_tble #4-EDI (%1.1s)",seg_code_tble[i].edi);
			printf("\nSeg_code_tble #5-Repair (%1.1s)",seg_code_tble[i].repair);
			printf("\nSeg_code_tble #6-Cust Model (%20.20s)",seg_code_tble[i].cust_model);
			printf("\nSeg_code_tble #7-IMS Des (%20.20s)",seg_code_tble[i].ims_des);
		}
	#endif


	return(errcode);
}
/*

*/
int	A0100_get_argmnt(int argc, char **argv)
{
        int	errcode=0;
	char opt;
	char	spaces[]={"                                       "};
	extern char *optarg;

	#if DEBUG
		printf("\nA0100_get_argmnt");
	#endif

	while ((opt=getopt (argc, argv,"a:b:c:d:f:g:h:j:k:l:w:x:z:A:B:C:D:F:G:H:J:K:L:W:X:Z")) !=EOF)
	{
		#if DEBUG
		  if (optarg != NULL) {
			printf("optarg=%s\n", optarg);
		  }
		  printf("opt=%c\n",opt) ;
		#endif
		switch (opt)
		{
			case 'a':
	                case 'A':
				candidates_file_in = optarg ;
				break;
			case 'b':
	                case 'B':
				gold_api_out_file = optarg ;
				break;
			case 'c':
	                case 'C':
				delimited_file=optarg[0];
				printf("\nOption C - Delimited File (%c)",delimited_file);
				break;
			case 'd':
	                case 'D':
				gold_venc_out_file = optarg ;
				break;
			case 'f':
	                case 'F':
				gold_whse_out_file = optarg ;
				break;
			case 'g':
	                case 'G':
			        strcpy(processing_mdl.arr,optarg) ;
				processing_mdl.len = strlen(optarg);
				break;
			case 'h':
	                case 'H':
				gold_log_out_file = optarg ;
				break;
			case 'j':
	                case 'J':
				gold_prc1_out_file = optarg ;
				break;
			case 'k':
	                case 'K':
				gold_cats_out_file = optarg ;
				break;
			case 'l':
	                case 'L':
				shelf_life_file = optarg ;
				break;
			case 'w':
	                case 'W':
				option_w_commit_work=optarg[0];
				printf("\nOption W - Commit Work (%c)",option_w_commit_work);
				break;
			case 'x':
	                case 'X':
				rollback_update=optarg[0];
				printf("\nOption X - Rollback Updates (%c)",rollback_update);
				break;
			case 'z':
	                case 'Z':
				bypass_cat1_prime_chk=optarg[0];
				break;
			case '?':
				errcode=12;
				break;
		}
	}

	errcode=A0100_010_check_argmnt_c();
	if(errcode==0)
	{
		errcode=A0100_020_check_argmnt_z();
	}
	errcode=A0100_015_check_argmnt_g();

	return(errcode);
}
/*

*/
int	A0100_010_check_argmnt_c()
{

        int	errcode=0;
	#if DEBUG
		printf("\nA0100_010_check_argmnt_c");
	#endif

	if(delimited_file=='?')
	{
		delimited_file='N';
	}
	else
	{
		if(delimited_file=='N' ||
		   delimited_file=='Y' ||
		   delimited_file=='n'||
		   delimited_file=='y')
		{
			if(delimited_file=='Y' ||
			   delimited_file=='y')
			{
				if(gold_venc_out_file[0] > ' ')
				{
				}
				else
				{
					printf("\nYou must provide another file with Option C");
					errcode=521;
				}
			}
			else
			{
			}
		}
		else
		{
			printf("\nInvalid option for delimited file (%c)",delimited_file);
			errcode=515;
		}
	}

	return(errcode);
}
/*

*/
int	A0100_015_check_argmnt_g()
{

        int	errcode=0;
	#if DEBUG
		printf("\nA0100_015_check_argmnt_g");
	#endif

	if(strncmp((char *) processing_mdl.arr,"   ",3)==0)
	{
		printf("\nYou must provide a Program Model as Option G");
		errcode=516;
	}
	else
	{
	}

	printf("\n\n*****************************************************************************************");
	printf("\n******  program model = %s",processing_mdl.arr);
	printf("\n******************************************************************************************");
	printf("\n\n");

	return(errcode);
}
/*

*/
int	A0100_020_check_argmnt_z()
{

        int	errcode=0;
	#if DEBUG
		printf("\nA0100_020_check_argmnt_z");
	#endif

	if(delimited_file=='N' ||
	   delimited_file=='Y' ||
	   delimited_file=='y')
	{
	}
	else
	{
		printf("\nInvalid option for bypassing GOLD CAT1 PRIME Check - Enter Y or N (%c)",delimited_file);
		errcode=516;
	}

	return(errcode);
}
/*

*/
int	A999_00_open_files(void)
{

        int	errcode=0;
	if ((candidates_in_fp=fopen(candidates_file_in,"r")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Input File (%s)",candidates_file_in);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=500;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Input CANDIDATES File (%s)",candidates_file_in);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	if ((gold_cat1_rcds_fp=fopen(gold_api_out_file,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Input File (%s)",gold_api_out_file);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=501;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output CAT1 File (%s)",gold_api_out_file);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	if ((gold_cats_rcds_fp=fopen(gold_cats_out_file,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Output CATS File (%s)",gold_cats_out_file);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=501;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output CATS File (%s)",gold_cats_out_file);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	if ((gold_venc_rcds_fp=fopen(gold_venc_out_file,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Output VENC File (%s)",gold_venc_out_file);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=551;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output VENC File (%s)",gold_venc_out_file);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	if ((gold_whse_rcds_fp=fopen(gold_whse_out_file,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Output WHSE File (%s)",gold_whse_out_file);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=553;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output WHSE File (%s)",gold_whse_out_file);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	if ((gold_prc1_rcds_fp=fopen(gold_prc1_out_file,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Output PRC1 File (%s)",gold_prc1_out_file);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=553;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output PRC1 File (%s)",gold_prc1_out_file);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	if ((gold_log_rcds_fp=fopen(gold_log_out_file,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Output LOG File (%s)",gold_log_out_file);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=555;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output LOG File (%s)",gold_log_out_file);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	if ((shelf_life_rcds_fp=fopen(shelf_life_file,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n* Could not open Output Shelf Life File (%s)",shelf_life_file);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=501;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output Shelf Life File (%s)",shelf_life_file);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	return(errcode);
}
/*

*/
int	A999_01_signon(void)
{

/*  open user file                                                            */

    if ((fh_block2 = fopen("/home/provftp/.SCM_LB_destn","r")) == NULL) {

      printf("User File could not be assigned\n");

      exit(2);

    }

/*  open password file                                                            */

    if ((fh_block3 = fopen("/home/provftp/.SCM_LB_pass","r")) == NULL) {

      printf("Password File could not be assigned\n");

      exit(2);

    }

    fgets(uid,50,fh_block2);
    uid[strlen(uid)-1]='\0';

    fgets(pwd,50,fh_block3);
    pwd[strlen(pwd)-1]='\0';

    fclose(fh_block2);

    fclose(fh_block3);

/*  logon to oracle                                                         */
	printf("UID '%s' PWD '%s'\n",uid,pwd);
    EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

    return(sqlca.sqlcode);
}
/*

*/
void	A999_02_dberr()
{
	char msg_buf[200];
	int  buf_size=200;
	int  msg_len;
	printf("\n???????????????????????????????????????????????????????????");
	printf("\n?                                                         ?");
	printf("\n?\tData Base Error has occurred:");
	sqlglm(msg_buf, &buf_size, &msg_len);
	sqlglm(msg_buf, &buf_size, &msg_len);
	msg_buf[msg_len]='\0';
	printf("\n?\t\t%s",msg_buf);
	printf("\n?\t\tSQLCODE: %d",sqlca.sqlcode);
	printf("\n?\t\tSQLERR MSG %s",sqlca.sqlerrm.sqlerrmc);
	printf("\n?");
	printf("\n???????????????????????????????????????????????????????????");

	return;
}
/*

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
							*/


int     A1000_process_infile()
{


        int	errcode=0;
	#if DEBUG
		printf("\nA1000_process_infile");
	#endif

	while(fgets(candidates_in_area,500,candidates_in_fp) != NULL)
	{
	        #if DEBUG
			printf("\n############################################");
			printf("\nProcessing Candidate (%s)",candidates_in_area);
			printf("\nA1000_process_infile****************************************");
			printf("\nProcessing Rcd Count (%d)",candidate_rcds_read);
			printf("\n############################################");
	        #endif

		candidate_rcds_read++;

		strncpy(processing_seq,&candidates_in_area[37],2);
		processing_seq[2]='\0';

		strncpy(rcdtype,&candidates_in_area[39],2);
		rcdtype[2]='\0';

		#if DEBUG
			printf("\nProcess seq (%s)",processing_seq);
			printf("\nRecord Type (%s)",rcdtype);
		#endif

		if(rollback_update=='N' && option_w_commit_work=='Y')
		{
			if(update_commit_count > max_commit_count)
			{
				printf("\n############################################");
				printf("\nA1000_process_infile - Check Commit Count");
				printf("\nProcessing Candidate (%s)",candidates_in_area);
				printf("\nProcessing Rcd Count (%d)",candidate_rcds_read);
				printf("\nCommit Count (%d)",update_commit_count);
				printf("\n############################################");
				EXEC SQL COMMIT WORK;
				update_commit_count=0;
			}
		}
		create_new_cat1='N';
		update_cat1='N';
		delete_trigger_rcd_flag='Y';
		ha_part_not_found='N';

		if(memcmp(rcdtype,"HG",2)==0)
		{
			candidate_hg_rcds_read++;
			errcode=A1300_process_HG_rcd();
		}
		if(memcmp(rcdtype,"HB",2)==0 || memcmp(rcdtype,"ZB",2)==0)
		{
			candidate_hb_rcds_read++;
			errcode=A1200_process_HB_rcd();
		}
		if(memcmp(rcdtype,"HP",2)==0)
		{
			candidate_hp_rcds_read++;
			errcode=A1200_process_HP_rcd();
		}
		if(memcmp(rcdtype,"HA",2)==0 || memcmp(rcdtype,"ZA",2)==0)
		{
			candidate_ha_rcds_read++;
			errcode=A1400_process_HA_rcd();
		}
		if(memcmp(rcdtype,"H4",2)==0)
		{
			candidate_hax04_rcds_read++;
			errcode=A1500_process_H4_rcd();
		}
		if (errcode) return(errcode);
	}

	return(errcode);
}
/*

*/

int     A1200_process_HB_rcd()
{

    int	errcode=0;
	int	valid_alternate=0;
	int	new_authorized=0;
    int     address=0;
    int     status=0;
    char	mysql[5000];

	strncpy((char *) &Slichb_Chgrcd,&candidates_in_area[0],sizeof(slichb_chgrcd));

	#if DEBUG
		printf("\nA1200_process_HB_rcd");
		printf("\nHB Record (%s)",&Slichb_Chgrcd);
	#endif


	errcode=A1201_setup_hb_host_variables();

	if(errcode==0)
	{
		errcode=A1205_get_hb_info();
	}

	if(errcode==0)
	{
		if(memcmp(rcdtype,"ZB",2)!=0)
		{
			valid_alternate=Z9999_chk_alternate((char *) manufac_cage.arr,rncc,rnvc);
		}
		else
		{
			valid_alternate=0;
		}
		#if DEBUG
			printf("\nvalid_alternate (%i)",valid_alternate);
			printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
			printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
			printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
			printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
			printf("\nprev prime pn (%s) ",prev_prime);
			printf("\nprev refnumhb pn (%s) ",prev_refnumhb);
			printf("\nprev part  pn (%s) ",prev_part);
		#endif
		if(valid_alternate==0)
		{
			if(strncmp((char *) prime.arr,prev_prime,32)==0)
			{
				if(strncmp((char *) part.arr,prev_part,32)==0)
				{
					if(delimited_file=='Y')
					{
						strncpy(Gold68_Cat1_delmtd_rcd.manuf_cage,(char *) manufac_cage.arr,manufac_cage.len);
					}
					else
					{
			                        strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) manufac_cage.arr,manufac_cage.len);
					}
					if(memcmp(rcdtype,"ZB",2)!=0)
					{
						errcode=A5030_005_build_gold_mfg_venc();
					}
				}
				else
				{
					if(strncmp(Slichb_Chgrcd.refnumhb,Slichb_Chgrcd.addrefhb,32)==0)
					{
					}
					else
					{
						errcode=A1210_process_hb();
					}
				}
			}
			else
			{
				errcode=A1210_process_hb();
			}
		}
		else
		{

                        alternate_count++;
	                if(delimited_file=='Y')
                        {
			    memset(candidates_out_area,' ',sizeof(candidates_out_area));
			    assert(sizeof(candidates_out_area) <= strlen(candidates_in_area));
                            strcpy(candidates_out_area,candidates_in_area);
/*                            address = (int) strchr(candidates_out_area,'\n');
                            memcpy((char *) address,"\0",1); */
                            strcat(candidates_out_area,"   Alternate Record\n");
	                    status = fputs(candidates_out_area,gold_log_rcds_fp);
                        }
		}
	}
	else
	{
		if(errcode==1)
		{
                    errcode = 0;
		}
	}


	strncpy(prev_refnumhb,Slichb_Chgrcd.refnumhb,32);
	prev_refnumhb[32]='\0';

	if(delete_trigger_rcd_flag=='Y')
	{
		if (delimited_file=='N')
		{
			strncpy((char *) sql_delete_part.arr,spaces,32);
			strncpy((char *) sql_delete_part.arr,Slichb_Chgrcd.refnumhb,32);
			sql_delete_part.arr[32]='\0';
			sql_delete_part.len=32;
			strncpy((char *) sql_delete_cage.arr,Slichb_Chgrcd.cagecdhb,5);
			sql_delete_cage.arr[5]='\0';
			sql_delete_cage.len=5;
			strncpy((char *) sql_delete_adrefn.arr,spaces,32);
			strncpy((char *) sql_delete_adrefn.arr,Slichb_Chgrcd.addrefhb,32);
			sql_delete_adrefn.len=32;
			sql_delete_adrefn.arr[32]='\0';
			strncpy((char *) sql_delete_adrefcage.arr,Slichb_Chgrcd.adcagehb,5);
			sql_delete_adrefcage.len=5;
			sql_delete_adrefcage.arr[5]='\0';

			memset(mysql,' ',sizeof(mysql));
			strcpy(mysql,"update ");
			if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
			{
				strcat(mysql,"scm.slic_hb_chgs ");
			}
			else
			{
				strcat(mysql,"scm.slic_hb_chgs_");
				strcat(mysql,(char *) processing_mdl.arr);
				strcat(mysql," ");
			}
			strcat(mysql,"set slicgld_flag='N' ");
			strcat(mysql,"where refnumhb = rtrim('");
			strcat(mysql,(char *) sql_delete_part.arr);
			strcat(mysql,"') and cagecdhb = '");
			strcat(mysql,(char *) sql_delete_cage.arr);
			strcat(mysql,"' and	addrefhb = rtrim('");
			strcat(mysql,(char *) sql_delete_adrefn.arr);
			strcat(mysql,"') and adcagehb = '");
			strcat(mysql,(char *) sql_delete_adrefcage.arr);
			strcat(mysql,"' ");

			#if DEBUG
				printf("\nA1200_process_HB_rcd Update HB Chgs SQL (%s)",mysql);
			#endif

			EXEC SQL PREPARE UPDATE_HB_CHGS_SQL from :mysql;
			EXEC SQL DECLARE UPDATE_HB_CHGS_CSR CURSOR FOR UPDATE_HB_CHGS_SQL;

			EXEC SQL OPEN UPDATE_HB_CHGS_CSR;

/*
			EXEC SQL
			  update scm.slic_hb_chgs
			     set slicgld_flag='N'
			  where refnumhb = rtrim(:sql_delete_part) and
				cagecdhb = :sql_delete_cage and
				addrefhb = rtrim(:sql_delete_adrefn) and
				adcagehb = :sql_delete_adrefcage;
				*/
			if(sqlca.sqlcode ==0)
			{
				delete_count_hb++;
				update_commit_count++;
				#if DEBUG
					printf("\nHP Rows Update (%d)",sqlca.sqlerrd[2]);
				#endif
			}
			else
			{
				if(sqlca.sqlcode==NOT_FND)
				{
				}
				else
				{
					printf("\nA1200_process_HB_rcd - Update Change Table");
					printf("\nBad SQLCODE ");
					printf("\nrefnumha (%s)",(char *) sql_delete_part.arr);
					printf("\ncagecdxh (%s)",(char *) sql_delete_cage.arr);
					printf("\nadref (%s)", (char *) sql_delete_adrefn.arr);
					printf("\nadcage (%s)", (char *) sql_delete_adrefcage.arr);
					printf("\nSQL (%s)",mysql);
					errcode=sqlca.sqlcode;
					A999_02_dberr();
				}
			}
		}
	}

	return(errcode);
}
/*

*/
int     A1201_setup_hb_host_variables()
{
	int	i=0;
        int	errcode=0;

	#if DEBUG
		printf("\nA1201_setup_hb_host_variables");
	#endif

	strncpy(prev_refnumhb,spaces,32);
	strncpy((char *) prime.arr,spaces,32);
	strncpy((char *) prime.arr,Slichb_Chgrcd.refnumhb,32);
	prime.arr[32]='\0';
	prime.len=32;

	strncpy((char *) prime_cage.arr,Slichb_Chgrcd.cagecdhb,5);
	prime_cage.arr[5]='\0';
	prime_cage.len=5;

	strncpy((char *) part.arr,spaces,32);
	strncpy((char *) part.arr,Slichb_Chgrcd.addrefhb,32);
	part.len=32;
	part.arr[32]='\0';

	strncpy((char *) cat1_part.arr,spaces,50);
	strncpy((char *) cat1_part.arr,Slichb_Chgrcd.addrefhb,32);
	cat1_part.len=50;
	cat1_part.arr[50]='\0';

	strncpy((char *) manufac_cage_hb.arr,Slichb_Chgrcd.adcagehb,5);
	manufac_cage_hb.len=5;
	manufac_cage_hb.arr[5]='\0';

	if(strncmp((char *) prime.arr,(char *) part.arr,32) == 0)
		strncpy((char *) manufac_cage.arr,(char *) prime_cage.arr,prime_cage.len);
	else
		strncpy((char *) manufac_cage.arr,(char *) manufac_cage_hb.arr,manufac_cage_hb.len);
	manufac_cage.len=5;
	manufac_cage.arr[5]='\0';

	errcode=Z9993_check_authorized_scm_part();
        if ((errcode_global == 8887) && (delimited_file=='Y')) {
             errcode_global = 0;
             return(1);
        }

	#if DEBUG
		printf("\nError Code (%d)",errcode);
		printf("\nValid SCM Part (%c)#######################################",valid_scm_part);
	#endif

	/*
	if(valid_scm_part=='Y')
	{
		for(i=0;i<=seg_code_max;i++)
		{
			#if DEBUG
				printf("\nSCM Program (%s)",hax04_scm_program.arr);
				printf("\nseg_code_tble (%s)",seg_code_tble[i]);
			#endif
			if(strncmp((char *) hax04_scm_program.arr,(char *) seg_code_tble[i].pgm,hax04_scm_program.len)==0)
			{
				strncpy((char *) seg_code_tble[i].use," ",1);
			}
		}

		valid_scm_part='Y';
		errcode=0;
	}
	else
	{
		valid_scm_part='N';
		errcode=1;
	}
	*/

	#if DEBUG
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
		printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
		printf("\ncat1 part pn (%s) (%d) ",(char *) cat1_part.arr, strlen((char *) cat1_part.arr));
		printf("\nValid SCM Part (%c)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",valid_scm_part);
	#endif

	return(errcode);
}
/*

*/
int     A1205_get_hb_info()
{

    int	errcode=0;
	char my_sql[500];

	memset (my_sql,'\0',sizeof(my_sql));


	#if DEBUG
	  printf("\nA1205_get_hb_info");
  	printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
  	printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
  	printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
  	printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
	#endif

	strcpy(my_sql,"select hb.adrncchb, hb.adrnvchb ");
	strcat(my_sql,"from ");
	strcat(my_sql, processing_mdl.arr);
	strcat(my_sql,"_hb hb where hb.can_int = 0 and hb.refnumhb = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and hb.cagecdhb = '");
	strcat(my_sql,prime_cage.arr);
	strcat(my_sql,"' and hb.addrefhb = '");
	strcat(my_sql, part.arr);
	strcat(my_sql,"' and hb.adcagehb = '");
	strcat(my_sql, manufac_cage_hb.arr);
	strcat(my_sql,"'");

	#if DEBUG
	  printf("\n\nA1205_get_hb_info*********************************************************************");
    printf("\n*** dynamic strlen(my_sql)=%d",strlen(my_sql));
	  printf("\n*** dynamic sql = %s",my_sql);
  	printf("\n******************************************************************************\n\n");
	#endif

	EXEC SQL PREPARE S FROM :my_sql;
	EXEC SQL DECLARE C CURSOR FOR S;

		/* open the cursor */
	EXEC SQL OPEN C;

	if(sqlca.sqlcode == FND)
	{
		#if DEBUG
		  printf("A1205_get_hb_info sqlca.sqlcode=%d FMD=%d\n", sqlca.sqlcode, FND);
		#endif

		EXEC SQL FETCH C
		   into :rncc:rncc_i,
				:rnvc:rnvc_i;

		#if DEBUG
			printf("\n\nA1205_get_hb_info*********************************************************************");
			printf("\n*** rncc = %c rncc_i=%d",rncc, rncc_i);
			printf("\n*** rnvc = %c rnvc_i=%d",rnvc, rnvc_i);
			printf("\n*** sqlcode = %d",sqlca.sqlcode);
			printf("\n******************************************************************************\n\n");
		#endif
	}
	else
	{
		#if DEBUG
	    printf("A1205_get_hb_info sqlca.sqlcode=%d\n", sqlca.sqlcode);
		#endif
		if(sqlca.sqlcode == NOT_FND)
		{
			#if DEBUG
			  printf("A1205_get_hb_info sqlca.sqlcode=%d NOT_FMD=%d\n", sqlca.sqlcode, NOT_FND);
			#endif
			errcode=1;
		}
		else
		{
			printf("\nA1205_get_hb_info");
			printf("\nBad SQLCODE ");
			printf("\nrefnumhb (%s)",(char *) prime.arr);
			printf("\ncagecdhb (%s)",(char *) prime_cage.arr);
			printf("\naddrefhb (%s)",(char *) part.arr);
			printf("\nadcagehb (%s)",(char *) manufac_cage.arr);
			printf("\nSQL (%s)",my_sql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	#if DEBUG
	  printf("A1205_get_hb_info errcode=%d\n", errcode);
	#endif

	return(errcode);
}
/*

*/
int	A1210_process_hb()
{
        int	errcode=0;
	int	chk_cat1_part=0;
	int	chk_cat1_prime=0;
	int	new_authorized=0;

	#if DEBUG
		printf("\nA1210_process_hb");
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
		printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
	#endif

	chk_cat1_part=Z9992_check_cat1_part();
	#if DEBUG
		printf("\nChk CAT1 Part (%d)",chk_cat1_part);
		printf("\nChk CAT1 Manuf_cage (%s)",manufac_cage.arr);
	#endif
	if(chk_cat1_part==0)
	{
		if ((errcode_global==8888) && (delimited_file=='Y'))
		{
			errcode_global = 0;
			errcode = 0;
			return(0);
		}
		errcode=A5000_process_GOLD_creation();
	}
	else
	{
		if(chk_cat1_part==1)
		{
			if ((errcode_global == 8888) && (delimited_file=='Y'))
			{
				errcode_global = 0;
				errcode = 0;
				return(errcode);
			}
			chk_cat1_prime=Z9991_check_cat1_prime();
			if(chk_cat1_prime==0)
			{
				errcode=A5000_process_GOLD_creation();
			}
			else
			{
				if(chk_cat1_prime==1)
				{
					if((memcmp(rcdtype,"ZA",2)==0) || (memcmp(rcdtype,"ZB",2)==0))
					{
						new_authorized=0;
						errcode_global=0;
						valid_scm_part='Y';
					}
					else
					{
						new_authorized=Z9993_check_authorized_scm_part();
					}
					if ((errcode_global == 8887) && (delimited_file=='Y'))
					{
						errcode_global = 0;
						errcode = 0;
						return(errcode);
					}
					if(new_authorized==0)
					{
						if(valid_scm_part=='Y')
						{
							errcode=A5000_process_GOLD_creation();
						}
					}
				}
			}
		}
	}
	return(errcode);
}
/*

*/

int     A1200_process_HP_rcd()
{

	int	valid_alternate=0;
/*	int	chk_cat1_part=0;
	int	chk_cat1_prime=0;
	int	new_authorized=0; */
    int	errcode=0;
    int     address=0;
    int     status=0;
    char	mysql[5000];

	strncpy((char *) &Slichp_Chgrcd,&candidates_in_area[0],sizeof(slichp_chgrcd));

	#if DEBUG
		printf("\nA1200_process_HP_rcd");
		printf("\nHP Record (%s)",&Slichp_Chgrcd);
	#endif

	strncpy((char *) prime.arr,spaces,32);
	strncpy((char *) prime.arr,Slichp_Chgrcd.refnumha,32);
	prime.arr[32]='\0';
	prime.len=32;

	strncpy((char *) prime_cage.arr,Slichp_Chgrcd.cagecdxh,5);
	prime_cage.arr[5]='\0';
	prime_cage.len=5;

	if (delimited_file=='N')
	{
		SETVCHAR(sql_delete_part,Slichp_Chgrcd.refnumha);
		SETVCHAR(sql_delete_cage,Slichp_Chgrcd.cagecdxh) ;
		SETVCHAR(hp_eiacodxa, Slichp_Chgrcd.eiacodxa);
		SETVCHAR(hp_lsaconxb,Slichp_Chgrcd.lsaconxb) ;
		SETVCHAR(hp_altlcnxb, Slichp_Chgrcd.altlcnxb) ;
		SETVCHAR(hp_canumbhp,Slichp_Chgrcd.canumbhp);

		#if DEBUG
			printf("\nPart (%s)",sql_delete_part.arr);
			printf("\nCage (%s)",sql_delete_cage.arr);
			printf("\neiacodxa (%s)",hp_eiacodxa.arr);
			printf("\nlsaconxb (%s)",hp_lsaconxb.arr);
			printf("\naltlcnxb (%s)",hp_altlcnxb.arr);
			printf("\ncanumbhp (%s)",hp_canumbhp.arr);
		#endif

		memset(mysql,' ',sizeof(mysql));

		strcpy(mysql,"update ");
		if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
		{
			strcat(mysql,"scm.slic_hp_chgs ");
		}
		else
		{
			strcat(mysql,"scm.slic_hp_chgs_");
			strcat(mysql,(char *) processing_mdl.arr);
			strcat(mysql," ");
		}
		strcat(mysql,"set slicgld_flag='N' ");
		strcat(mysql,"where refnumha = rtrim('");
		strcat(mysql,(char *) sql_delete_part.arr);
		strcat(mysql,"') and cagecdxh = '");
		strcat(mysql,(char *) sql_delete_cage.arr);
		strcat(mysql,"' and eiacodxa = rtrim('");
		strcat(mysql,(char *) hp_eiacodxa.arr);
		strcat(mysql,"') and lsaconxb = rtrim('");
		strcat(mysql,(char *) hp_lsaconxb.arr);
		strcat(mysql,"') and altlcnxb = rtrim('");
		strcat(mysql,(char *) hp_altlcnxb.arr);
		strcat(mysql,"') and lcntypxb = 'P' and canumbhp = rtrim('");
		strcat(mysql,(char *) hp_canumbhp.arr);
		strcat(mysql,"') ");

		#if DEBUG
			printf("\nA1200_process_HP_rcd CHG SQL (%s)",mysql);
		#endif


		EXEC SQL PREPARE UPDATE_HP_CHGS_SQL from :mysql;
		EXEC SQL DECLARE UPDATE_HP_CHGS_CSR CURSOR FOR UPDATE_HP_CHGS_SQL;

		EXEC SQL OPEN UPDATE_HP_CHGS_CSR;

		if(sqlca.sqlcode ==0)
		{
			delete_count_hp++;
			update_commit_count++;
			#if DEBUG
				printf("\nHP Rows Update (%d)",sqlca.sqlerrd[2]);
			#endif
		}
		else
		{
			if(sqlca.sqlcode==NOT_FND)
			{
			}
			else
			{
				printf("\nA1200_process_HP_rcd - Update Chg Table");
				printf("\nBad SQLCODE ");
				printf("\neiacode  (%s)",(char *) hp_eiacodxa.arr);
				printf("\nlsaconxb (%s)",(char *) hp_lsaconxb.arr);
				printf("\naltlcnxb (%s)",(char *) hp_altlcnxb.arr);
				printf("\ncanumbhp (%s)",(char *) hp_canumbhp.arr);
				printf("\nrefnumha (%s)",(char *) sql_delete_part.arr);
				printf("\ncagecdxh (%s)",(char *) sql_delete_cage.arr);
				printf("\nSQL (%s)",mysql);
				errcode=sqlca.sqlcode;
				A999_02_dberr();
			}
		}
	}

	return(errcode);
}
/*

*/
int     A1300_process_HG_rcd()
{

    int	errcode=0;
    char	mysql[2000];

	#if DEBUG
		printf("\nA1300_process_HG_rcd");
	#endif

	errcode=A1301_setup_HG_host_variables();
	if(errcode==0)
	{
		errcode=Z9992_check_cat1_part();
		if(errcode==0)
		{
			errcode=A5000_process_GOLD_creation();
		}
		else
		{

			if ((errcode_global == 8888) && (delimited_file=='Y')) {
  				errcode_global = 0;
				errcode = 0;
				return(0);
			}

			if(valid_scm_part=='Y')
			{
				errcode=A5000_process_GOLD_creation();
			}
			else
			{
				if(errcode==1)
				{
					errcode=0;
				}
			}
		}
	}
	else
	{
		if(errcode==NOT_FND)
		{
			errcode=0;
		}
		if(errcode==1)
		{
			errcode=0;
		}
	}

	if (delimited_file=='N')
	{
		SETVCHAR(sql_delete_part,Slichg_Chgrcd.refnumha) ;
    		SETVCHAR(sql_delete_cage,Slichg_Chgrcd.cagecdxh) ;
    		SETVCHAR(hg_eiacodxa, Slichg_Chgrcd.eiacodxa) ;
 		SETVCHAR(hg_lsaconxb,Slichg_Chgrcd.lsaconxb) ;
		SETVCHAR(hg_altlcnxb,Slichg_Chgrcd.altlcnxb) ;

		#if DEBUG
			printf("\nRefnumha (%s) (%d)",sql_delete_part.arr,sql_delete_part.len);
			printf("\nCage (%s) (%d)",sql_delete_cage.arr,sql_delete_cage.len);
			printf("\nEiacodxa (%s) (%d) ",hg_eiacodxa.arr,hg_eiacodxa.len);
			printf("\nlsaconxb (%s) (%d) ",hg_lsaconxb.arr,hg_lsaconxb.len);
			printf("\naltlcnxb (%s) (%d) ",hg_altlcnxb.arr,hg_altlcnxb.len);
		#endif
/*
		EXEC SQL
		   update scm.slic_hg_chgs
		      set slicgld_flag='N'
		  where refnumha = rtrim(:sql_delete_part) and
         		cagecdxh = :sql_delete_cage and
			eiacodxa = rtrim(:hg_eiacodxa) and
         		lsaconxb = rtrim(:hg_lsaconxb) and
         		altlcnxb = :hg_altlcnxb and
			lcntypxb = 'P';
			*/

	        memset(mysql,' ',sizeof(mysql));

		strcpy(mysql,"update ");
		if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
		{
			strcat(mysql,"scm.slic_hg_chgs ");
		}
		else
		{
			strcat(mysql,"scm.slic_hg_chgs_");
			strcat(mysql,(char *) processing_mdl.arr);
			strcat(mysql," ");
		}
		strcat(mysql,"set slicgld_flag='N' where refnumha = rtrim('");
		strcat(mysql,(char *) sql_delete_part.arr);
		strcat(mysql,"') and cagecdxh = '");
		strcat(mysql,(char *) sql_delete_cage.arr);
		strcat(mysql,"' and	eiacodxa = rtrim('");
		strcat(mysql,(char *) hg_eiacodxa.arr);
		strcat(mysql,"') and lsaconxb = rtrim('");
		strcat(mysql,(char *) hg_lsaconxb.arr);
		strcat(mysql,"') and altlcnxb = '");
		strcat(mysql,(char *) hg_altlcnxb.arr);
		strcat(mysql,"' and lcntypxb = 'P' ");


		#if DEBUG
			printf("\nA1300_process_HG_rcd CHG SQL (%s)",mysql);
		#endif

		EXEC SQL PREPARE UPDATE_HG_CHGS_SQL from :mysql;
		EXEC SQL DECLARE UPDATE_HG_CHGS_CSR CURSOR FOR UPDATE_HG_CHGS_SQL;

		EXEC SQL OPEN UPDATE_HG_CHGS_CSR;

		if(sqlca.sqlcode ==0)
		{
			delete_count_hg++;
			update_commit_count++;
			#if DEBUG
				printf("\nHG Rows Update (%d)",sqlca.sqlerrd[2]);
			#endif
		}
		else
		{
			if(sqlca.sqlcode==NOT_FND)
			{
			}
			else
			{
				printf("\nA1300_process_HG_rcd - Update Chg Table");
				printf("\nBad SQLCODE ");
				printf("\neiacode  (%s)",(char *) hg_eiacodxa.arr);
				printf("\nlsaconxb (%s)",(char *) hg_lsaconxb.arr);
				printf("\naltlcnxb (%s)",(char *) hg_altlcnxb.arr);
				printf("\nrefnumha (%s)",(char *) sql_delete_part.arr);
				printf("\ncagecdxh (%s)",(char *) sql_delete_cage.arr);
				printf("\nSQL (%s)",mysql);
				errcode=sqlca.sqlcode;
				A999_02_dberr();
			}
		}
	}

	return(errcode);
}
/*

*/
int     A1301_setup_HG_host_variables()
{
	int	i=0;
        int	errcode=0;

	#if DEBUG
		printf("\nA1301_setup_HG_host_variables");
		printf("\nRecord Type (%s)",rcdtype);
	#endif

	strncpy((char *) &Slichg_Chgrcd,&candidates_in_area[0],sizeof(slichg_chgrcd));

	strncpy((char *) prime.arr,spaces,32);
	strncpy((char *) prime.arr,Slichg_Chgrcd.refnumha,32);
	prime.arr[32]='\0';
	prime.len=32;

	strncpy((char *) cat1_part.arr,spaces,50);
	strncpy((char *) cat1_part.arr,Slichg_Chgrcd.refnumha,32);
	cat1_part.arr[50]='\0';
	cat1_part.len=50;

	strncpy((char *) prime_cage.arr,Slichg_Chgrcd.cagecdxh,5);
	prime_cage.arr[5]='\0';
	prime_cage.len=5;

	strncpy((char *) part.arr,Slichg_Chgrcd.refnumha,32);
	part.len=32;
	part.arr[32]='\0';

	strncpy((char *) manufac_cage.arr,spaces,5);
	strncpy((char *) manufac_cage.arr,Slichg_Chgrcd.cagecdxh,5);
	manufac_cage.len=5;
	manufac_cage.arr[5]='\0';

	for(i=0;i<=seg_code_max;i++)
	{
		#if DEBUG
			printf("\nSCM Program (%s)",hax04_scm_program.arr);
			printf("\nseg_code_tble (%s)",seg_code_tble[i]);
		#endif
		if(strncmp((char *) hax04_scm_program.arr,(char *) seg_code_tble[i].pgm,hax04_scm_program.len)==0)
		{
			strncpy((char *) seg_code_tble[i].use," ",1);
		}
	}

	if((memcmp(rcdtype,"ZA",2)==0) || (memcmp(rcdtype,"ZB",2)==0))
       {
		errcode_global=0;
		valid_scm_part='Y';
       }
       else
       {
		#if DEBUG
			printf("\n*****************************Z9993_check_authorized_scm_part");
		#endif
		errcode=Z9993_check_authorized_scm_part();
	}
        if ((errcode_global == 8887) && (delimited_file=='Y')) {
             errcode_global = 1;
             return(1);
        }

	#if DEBUG
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
		printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
		printf("\ncat1 pn (%s) (%d) ",(char *) cat1_part.arr,strlen((char *) cat1_part.arr));
		printf("\nValid SCM Part (%c)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ",valid_scm_part);
	#endif

	return(errcode);
}
/*

*/
int     A1400_process_HA_rcd()
{

	int	errcode=0;
	char	mysql[2000];

	#if DEBUG
		printf("\nA1400_process_HA_rcd");
	#endif

	errcode=A1401_setup_HA_host_variables();
	if(errcode==0)
	{
		if(valid_scm_part=='Y')
		{
			errcode=Z9992_check_cat1_part();
			if(errcode==0)
			{
				errcode=A5000_process_GOLD_creation();
			}
			else
			{
				if ((errcode_global == 8888) && (delimited_file=='Y'))
				{
					errcode_global = 0;
					errcode = 0;
					return(0);
				}
				if(valid_scm_part=='Y')
				{
					errcode=A5000_process_GOLD_creation();
				}
				else
				{
					if(errcode==1)
					{
						errcode=0;
					}
				}
			}
		}
	}
	else
	{
		if(errcode==NOT_FND)
		{
			errcode=0;
		}
		if(errcode==1)
		{
			errcode=0;
		}
	}


	if (delimited_file=='N')
	{
		strncpy((char *) sql_delete_part.arr,spaces,32);
		strncpy((char *) sql_delete_part.arr,Slichg_Chgrcd.refnumha,32);
		sql_delete_part.arr[32]='\0';
		sql_delete_part.len=32;
		strncpy((char *) sql_delete_cage.arr,Slichg_Chgrcd.cagecdxh,5);
		sql_delete_cage.arr[5]='\0';
		sql_delete_cage.len=5;

		memset(mysql,' ',sizeof(mysql));

		strcpy(mysql,"update ");
		if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
		{
			strcat(mysql,"scm.slic_ha_chgs ");
		}
		else
		{
			strcat(mysql,"scm.slic_ha_chgs_");
			strcat(mysql,(char *) processing_mdl.arr);
			strcat(mysql," ");
		}
		strcat(mysql,"set slicgld_flag = 'N' where refnumha = rtrim('");
		strcat(mysql,(char *) sql_delete_part.arr);
		strcat(mysql,"') and cagecdxh = '");
		strcat(mysql,(char *) sql_delete_cage.arr);
		strcat(mysql,"' ");
/*
		EXEC SQL
		   update scm.slic_ha_chgs
		      set slicgld_flag = 'N'
	 	  where refnumha = rtrim(:sql_delete_part) and
			cagecdxh = :sql_delete_cage;
*/

		#if DEBUG
			printf("\nA1400_process_HA_rcd CHG SQL (%s)",mysql);
		#endif


		EXEC SQL PREPARE UPDATE_HA_CHGS_SQL from :mysql;
		EXEC SQL DECLARE UPDATE_HA_CHGS_CSR CURSOR FOR UPDATE_HA_CHGS_SQL;

		EXEC SQL OPEN UPDATE_HA_CHGS_CSR;

		if (sqlca.sqlcode == FND)
		{
			delete_count_ha++;
			update_commit_count++;
			#if DEBUG
				printf("\nHA Rows Update (%d)",sqlca.sqlerrd[2]);
			#endif
		}
		else
		{
			if(sqlca.sqlcode == NOT_FND)
			{
			}
			else
			{
				printf("\nA1400_process_HA_rcd - Update Chg Table");
				printf("\nBad SQLCODE ");
				printf("\nrefnumha (%s)",(char *) sql_delete_part.arr);
				printf("\ncagecdxh (%s)",(char *) sql_delete_cage.arr);
				printf("\nSQL (%s)",mysql);
				errcode=sqlca.sqlcode;
				A999_02_dberr();
			}
		}
	}

	return(errcode);
}
/*

*/
int     A1401_setup_HA_host_variables()
{
	int	errcode=0;
	int	i=0;

	#if DEBUG
		printf("\nA1401_setup_HA_host_variables");
	#endif

	strncpy((char *) &Slichg_Chgrcd,&candidates_in_area[0],sizeof(slichg_chgrcd));

	strncpy((char *) prime.arr,spaces,32);
	strncpy((char *) prime.arr,Slichg_Chgrcd.refnumha,32);
	prime.arr[32]='\0';
	prime.len=32;

	strncpy((char *) cat1_part.arr,spaces,50);
	strncpy((char *) cat1_part.arr,Slichg_Chgrcd.refnumha,32);
	cat1_part.arr[50]='\0';
	cat1_part.len=50;

	strncpy((char *) prime_cage.arr,Slichg_Chgrcd.cagecdxh,5);
	prime_cage.arr[5]='\0';
	prime_cage.len=5;

	strncpy((char *) part.arr,Slichg_Chgrcd.refnumha,32);
	part.len=32;
	part.arr[32]='\0';

	strncpy((char *) manufac_cage.arr,spaces,5);
	strncpy((char *) manufac_cage.arr,Slichg_Chgrcd.cagecdxh,5);
	manufac_cage.len=5;
	manufac_cage.arr[5]='\0';

	for(i=0;i<=seg_code_max;i++)
	{
		#if DEBUG
			printf("\nSCM Program (%s)",hax04_scm_program.arr);
			printf("\nseg_code_tble (%s)",seg_code_tble[i]);
		#endif
		if(strncmp((char *) hax04_scm_program.arr,(char *) seg_code_tble[i].pgm,hax04_scm_program.len)==0)
		{
			strncpy((char *) seg_code_tble[i].use," ",1);
		}
	}

	if((memcmp(rcdtype,"ZA",2)==0) || (memcmp(rcdtype,"ZB",2)==0))
	{
	      errcode_global=0;
	      valid_scm_part='Y';
	}
	else
	{
		errcode=Z9993_check_authorized_scm_part();
	}
        if ((errcode_global == 8887) && (delimited_file=='Y')) {
             errcode_global = 0;
             return(1);
        }

	#if DEBUG
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
		printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
		printf("\ncat1 pn (%s) (%d) ",(char *) cat1_part.arr,strlen((char *) cat1_part.arr));
		printf("\nValid SCM Part (%c)&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& ",valid_scm_part);
	#endif

	return(errcode);
}
/*

*/
int     A1500_process_H4_rcd()
{

    int	errcode=0;
    char	mysql[2000];

	#if DEBUG
		printf("\nA1500_process_H4_rcd");
	#endif

	errcode=A1501_setup_H4_host_variables();
	if(errcode==0)
	{
		errcode=Z9992_check_cat1_part();
		if(errcode==0)
		{
			errcode=A5000_process_GOLD_creation();
		}
		else
		{
                        if ((errcode_global == 8888) && (delimited_file=='Y')) {
                           errcode_global = 0;
                           errcode = 0;
                           return(0);
                        }
			if(valid_scm_part=='Y')
			{
				errcode=A5000_process_GOLD_creation();
			}
			else
			{
				if(errcode==1)
				{
					errcode=0;
				}
			}
		}
	}
	else
	{
		if(errcode==NOT_FND)
		{
			errcode=0;
		}
                if (errcode==1) errcode=0;
	}


	if (delimited_file=='N')
	{
		strncpy((char *) sql_delete_part.arr,spaces,32);
		strncpy((char *) sql_delete_part.arr,Slichg_Chgrcd.refnumha,32);
		sql_delete_part.arr[32]='\0';
		sql_delete_part.len=32;
		strncpy((char *) sql_delete_cage.arr,Slichg_Chgrcd.cagecdxh,5);
		sql_delete_cage.arr[5]='\0';
		sql_delete_cage.len=5;

		#if DEBUG
			printf("\nA1400_process_HA_rcd CHG SQL (%s)",mysql);
		#endif

		memset(mysql,' ',sizeof(mysql));

		strcpy(mysql,"update ");
		if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
		{
			strcat(mysql,"scm.slic_hax04_chgs ");
		}
		else
		{
			strcat(mysql,"scm.slic_haxscm_chgs_");
			strcat(mysql,(char *) processing_mdl.arr);
			strcat(mysql," ");
		}
		strcat(mysql,"set slicgld_flag='N' where refnumha = rtrim('");
		strcat(mysql,(char *) sql_delete_part.arr);
		strcat(mysql,"') and cagecdxh = '");
		strcat(mysql,(char *) sql_delete_cage.arr);
		strcat(mysql,"' ");

		#if DEBUG
			printf("\nA1400_process_HA_rcd CHG SQL (%s)",mysql);
		#endif

		EXEC SQL PREPARE UPDATE_HAX04_SQL from :mysql;
		EXEC SQL DECLARE UPDATE_HAX04_CSR CURSOR FOR UPDATE_HAX04_SQL;

		EXEC SQL OPEN UPDATE_HAX04_CSR;

/*		EXEC SQL
		   update scm.slic_hax04_chgs
			    set slicgld_flag='N'
		   where refnumha = rtrim(:sql_delete_part) and
			cagecdxh = :sql_delete_cage;
			*/
		if (sqlca.sqlcode == FND)
		{
			delete_count_hax04++;
			update_commit_count++;
			#if DEBUG
				printf("\nHAX04 Rows Update (%d)",sqlca.sqlerrd[2]);
			#endif
		}
		else
		{
			if(sqlca.sqlcode == NOT_FND)
			{
			}
			else
			{
				printf("\nA1500_process_H4_rcd - Update Chg Table");
				printf("\nBad SQLCODE ");
				printf("\nrefnumha (%s)",(char *) sql_delete_part.arr);
				printf("\ncagecdxh (%s)",(char *) sql_delete_cage.arr);
				printf("\nSQL (%s)",mysql);
				errcode=sqlca.sqlcode;
				A999_02_dberr();
			}
		}
	}

	return(errcode);
}
/*

*/
int     A1501_setup_H4_host_variables()
{
	int	i=0;
        int	errcode=0;

	#if DEBUG
		printf("\nA1501_setup_H4_host_variables");
	#endif

	strncpy((char *) &Slichg_Chgrcd,&candidates_in_area[0],sizeof(slichg_chgrcd));

	strncpy((char *) prime.arr,spaces,32);
	strncpy((char *) prime.arr,Slichg_Chgrcd.refnumha,32);
	prime.arr[32]='\0';
	prime.len=32;

	strncpy((char *) cat1_part.arr,spaces,50);
	strncpy((char *) cat1_part.arr,Slichg_Chgrcd.refnumha,32);
	cat1_part.arr[50]='\0';
	cat1_part.len=50;

	strncpy((char *) prime_cage.arr,Slichg_Chgrcd.cagecdxh,5);
	prime_cage.arr[5]='\0';
	prime_cage.len=5;

	strncpy((char *) part.arr,Slichg_Chgrcd.refnumha,32);
	part.len=32;
	part.arr[32]='\0';

	strncpy((char *) manufac_cage.arr,spaces,5);
	strncpy((char *) manufac_cage.arr,Slichg_Chgrcd.cagecdxh,5);
	manufac_cage.len=5;
	manufac_cage.arr[5]='\0';

	for(i=0;i<=seg_code_max;i++)
	{
		#if DEBUG
			printf("\nSCM Program (%s)",hax04_scm_program.arr);
			printf("\nseg_code_tble (%s)",seg_code_tble[i]);
		#endif
		if(strncmp((char *) hax04_scm_program.arr,(char *) seg_code_tble[i].pgm,hax04_scm_program.len)==0)
		{
			strncpy((char *) seg_code_tble[i].use," ",1);
		}
	}

	if((memcmp(rcdtype,"ZA",2)==0) || (memcmp(rcdtype,"ZB",2)==0))
	{
	      errcode_global=0;
	      valid_scm_part='Y';
	}
	else
	{
		errcode=Z9993_check_authorized_scm_part();
	}
        if ((errcode_global == 8887) && (delimited_file=='Y')) {
             errcode_global = 0;
             return(1);
        }

	#if DEBUG
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
		printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
		printf("\ncat1 pn (%s) (%d) ",(char *) cat1_part.arr,strlen((char *) cat1_part.arr));
		printf("\nValid SCM Part (%c)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ",valid_scm_part);
	#endif

	return(errcode);
}
/*

*/
int	A5000_process_GOLD_creation()
{
	int	chk_cat1_prime=0;
        int	errcode=0;
	int	status=0;
	int	address=0;

	#if DEBUG
		printf("\nA5000_process_GOLD_creation");
		printf("\nRecord Type (%s)",rcdtype);
		printf("\nprev_prime (%s)",prev_prime);
		printf("\nprime (%s)",prime.arr);
		printf("\nchk_cat1_prime (%i)",chk_cat1_prime);
	#endif

	if(strncmp(rcdtype,"HG",2)==0)
		chk_cat1_prime=1;
	else
		if(strncmp((char *) prime.arr,prev_prime,32)==0)
			chk_cat1_prime=Z9992_check_cat1_part();

	#if DEBUG
		printf("\nchk_cat1_prime (%i)",chk_cat1_prime);
	#endif
	switch(chk_cat1_prime)
	{
		case 0:
			chk_cat1_prime=Z9992_check_cat1_part();
			#if DEBUG
				printf("\nchk_cat1_prime (%i)",chk_cat1_prime);
			#endif
			if(chk_cat1_prime==0)
				errcode=A5005_build_gold_api();
			break;
		case 1:
			errcode=0;
			errcode=A5005_build_gold_api();
			break;
		default:
			break;
	}

	return(errcode);
}
/*

*/
int     A5005_build_gold_api()
{

        int	errcode=0;
	#if DEBUG
		printf("\nA5005_build_gold_api");
		printf("\nDelimited Flag (%c)",delimited_file);
	#endif

	if((strncmp(prev_part,(char *) part.arr,32)==0) &&
	   (strncmp(prev_prime,(char *) prime.arr,32)==0) &&
	   (strncmp(prev_manufac_cage,(char *) manufac_cage.arr,5)==0) &&
	   (strncmp(prev_prime_cage,(char *) prime_cage.arr,5)==0))
	{
	}
	else
	{
		errcode=A5010_build_gold_cat1();
		errcode=Z9999_write_gold_cat1_rcds();
	}

	return(errcode);
}

/*

*/
int     A5010_build_gold_cat1()
{

        int	errcode=0;
	int 	i=0;

	#if DEBUG
		printf("\nA5010_build_gold_cat1");
		printf("\nRecord Type (%s)",rcdtype);
		printf("\nprev_prime (%s)",prev_prime);
		printf("\nprime (%s)",prime.arr);
	#endif

	errcode=A5999_01_get_ha();
	#if DEBUG
		printf("\n\n******************************************************");
		printf("\n***  A5999_01_get_ha error code (HAX01) = %d",errcode);
		printf("\n***  ha_part_not_found (%c)",ha_part_not_found);
		printf("\n*******************************************************");
	#endif
	if(ha_part_not_found=='N')
	{
		#if DEBUG
			printf("\n\n******************************************************");
			printf("\n***  A5999_01_get_ha error code (HAX01) = %d",errcode);
			printf("\n***  ha_part_not_found (%c)",ha_part_not_found);
			printf("\n*******************************************************");
		#endif
		if(errcode==0)
		{
			errcode=A5999_02_get_hax01();
		}

		/*
		#if DEBUG
			printf("\n\n******************************************************");
			printf("\n***  A5999_01_get_ha error code (HG) = %d",errcode);
			printf("\n*******************************************************");
		#endif
		*/

		if(errcode==0)
		{
			errcode=A5999_03_get_hg();
		}
		if(errcode==0)
		{
			if(strncmp((char *) prime.arr,prev_prime,32)==0)
			{
			}
			else
			{
				if((strncmp(rcdtype,"HG",2)==0) ||
				   ( strncmp(rcdtype,"H4",2)==0) ||
				   ( strncmp(rcdtype,"ZA",2)==0) ||
				   ( strncmp(rcdtype,"ZB",2)==0) )
				{
					errcode=A5999_04_get_hgx01();
				}
				else
				{
					for(i=0;i<=99;i++)
					{
						strncpy(suplyr_tble[i],spaces,6);
						suplyr_tble[i][5]='\0';
					}
					suplyr_max=0;
				}
			}
		}

		if(errcode==0)
		{
			if((strncmp(rcdtype,"HG",2)==0) ||
			    (strncmp(rcdtype,"H4",2)==0))
			{
				errcode=A5999_05_get_repair_agents();
			}
			else
			{
				for(i=0;i<=199;i++)
				{
					strncpy(repr_agnt_tble[i],spaces,6);
					repr_agnt_tble[i][6]='\0';
				}
				repr_agnt_max=0;
			}

		}
	}

	return(errcode);
}
/*

*/
int     A5020_build_catl()
{

        int	errcode=0;
	#if DEBUG
		printf("\nA5020_build_catl");
	#endif

	return(errcode);
}
/*

*/
int	A5030_build_gold_venc()
{

        int	errcode=0;
	int	i=0;

	#if DEBUG
		printf("\nA5030_build_gold_venc");
	#endif

	venc_seq=0;
	#if DEBUG
		printf("\nvenc_seq=%d",venc_seq);
	#endif
	errcode=A5030_005_build_gold_mfg_venc();

	update_venc_leadtime='N';

	if(errcode==FND)
	{
		errcode=A5030_010_build_gold_suplyr_venc();
	}
/*
	if(errcode==FND)
	{
		errcode=A5030_020_build_gold_repair_venc();
	}  */

	return(errcode);
}
/*

*/
int	A5030_005_build_gold_mfg_venc()
{
	int	i=0;
        int	errcode=0;
	char	seq[4];

	#if DEBUG
		printf("\nA5030_005_build_gold_mfg_venc 1");
		printf("seq=%3.3d\n",venc_seq);
		printf("delimited_file=%c\n", delimited_file);
	#endif

        venc_seq++;

	snprintf(seq,sizeof(seq),"%3d",venc_seq);
	#if DEBUG
		printf("seq=%s\n",seq);
		printf("\nA5030_005_build_gold_mfg_venc 2");
	#endif

	if(delimited_file=='Y')
	{
	        #if DEBUG
		  printf("\nrcd 1") ;
		#endif 

		strncpy(Gold68_Venc_delmtd_rcd.part,(char *) Gold68_Cat1_delmtd_rcd.part,50);
	        #if DEBUG
		  printf("\nrcd 1.0") ;
		#endif 
		strncpy(Gold68_Venc_delmtd_rcd.vendor_part,(char *) Gold68_Cat1_delmtd_rcd.part,50);
	        #if DEBUG
		  printf("\nrcd 1.01") ;
		#endif 
		strncpy(Gold68_Venc_delmtd_rcd.sort_cage,spaces,20);
	        #if DEBUG
		  printf("\nrcd 1.1") ;
		#endif 
		strncpy(Gold68_Venc_delmtd_rcd.vendor_code,(char *) Gold68_Cat1_delmtd_rcd.manuf_cage,5);
	        #if DEBUG
		  printf("\nrcd 1.2") ;
		#endif 
		strncpy(Gold68_Venc_delmtd_rcd.lead_time,(char *) prdldtha.arr,prdldtha.len);
	        #if DEBUG
		  printf("\nrcd 1.3") ;
		#endif 
		Gold68_Venc_delmtd_rcd.vendor_flag='M';
		strncpy(Gold68_Venc_delmtd_rcd.seq,&seq[1],2);
	        #if DEBUG
		  printf("\nrcd 1.4") ;
		#endif 
		strncpy(Gold68_Venc_delmtd_rcd.sort_cage, (char *) Gold68_Venc_delmtd_rcd.vendor_code,20);
	        #if DEBUG
		  printf("\nrcd 2") ;
		#endif 

		strncpy((char *) gold_vendor_part.arr,(char *) Gold68_Cat1_delmtd_rcd.part,50);
		strcat((char *) gold_vendor_part.arr,'\0');
		gold_vendor_part.len=50;
		gold_vendor_code.len = sprintf(gold_vendor_code.arr,"%.5s%%",Gold68_Cat1_delmtd_rcd.manuf_cage);
		gold_vendor_flag=Gold68_Venc_delmtd_rcd.vendor_flag;
	        #if DEBUG
		  printf("gold_vendor_code.len=%d  gold_vendor_cod.arr=%s\n", gold_vendor_code.len, gold_vendor_code.arr);
		#endif 

		errcode=Z9999_write_gold_venc_rcds();
	}
	else
	{
	        #if DEBUG
		  printf("\nrcd 4") ;
		#endif 
    REC2REC(Gold68_Venc_api_rcd.part, Gold68_Cat1_api_rcd.part);
	        #if DEBUG
		  printf("\nrcd 5") ;
		#endif 
    REC2REC(Gold68_Venc_api_rcd.vendor_part,Gold68_Cat1_api_rcd.part);
	        #if DEBUG
		  printf("\nrcd 6") ;
		#endif 
    REC2REC(Gold68_Venc_api_rcd.vendor_code,Gold68_Cat1_api_rcd.manuf_cage);
	        #if DEBUG
		printf("\nrcd 7 Gold68_Cat1_api_rcd.part=%s", Gold68_Cat1_api_rcd.part) ;
		#endif 
		SETVCHAR(gold_vendor_part, Gold68_Cat1_api_rcd.part);
	        #if DEBUG
		  printf("\nrcd 8 gold_vendor_part.len=%d", gold_vendor_part.len) ;
		#endif 
		gold_vendor_code.len = sprintf(gold_vendor_code.arr,"%.5s%%",Gold68_Cat1_api_rcd.manuf_cage);
	        #if DEBUG
		  printf("\nrcd 9") ;
		#endif 
		memset(Gold68_Venc_api_rcd.sort_cage,' ',sizeof(Gold68_Venc_api_rcd.sort_cage));
	        #if DEBUG
		  printf("\nrcd 10") ;
		#endif 
	        strncpy(Gold68_Venc_api_rcd.vendor_flag,"M",1);
	        #if DEBUG
		  printf("\nrcd 11") ;
		#endif 
		memset(Gold68_Venc_api_rcd.sort_cage,' ',sizeof(Gold68_Venc_api_rcd.sort_cage));
	        #if DEBUG
		  printf("\nrcd 12") ;
		#endif 
    REC2REC(Gold68_Venc_api_rcd.sort_cage, Gold68_Venc_api_rcd.vendor_code);
	        #if DEBUG
		  printf("\nrcd 13") ;
		#endif 
	        gold_vendor_flag='M';

		update_cat1='Y';
	        #if DEBUG
		  printf("\nrcd 14") ;
		#endif 
	        strncpy(Gold68_Venc_api_rcd.lead_time,(char *) prdldtha.arr,prdldtha.len);

	        #if DEBUG
		  printf("\nrcd 15") ;
		#endif 

	       	errcode=Z9999_write_gold_venc_rcds();

		#if DEBUG
			printf("\nA5030_005_build_gold_mfg_venc");
			printf("\nGold Part (%s)",gold_vendor_part.arr);
			printf("\nGold Vendor_code (%s)",gold_vendor_code.arr);
			printf("\nGold Vendor Flag (%c)",gold_vendor_flag);
			printf("\nSLIC Lead Time (%s)",prdldtha.arr);
		#endif
	}

	        #if DEBUG
		  printf("\nA5030_005_build_gold_mfg_venc end");
		  printf("\nerrcode=%d", errcode) ;
		#endif 
	return(errcode);
}
/*

*/
int	A5030_010_build_gold_suplyr_venc()
{
	int	i=0;
        int	errcode=0;
	char	seq[4];

	#if DEBUG
		printf("\nA5030_010_build_gold_suplyr_venc");
	#endif

        venc_seq++;

	sprintf(seq,"%3.3d",venc_seq);
	#if DEBUG
		printf("\nSuplyr_max (%d)",suplyr_max);
		printf("\nFirst Suplyr_entry (%s)",suplyr_tble[0]);
	#endif
	if(suplyr_max>0)
	{
		for(i=0;i<=suplyr_max;i++)
		{
		        gold_vendor_code.len = sprintf(gold_vendor_code.arr,"%.5s%%",suplyr_tble[i]);
			gold_vendor_flag='V';

			if(delimited_file=='N')
			{
				strncpy(Gold68_Venc_api_rcd.lead_time,"     ",5);
				sprintf(seq,"%3.3d",venc_seq);
				strncpy(Gold68_Venc_api_rcd.vendor_code,(char *) suplyr_tble[i],5);
				strncpy(Gold68_Venc_api_rcd.sort_cage,spaces,20);
				strncpy(Gold68_Venc_api_rcd.sort_cage, (char *) Gold68_Venc_api_rcd.vendor_code,20);
				if(strncmp(Gold68_Venc_api_rcd.vendor_code,spaces,5)==0)
				{
				}
				else
				{
					strncpy(Gold68_Venc_api_rcd.vendor_flag,"V",1);
					update_cat1='Y';
					errcode=Z9999_write_gold_venc_rcds();
				}
			}
			else
			{
				sprintf(seq,"%3.3d",venc_seq);
				strncpy(Gold68_Venc_delmtd_rcd.seq,&seq[1],2);
				strncpy(Gold68_Venc_delmtd_rcd.sort_cage,spaces,20);
				strncpy(Gold68_Venc_delmtd_rcd.vendor_code,(char *) suplyr_tble[i],5);
				strncpy(Gold68_Venc_delmtd_rcd.sort_cage, (char *) Gold68_Venc_delmtd_rcd.vendor_code,20);
				if(strncmp(Gold68_Venc_delmtd_rcd.vendor_code,spaces,5)==0)
				{
				}
				else
				{
					Gold68_Venc_delmtd_rcd.vendor_flag='V';
					errcode=Z9999_write_gold_venc_rcds();
				}
			}
		}
	}
	else
	{
	}
	return(errcode);
}
/*

*/
int	A5030_020_build_gold_repair_venc()
{
	int	i=0;
        int	errcode=0;
	char	seq[4];

	#if DEBUG
		printf("\nA5030_020_build_gold_repair_venc");
	#endif

        venc_seq++;

	sprintf(seq,"%3.3d",venc_seq);

	#if DEBUG
		printf("\nRepr_agn_max (%d)",repr_agnt_max);
		printf("\nFirst repr_agnt_tble entry (%s)",repr_agnt_tble[0]);
	#endif

	if(strncmp(repr_agnt_tble[0],"      ",6) != 0)
	{
		for(i=0;i<=repr_agnt_max;i++)
		{
		        gold_vendor_code.len = sprintf(gold_vendor_code.arr,"%.6s%%",repr_agnt_tble[i]);
			gold_vendor_flag='R';

			if(delimited_file=='N')
			{
				strncpy(Gold68_Venc_api_rcd.lead_time,"     ",5);
				sprintf(seq,"%3.3d",venc_seq);
				strncpy(Gold68_Venc_api_rcd.vendor_code,(char *) repr_agnt_tble[i],6);
/*				strncpy(&Gold68_Venc_api_rcd.vendor_code[6],"-",1);
				strncpy(&Gold68_Venc_api_rcd.vendor_code[7],seq,3);  */
				strncpy(Gold68_Venc_api_rcd.sort_cage,spaces,20);
				strncpy(Gold68_Venc_api_rcd.sort_cage,Gold68_Venc_api_rcd.vendor_code,20);
				if(strncmp(Gold68_Venc_api_rcd.vendor_code,spaces,6)==0)
				{
				}
				else
				{
					strncpy(Gold68_Venc_api_rcd.vendor_flag,"R",1);
				}
				errcode=Z9999_write_gold_venc_rcds();
			}
			else
			{
				sprintf(seq,"%3.3d",venc_seq);
				strncpy(Gold68_Venc_delmtd_rcd.seq,&seq[1],2);
				strncpy(Gold68_Venc_delmtd_rcd.vendor_code,(char *) repr_agnt_tble[i],6);
/*				strncpy(&Gold68_Venc_delmtd_rcd.vendor_code[6],"-",1);
				strncpy(&Gold68_Venc_delmtd_rcd.vendor_code[7],seq,3);  */
				strncpy(Gold68_Venc_delmtd_rcd.sort_cage,spaces,20);
				strncpy(Gold68_Venc_delmtd_rcd.sort_cage,Gold68_Venc_delmtd_rcd.vendor_code,20);
				if(strncmp(Gold68_Venc_delmtd_rcd.vendor_code,spaces,6)==0)
				{
				}
				else
				{
					Gold68_Venc_delmtd_rcd.vendor_flag='R';
				}

				errcode=Z9999_write_gold_venc_rcds();
			}
		}
	}
	else
	{
	}

	return(errcode);
}
/*

*/
int     A5999_01_get_ha()
{
	int	i;
	int	errcode=0;
	char my_sql[3000];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nA5999_01_get_ha start");
	#endif

	A5999_01_initialize_rcds();

	#if DEBUG
		printf("\nPRIME (%s)\n",prime.arr);
		printf("PRIME CAGE (%s)\n",prime_cage.arr);
	#endif

	INITVCHAR(itnameha) ;
	INITVCHAR( unitisha) ;
	INITVCHAR( prdldtha) ;
	INITVCHAR( prdldtha_m) ;
	INITVCHAR( cognsnha) ;
	INITVCHAR( smmnsnha) ;
	INITVCHAR( fscnsnha) ;
	INITVCHAR( niinsnha) ;
	INITVCHAR( ansncog) ;
	INITVCHAR( ansnsmic) ;
	INITVCHAR( ansnfsc) ;
	INITVCHAR( ansnniin) ;
	INITVCHAR( nicncog) ;
	INITVCHAR( nicnsmic) ;
	INITVCHAR( nicnfsc) ;
	INITVCHAR( nicnniin) ;

	strcpy(my_sql,"select nvl(ha.itnameha,' '), ");
	strcat(my_sql,"nvl(ha.unitisha,' '), ");
	strcat(my_sql,"nvl(substr(to_char(ha.prdldtha*30,'00009'),2,5),00000), ");
	strcat(my_sql,"nvl(substr(to_char(ha.prdldtha,'00009'),2,5),00000), ");
	strcat(my_sql,"nvl(ha.physecha,' '), ");
	strcat(my_sql,"nvl(ha.cognsnha,'  '), ");

	if(strncmp((char *) processing_mdl.arr,"AV8B",4)!=0)
	{
		strcat(my_sql,"nvl(hax01.ansncog,'  '), ");
	}
	else
	{
		strcat(my_sql,"nvl(hax01.pnsncog,'  '), ");
	}
	if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{

		strcat(my_sql,"nvl(hax01.tnsncog,'  '), ");
	}
	else
	{
		strcat(my_sql,"nvl(hax01.nicncog,'  '), ");
	}
	strcat(my_sql,"nvl(ha.fscnsnha,'    '), ");
	strcat(my_sql,"nvl(ha.niinsnha,'         '), ");
	if(strncmp((char *) processing_mdl.arr,"AV8B",4)!=0)
	{
		strcat(my_sql,"nvl(hax01.ansnfsc,'    '), ");
		strcat(my_sql,"nvl(hax01.ansnniin,'         '), ");
	}
	else
	{
		strcat(my_sql,"nvl(hax01.pnsnfsc,'    '), ");
		strcat(my_sql,"nvl(hax01.pnsnniin,'         '), ");
	}
	if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{

		strcat(my_sql,"nvl(hax01.tnsnfsc,'    '), ");
		strcat(my_sql,"nvl(hax01.tnsnniin,'         '), ");
	}
	else
	{
		strcat(my_sql,"nvl(hax01.nicnfsc,'    '), ");
		strcat(my_sql,"nvl(hax01.nicnniin,'         '), ");
	}
	strcat(my_sql,"nvl(ha.pmicodha,' '), ");
	strcat(my_sql,"nvl(ha.demiliha,' '), ");
	strcat(my_sql,"nvl(ha.hazcodha,' '), ");
	strcat(my_sql,"nvl(ha.shlifeha,' '), ");
	strcat(my_sql,"nvl(ha.critcdha,' '), ");
	strcat(my_sql,"nvl(ha.smmnsnha,'  '), ");
	if(strncmp((char *) processing_mdl.arr,"AV8B",4)!=0)
	{
		strcat(my_sql,"nvl(hax01.ansnsmic,'  '), ");
	}
	else
	{
		strcat(my_sql,"nvl(hax01.pnsnsmic,'  '), ");
	}
	if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{

		strcat(my_sql,"nvl(hax01.tnsnsmic,'  '), ");
	}
	else
	{
		strcat(my_sql,"nvl(hax01.nicnsmic,'  '), ");
	}
	strcat(my_sql,"nvl(ha.aaplccha,' ') ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_ha ha, ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hax01 hax01 ");
	strcat(my_sql,"where ha.can_int = 0 ");
	strcat(my_sql,"and ha.refnumha = rpad('");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"',32) ");
	strcat(my_sql,"and ha.cagecdxh = '");
	strcat(my_sql,(char*) prime_cage.arr);
	strcat(my_sql,"' and ha.can_int = hax01.can_int (+) ");
	strcat(my_sql,"and ha.refnumha = hax01.refnumha (+) ");
	strcat(my_sql,"and ha.cagecdxh = hax01.cagecdxh (+) ");

	#if DEBUG
	  printf("\n\n*** A5999_01_get_ha*********************************************************************");
	  printf("\n*** dynamic sql = (%s) string length = (%d)",my_sql,strlen(my_sql));
	  printf("\n******************************************************************************\n\n");
	#endif

	EXEC SQL PREPARE T FROM :my_sql;
	EXEC SQL DECLARE D CURSOR FOR T;

	/* open the cursor */
	EXEC SQL OPEN D;

	if(sqlca.sqlcode == FND)
	{
		#if DEBUG
		  printf("\nFound: start fetch") ;
		#endif
		EXEC SQL FETCH D
	    	into :itnameha,
				 :unitisha,
				 :prdldtha,
				 :prdldtha_m,
				 :physecha,
				 :cognsnha,
				 :ansncog,
				 :nicncog,
				 :fscnsnha,
				 :niinsnha,
				 :ansnfsc,
				 :ansnniin,
				 :nicnfsc,
				 :nicnniin,
				 :pmicodha,
				 :demiliha,
				 :hazcodha,
				 :shlifeha,
				 :crititha,
				 :smmnsnha,
				 :ansnsmic,
				 :nicnsmic,
				 :aaplccha;
		#if DEBUG
		  printf("\nend fetch") ;
		#endif
	}
	else
	{
		if(sqlca.sqlcode != NOT_FND)
		{
		  #if DEBUG
		    printf("\nNot Found: start fetch") ;
	  	  #endif

			printf("\nDatabase error in A5999_01_get_ha\n");
			printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
			A999_02_dberr();
		}
	}

	#if DEBUG
		printf("\n\n*********ha query results************************************************************");
		printf("\n* itnameha = %s",(char*) itnameha.arr);
		printf("\n* unitisha = %s",(char*) unitisha.arr);
		printf("\n* prdldtha = %s",(char*) prdldtha.arr);
		printf("\n* prdldtha_m = %s",(char*) prdldtha_m.arr);
		printf("\n* physecha = %c",physecha);
		printf("\n* cognsnha = %s",(char*) cognsnha.arr);
		printf("\n* ansncog = %s",(char*) ansncog.arr);
		printf("\n* sqlcode = %d",sqlca.sqlcode);
		printf("\n**************************************");
	#endif

	if(sqlca.sqlcode == FND)
	{
		#if DEBUG
		  printf("\nmemcpy: start") ;
		#endif
		if (memcmp((char *) &itnameha.arr," ",1) == 0)
    		{
			memcpy((char *) &itnameha.arr,"TBD",3);
       			itnameha.len = 3;
    		}
		else
		{
			if (strncmp((char *) itnameha.arr,"                   ",19) == 0)
    			{
				strncpy((char *) itnameha.arr,"TBD",3);
       				itnameha.len = 3;
    			}
		}
		#if DEBUG
		  printf("\nmemcpy: end") ;
		#endif

		if (memcmp((char *) &unitisha.arr," ",1) == 0)
    		{
       			memcpy((char *) &unitisha.arr,"EA",2);
       			unitisha.len = 2;
    		}
		#if DEBUG
		  printf("\nmemcmp: end") ;
		#endif

		errcode=A5999_01a_setup_ha();
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{

		        #if DEBUG
			  printf("\nA5999_01_get_ha: Not Found");
			  printf("\nUnable to locate Part/Cage in HA Table ");
			  printf("\nrefnumha (%s)",(char *) prime.arr);
			  printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
			  printf("\nRecord Type (%s)",rcdtype);
		        #endif	

			ha_part_not_found='Y';
			errcode=sqlca.sqlcode;
		}
		else
		{
			printf("\nA5999_01_get_ha");
			printf("\nBad SQLCODE ");
			printf("\nrefnumha (%s)",(char *) prime.arr);
			printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
			printf("\nRecord Type (%s)",rcdtype);
			printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
			errcode=sqlca.sqlcode;
                        A999_02_dberr();
		}
	}

	#if DEBUG
	  printf("\nA5999_01_get_ha end: errcode=%d", errcode) ;
	#endif
	return(errcode);
}
/*

*/
int	A5999_01_initialize_rcds()
{
        int	errcode=0;
	#if DEBUG
		printf("\nA5999_01a_initialize_rcds");
	#endif

	Z9999_initialize_cat1();

	Z9999_initialize_cats();

	Z9999_initialize_venc();

	Z9999_initialize_whse();

	Z9999_initialize_prc1();

}
/*

*/
int     A5999_01a_setup_ha()
{
        int	errcode=0;

	#if DEBUG
		printf("\nA5999_01a_setup_ha");
	#endif

	strncpy(unit_issue,spaces,3);
	#if DEBUG
	  printf("unitisha.arr=%s\n",unitisha.arr);
	  printf("delimited_file=%c\n",delimited_file);
	#endif
	strncpy(unit_issue,unitisha.arr,unitisha.len);
	unit_issue[unitisha.len] = '\0' ;

	if(delimited_file=='N')
	{
		errcode=A5999_01a_non_delimited_setup_ha();
	}
	else
	{
		errcode=A5999_01a_delimited_setup_ha();
	}


	return(errcode);
}
/*

*/
int	A5999_01a_non_delimited_setup_ha()
{
        int	errcode=0;
        int	dlsc_check=0;
	int result = 0;
	int SE_check = 0;
	int found = 1;
	varchar temp_part[51];

	INITVCHAR(temp_part) ;
	INITVCHAR(sec_code)  ;

	#if DEBUG
		printf("\nA5999_01a_non_delimited_setup_ha#############################");
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
		printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
		printf("\ncat1 part pn (%50.50s) (%d) ",(char *) cat1_part.arr, strlen((char *) cat1_part.arr));
		printf("\ngold_cat1_prime (%s) (%d) ",(char *) gold_cat1_prime.arr, strlen((char *) gold_cat1_prime.arr));
		printf("\ngold_manuf_cage (%s) ",gold_manuf_cage.arr);
		printf("\ncreate_new_cat1 (%c) ",create_new_cat1);
		printf("\nprocessing_seq (%s) ",processing_seq);
	#endif

	if(create_new_cat1=='N')
	{
		if(strncmp((char *) prime.arr,(char *) gold_cat1_prime.arr,32)==0)
		{
			strncpy(Gold68_Cat1_api_rcd.prime,(char *) prime.arr,prime.len);
		}
		else
		{
			if(gold_rcd_exists=='Y')
			{
				strncpy(Gold68_Cat1_api_rcd.prime,(char *) gold_cat1_prime.arr,gold_cat1_prime.len);
			}
			else
			{
				strncpy(Gold68_Cat1_api_rcd.prime,(char *) prime.arr,prime.len);
			}
			update_cat1='Y';
			strncpy(Gold68_Cat1_api_rcd.prime,(char *) prime.arr,prime.len);
		}
		if(strncmp(rcdtype,"HG",2)==0)
		{
			strncpy(Gold68_Cat1_api_rcd.part,(char *) prime.arr,prime.len);
			strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) prime_cage.arr,prime_cage.len);
		}
		else
		{
			if(strncmp((char *) prime.arr,(char *) part.arr,32) == 0)
				strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) prime_cage.arr,prime_cage.len);
			else
				strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) manufac_cage.arr,manufac_cage.len);

			strncpy(Gold68_Cat1_api_rcd.part,(char *) part.arr,part.len);
		}

		if(strncmp(rcdtype,"HB",2)==0)
		{
			if(strncmp((char *) prime.arr,(char *) part.arr,32) != 0)
			{
				if(strncmp((char *) gold_manuf_cage.arr,Gold68_Cat1_api_rcd.manuf_cage,5)!=0)
				{
					#if DEBUG
						printf("\n$$#$$####################################################");
						printf("\nHB Cage Code Change");
						printf("\nprime pn (%50.50s) ",prime.arr);
						printf("\npart pn (%50.50s) ",part.arr);
						printf("\nSLIC Cage (%5.5s) ",prime_cage.arr);
						printf("\nSLIC Manuf Cage (%5.5s) ",manufac_cage.arr);
						printf("\nGOLD Manuf Cage (%5.5s) ",gold_manuf_cage.arr);
						printf("\nUpdate CAT1 (%c)",update_cat1);
					#endif
					update_cat1='Y';
					strncpy(Gold68_Cat1_api_rcd.part,(char *) part.arr,part.len);
					strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) manufac_cage.arr,5);
				}
				else
				{
				}
			}
			else
			{
			}
		}
		else
		{
			if(strncmp((char *) gold_manuf_cage.arr,Gold68_Cat1_api_rcd.manuf_cage,5)!=0);
			{
				#if DEBUG
					printf("\n$$#$$####################################################");
					printf("\nNon-HB Cage Code Change");
					printf("\nprime pn (%50.50s) ",prime.arr);
					printf("\npart pn (%50.50s) ",part.arr);
					printf("\nSLIC Cage (%5.5s) ",prime_cage.arr);
					printf("\nSLIC Manuf Cage (%5.5s) ",manufac_cage.arr);
					printf("\nGOLD Manuf Cage (%5.5s) ",gold_manuf_cage.arr);
					printf("\nUpdate CAT1 (%c)",update_cat1);
				#endif
				update_cat1='Y';
				strncpy(Gold68_Cat1_api_rcd.part,(char *) part.arr,part.len);
				strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) manufac_cage.arr,5);
			}
		}
	}
	else
	{
			strncpy(Gold68_Cat1_api_rcd.prime,(char *) prime.arr,prime.len);
			strncpy(Gold68_Cat1_api_rcd.part,(char *) part.arr,part.len);
			#if DEBUG
				printf("\n$$#$$####################################################");
				printf("\nCompare Part and Prime");
				printf("\nNo Cage Code Change");
				printf("\nprime pn (%50.50s) ",prime.arr);
				printf("\npart pn (%50.50s) ",part.arr);
			#endif
			if(strncmp((char *) prime.arr,(char *) part.arr,32) == 0)
			{
				if(strncmp((char *) gold_manuf_cage.arr,(char *) prime_cage.arr,prime_cage.len)!=0);
				{
					#if DEBUG
						printf("\n$$#$$####################################################");
						printf("\nNo Cage Code Change");
						printf("\nprime pn (%50.50s) ",prime.arr);
						printf("\npart pn (%50.50s) ",part.arr);
						printf("\nSLIC Cage (%5.5s) ",prime_cage.arr);
						printf("\nSLIC Manuf Cage (%5.5s) ",manufac_cage.arr);
						printf("\nGOLD Manuf Cage (%5.5s) ",gold_manuf_cage.arr);
						printf("\nUpdate CAT1 (%c)",update_cat1);
					#endif
					update_cat1='Y';
					strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) manufac_cage.arr,5);
				}
				#if DEBUG
					printf("\n$$#$$####################################################");
					printf("\nCage Code Change");
					printf("\nprime pn (%50.50s) ",prime.arr);
					printf("\npart pn (%50.50s) ",part.arr);
					printf("\nSLIC Cage (%5.5s) ",prime_cage.arr);
					printf("\nGold Manuf Cage (%5.5s) ",gold_manuf_cage.arr);
					printf("\nUpdate CAT1 (%c)",update_cat1);
				#endif
				strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) manufac_cage.arr,5);
			}
			else
				strncpy(Gold68_Cat1_api_rcd.manuf_cage,(char *) manufac_cage.arr,manufac_cage.len);
	}

	#if DEBUG
		printf("\nCat1 prime pn (%50.50s) ",Gold68_Cat1_api_rcd.prime);
		printf("\nCat1 part pn (%50.50s) ",Gold68_Cat1_api_rcd.part);
		printf("\nCat1 Manuf Cage (%5.5s) ",Gold68_Cat1_api_rcd.manuf_cage);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif

	dlsc_check=A5999_01b_check_dlsc_info();

	#if DEBUG
		printf("\nerrcode (%d) ",errcode);
	#endif

	if(nsn_updated=='Y')
	{
    RECFLDSET(Gold68_Cat1_api_rcd.nsn,setup_nsn);
		if(Gold68_Cat1_api_rcd.nsn[0]==' ')
		{
			strncpy(Gold68_Cat1_api_rcd.nsn,"NSL             ",16);
			Gold68_Cat1_api_rcd.nsn[16] = '\0';
		}
	}

	if(smic_updated=='Y')
	{
	  RECFLDSET(Gold68_Cat1_api_rcd.nsn_smic,setup_smic);
		assert(strlen(setup_nsn) <= sizeof(Gold68_Cat1_api_rcd.nsn));
		RECFLDSET(Gold68_Cat1_api_rcd.nsn,setup_nsn) ;
	}

	if(cog_updated=='Y')
	{
	  RECFLDSET(Gold68_Cat1_api_rcd.cognizance_code,setup_cog);
	}
	#if DEBUG

		printf("\nUpdate CAT1 (%c)",update_cat1);
		printf("\nActy Rcd (%16.16s)",Gold68_Cat1_api_rcd.nsn);
		printf("\nActy Rcd SMIC (%2.2s)",Gold68_Cat1_api_rcd.nsn_smic);
		printf("\nActy Rcd COG (%2.2s)",Gold68_Cat1_api_rcd.cognizance_code);
	#endif

	if(create_new_cat1=='Y')
	{
	        RECFLDSET(Gold68_Cat1_api_rcd.um_show_code,unit_issue);
		RECFLDSET(Gold68_Cat1_api_rcd.um_cap_code,unit_issue);
		RECFLDSET(Gold68_Cat1_api_rcd.um_mil_code,unit_issue);
		strncpy(Gold68_Cat1_api_rcd.um_issue_show_count,"0001",4);
		strncpy(Gold68_Cat1_api_rcd.um_issue_code_count,"0001",4);
		strncpy(Gold68_Cat1_api_rcd.um_issue_factor,"0001",4);
		strncpy(Gold68_Cat1_api_rcd.um_cap_show_count,"0001",4);
		strncpy(Gold68_Cat1_api_rcd.um_cap_code_count,"0001",4);
		strncpy(Gold68_Cat1_api_rcd.um_cap_factor,"0001",4);
		strncpy(Gold68_Cat1_api_rcd.um_mil_show_count,"0001",4);
		strncpy(Gold68_Cat1_api_rcd.um_mil_factor,"0001",4);
		Gold68_Cat1_api_rcd.asset_req_on_recipt='N';
		Gold68_Cat1_api_rcd.part_make_b='F';
		Gold68_Cat1_api_rcd.part_buy_b='F';
		Gold68_Cat1_api_rcd.hazardous_material_code[0]='F';
		Gold68_Cat1_api_rcd.lot_batch_mandatory_b='F';
		Gold68_Cat1_api_rcd.serial_mandatory_b='F';
		Gold68_Cat1_api_rcd.mils_auto_process_b='T';
		Gold68_Cat1_api_rcd.agency_peculiar_b='F';
		Gold68_Cat1_api_rcd.order_cap_b='T';
		Gold68_Cat1_api_rcd.delete_when_gone='T';
		if(strncmp(Gold68_Cat1_api_rcd.nsn,"NSL",3)==0)
		{
			Gold68_Cat1_api_rcd.order_gfp_b='F';
		}
		else
		{
			Gold68_Cat1_api_rcd.order_gfp_b='T';
		}
	}
	else
	{
		Gold68_Cat1_api_rcd.order_cap_b=gold_order_cap_b;
		Gold68_Cat1_api_rcd.order_gfp_b=gold_order_gfp_b;
		Gold68_Cat1_api_rcd.delete_when_gone=gold_delete_when_gone;
		Gold68_Cat1_api_rcd.tracked_b=gold_tracked_b;
		Gold68_Cat1_api_rcd.part_make_b=gold_part_make_b;
		Gold68_Cat1_api_rcd.part_buy_b=gold_part_buy_b;
		Gold68_Cat1_api_rcd.hazardous_material_b=gold_hazardous_material_b;
		Gold68_Cat1_api_rcd.lot_batch_mandatory_b=gold_lot_batch_mandatory_b;
		Gold68_Cat1_api_rcd.serial_mandatory_b=gold_serial_mandatory_b;
		Gold68_Cat1_api_rcd.agency_peculiar_b=gold_agency_peculiar_b;
		Gold68_Cat1_api_rcd.mils_auto_process_b=gold_mils_auto_process_b;
	}

	#if DEBUG
		printf("\nGold Unit Issue (%s)",gold_um_issue_code.arr);
		printf("\nGold Show Issue (%s)",gold_um_show_code.arr);
		printf("\nSLIC Unit Issue  (%s)",unit_issue);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif

	if(create_new_cat1=='Y')
	{
	  RECFLDSET(Gold68_Cat1_api_rcd.um_issue_code,unit_issue);
	}
	else
	{
		if(strncmp(unit_issue,(char *)gold_um_issue_code.arr,gold_um_issue_code.len)==0)
		{
		  memset(Gold68_Cat1_api_rcd.um_issue_code,' ',sizeof(Gold68_Cat1_api_rcd.um_issue_code));
		}
		else
		{
			update_cat1='Y';
			RECFLDSET(Gold68_Cat1_api_rcd.um_issue_code,unit_issue);
		}
		#if DEBUG
			printf("\nGold Show Issue (%s)",gold_um_show_code.arr);
			printf("\nGold MIL Count (%s)",gold_um_mil_show_count.arr);
			printf("\nGold MIL Factor (%s)",gold_um_mil_factor.arr);
		#endif
		if(gold_um_show_code.len > 0)
		{
		        assert(gold_um_show_code.len <= sizeof(Gold68_Cat1_api_rcd.um_mil_code) ) ;
			strncpy(Gold68_Cat1_api_rcd.um_mil_code,gold_um_show_code.arr,gold_um_show_code.len);
			assert(gold_um_mil_show_count.len <= sizeof(Gold68_Cat1_api_rcd.um_mil_show_count) ) ;
			strncpy((char *) Gold68_Cat1_api_rcd.um_mil_show_count,(char *) gold_um_mil_show_count.arr,gold_um_mil_show_count.len);
			assert(gold_um_mil_factor.len <= sizeof(Gold68_Cat1_api_rcd.um_mil_factor) ) ;
			strncpy((char *) Gold68_Cat1_api_rcd.um_mil_factor,(char *) gold_um_mil_factor.arr,gold_um_mil_factor.len);
/*			strncpy((char *) Gold68_Cat1_api_rcd.um_mil_show_count,"0001",4);
			strncpy((char *) Gold68_Cat1_api_rcd.um_mil_factor,"0001",4);  */
		}
		else
		{
		        RECFLDSET(Gold68_Cat1_api_rcd.um_mil_code,unit_issue);
			strncpy((char *) Gold68_Cat1_api_rcd.um_mil_show_count,"0001",4);
			strncpy((char *) Gold68_Cat1_api_rcd.um_mil_factor,"0001",4);
		}
	}

	#if DEBUG
		printf("\nGold Lead Time (%s)",gold_ave_cap_lead_time.arr);
		printf("\nSLIC Lead Time (%s)",prdldtha.arr);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif


	if(create_new_cat1=='Y')
	{
	  RECFLDSET(Gold68_Cat1_api_rcd.ave_cap_lead_time,prdldtha.arr);
	}
	else
	{
		#if DEBUG
			printf("\nGold Lead Time (%s)",gold_ave_cap_lead_time.arr);
			printf("\nSLIC Lead Time (%s)",prdldtha.arr);
			printf("\nUpdate CAT1 (%c)",update_cat1);
		#endif
		if(strncmp((char *) gold_ave_cap_lead_time.arr,"00000",5)==00)
		{
			update_cat1='Y';
			RECFLDSET(Gold68_Cat1_api_rcd.ave_cap_lead_time,prdldtha.arr);
		}
	}
	#if DEBUG
		printf("\n\n*****************************************************************************");
		printf("\n***  Updates for leadtime");
		printf("\n***  Gold Lead Time (%s)",gold_ave_cap_lead_time.arr);
		printf("\n***  SLIC Lead Time (%s)",prdldtha.arr);
		printf("\n***  Update CAT1 (%c)",update_cat1);
		printf("\n*******************************************************************************\n\n");
		printf("\nGold Noun (%s)",gold_noun.arr);
		printf("\nSLIC Noun (%s)",itnameha.arr);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif
	if(create_new_cat1=='Y')
	{
	  RECFLDSET(Gold68_Cat1_api_rcd.noun,itnameha.arr);
	}
	else
	{
		if(strncmp((char *) itnameha.arr,(char *) gold_noun.arr,19)==0)
		{
			strncpy(Gold68_Cat1_api_rcd.noun,spaces,40);
		}
		else
		{
		        memset(Gold68_Cat1_api_rcd.noun,' ',sizeof(Gold68_Cat1_api_rcd.noun));
			RECFLDSET(Gold68_Cat1_api_rcd.noun,itnameha.arr);
			update_cat1='Y';
		}
	}

	#if DEBUG
		printf("\nGold Security Code (%c)",gold_security_code);
		printf("\nSLIC Security Code (%c)",physecha);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif
	if(create_new_cat1=='Y')
	{
		if(physecha==' ' || physecha=='0')
		{
			Gold68_Cat1_api_rcd.security_code=' ';
		}
		else
		{
			Gold68_Cat1_api_rcd.security_code=physecha;
		}
	}
	else
	{
		if(gold_security_code==physecha)
		{
			Gold68_Cat1_api_rcd.security_code=' ';
		}
		else
		{
			update_cat1='Y';
			Gold68_Cat1_api_rcd.security_code=physecha;
		}
	}

	#if DEBUG
		printf("\nGold PMI Code (%s)",gold_pmi_code.arr);
		printf("\nSLIC PMI Code (%c)",pmicodha);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif
	if(create_new_cat1=='Y')
	{
		Gold68_Cat1_api_rcd.pmi_code[0]=pmicodha;
	}
	else
	{
		if(gold_pmi_code.arr[0] == pmicodha)
		{
			Gold68_Cat1_api_rcd.pmi_code[0]=' ';
		}
		else
		{
			update_cat1='Y';
			Gold68_Cat1_api_rcd.pmi_code[0]=pmicodha;
		}
	}

	#if DEBUG
		printf("\nProcessing Create of CATS ****************************");
		printf("\nPart (%s)",part.arr);
		printf("\nGold Haz Code (%s)",gold_hazardous_material_code.arr);
		printf("\nSLIC Haz Code (%c)",hazcodha);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif

	if(create_new_cat1=='Y')
	{
		if(hazcodha == 'D')
		{
			Gold68_Cat1_api_rcd.hazardous_material_code[0]='Y';
			Gold68_Cat1_api_rcd.hazardous_material_b = 'T';
			strncpy(Gold68_Cats_api_rcd.security_code,"Y",1);
			update_create_delete_cats = 'C';
		}
	}
	else
	{
		process_cats='N';
		EXEC SQL DECLARE cats_csr CURSOR FOR
			SELECT part,security_code
			FROM cats
			WHERE part = rtrim(:part)
			  and security_code in ('Y','YY');

		EXEC SQL OPEN cats_csr;
		result = sqlca.sqlcode;

		#if DEBUG
			printf("\nProcessing Create of CATS - Declare Cursor");
			printf("\nTemp Part (%s)",temp_part.arr);
			printf("\nSec Code (%s)",sec_code.arr);
			printf("\nSQL Result (%d)",result);
		#endif
		if(result == FND || result == MULTI_ROWS)
		{
			while(found)
			{
				EXEC SQL FETCH cats_csr INTO
					:temp_part,:sec_code;
				result = sqlca.sqlcode;

				#if DEBUG
					printf("\nProcessing Create of CATS - Processing Fetch");
					printf("\nTemp Part (%s)",temp_part.arr);
					printf("\nSec Code (%s)",sec_code.arr);
					printf("\nSQL Result (%d)",result);
					printf("\nSLIC Haz Code (%c)",hazcodha);
				#endif

				if(result == FND)
				{
					process_cats='Y';
					if(gold_hazardous_material_code.arr[0] == 'Y' && hazcodha == 'D')
					{
						#if DEBUG
							printf("\n*****Processing Create of CATS - gold haz y and slic hazcod d");
							printf(" No Processing being done");
						#endif
					}
					else
					{
						if(hazcodha == 'D')
						{
							Gold68_Cat1_api_rcd.hazardous_material_code[0] = 'Y';
							Gold68_Cat1_api_rcd.hazardous_material_b = 'T';
							strncpy(Gold68_Cats_api_rcd.security_code,(char *) sec_code.arr,1);
							update_create_delete_cats = 'C';
							update_cat1='Y';
							#if DEBUG
								printf("\n*****Processing Create of CATS - goldd haz ne y and slic hazcod d");
								printf("\nupdate_create_delete_cats (%c)",update_create_delete_cats);
								printf("\nupdate_cat1 (%c)",update_cat1);
							#endif
						}
						else if(hazcodha == ' ' || hazcodha == 'N')
						{
							#if DEBUG
								printf("\n*****Processing Create of CATS - golddhaz blank and slic hazcod n");
							#endif
							if(strncmp((char *) sec_code.arr,"Y",1) != 0)
							{
								Gold68_Cat1_api_rcd.hazardous_material_code[0] = ' ';
								Gold68_Cat1_api_rcd.hazardous_material_b = 'F';
								strncpy(Gold68_Cats_api_rcd.security_code,(char *) sec_code.arr,1);
								update_create_delete_cats = 'D';
								update_cat1='Y';
								#if DEBUG
									printf("\n*****Processing Create of CATS - goldd haz ne y and slic hazcod d");
									printf("\nupdate_create_delete_cats (%c)",update_create_delete_cats);
									printf("\nupdate_cat1 (%c)",update_cat1);
								#endif
								/*
								if(gold_hazardous_material_code.arr[0] == 'Y' || gold_hazardous_material_code.arr[0] == ' ')
								{
									Gold68_Cat1_api_rcd.hazardous_material_b = 'F';
									update_create_delete_cats = 'D';
								}
								*/
							}
						}
					}
				}
				else
				{
					#if DEBUG
						printf("\n*****Processing Create of CATS - record not found in gold");
						printf("\nGold Haz Code (%s)",gold_hazardous_material_code.arr);
						printf("\nSLIC Haz Code (%c)",hazcodha);
					#endif
					found = 0;
					if(result == NOT_FND)
					{
						if(process_cats == 'Y')
						{
						}
						else
						{
							if(hazcodha == 'D')
							{
								Gold68_Cat1_api_rcd.hazardous_material_code[0]='Y';
								Gold68_Cat1_api_rcd.hazardous_material_b = 'T';
								strncpy(Gold68_Cats_api_rcd.security_code,"Y",1);
								update_create_delete_cats = 'C';
								update_cat1='Y';
							}
							else
							{
								Gold68_Cat1_api_rcd.hazardous_material_code[0] = ' ';
								Gold68_Cat1_api_rcd.hazardous_material_b = 'F';
							}
						}
					}
					else
						db_err("cats query");
				}
			}
		}
	}

	#if DEBUG
		printf("\nSLIC Shelf Life (%c)",shlifeha);
	#endif
	if(shlifeha != '0')
	{
		if(shlifeha != ' ')
		{
			write_shelf_life = 'Y';
		}
		else
		{
			write_shelf_life = 'N';
		}
	}
	else
	{
		write_shelf_life = 'N';
	}

	if(create_new_cat1=='Y')
	{
		Gold68_Cat1_api_rcd.demilitarization_code[0]=demiliha;
	}
	else
	{
		if(gold_demilitarization_code.arr[0] == demiliha)
		{
			Gold68_Cat1_api_rcd.demilitarization_code[0]=' ';
		}
		else
		{
			update_cat1='Y';
			Gold68_Cat1_api_rcd.demilitarization_code[0]=demiliha;
		}
	}

	#if DEBUG
		printf("\nIMS DESIGNATOR CODE (%s)",gold_ims_designator_code.arr);
	#endif

	strncpy(Gold68_Cat1_api_rcd.ims_designator_code,"      ",6);
	strncpy(Gold68_Cat1_api_rcd.cat1_profile,"STL",3);

	/*
	if(create_new_cat1=='Y')
	{
		if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
		{
			strncpy(Gold68_Cat1_api_rcd.ims_designator_code,"      ",6);
			strncpy(Gold68_Whse_api_rcd.ims_designator_code,"F18ZZZ",6);
		}
		else
		{
			if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
			{
				strncpy(Gold68_Cat1_api_rcd.ims_designator_code,"      ",6);
				strncpy(Gold68_Whse_api_rcd.ims_designator_code,"AV8ZZZ",6);
			}
			else
			{
				if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
				{
					strncpy(Gold68_Cat1_api_rcd.ims_designator_code,"      ",6);
					strncpy(Gold68_Whse_api_rcd.ims_designator_code,"F15###",6);
				}
			}
		}
	}
	else
	{
	}
	*/

	#if DEBUG
		printf("\nGold Critical Item (%s)",gold_critical_item_code.arr);
		printf("\nSLIC Critical Item (%c)",crititha);
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif

	if(create_new_cat1=='Y')
	{
		Gold68_Cat1_api_rcd.critical_item_code[0]=crititha;
	}
	else
	{
/*		if(gold_critical_item_code.arr[0]==crititha)
		{
			Gold68_Cat1_api_rcd.critical_item_code[0]=' ';
		}
		else
		{
			update_cat1='Y';
			Gold68_Cat1_api_rcd.critical_item_code[0]=crititha;
		}
this block of code commented out due to lack of critical item code information in slic
Larry Mills
*/
		Gold68_Cat1_api_rcd.critical_item_code[0]=' ';
	}

	SE_check = Z9996_check_SE_item();

	#if DEBUG
		printf("\nSetup SE Item");
		printf("\nSE_check =  (%d)",SE_check);
		printf("\ngold_category_instrument code = (%s)",gold_cat_inst_code);
	#endif
	if(SE_check == 0)
	{
		strncpy(Gold68_Cat1_api_rcd.category_instrument,"SE",2);
		if(create_new_cat1 != 'Y' && strncmp(gold_cat_inst_code,"SE",2)!=0)
		{
			update_cat1 = 'Y';
		}
	}
	else
	{
		if(SE_check==1)
		{
			strncpy(Gold68_Cat1_api_rcd.category_instrument,"  ",2);
			if(create_new_cat1 != 'Y' && strncmp(gold_cat_inst_code,"SE",2)==0)
			{
				update_cat1 = 'Y';
				strncpy(Gold68_Cat1_api_rcd.category_instrument,"~",1);
			}
		}
		else
		{
			printf("\nA5999_01a_non_delimited_setup_ha");
			printf("\nCheck SE item bad sqlcode");
			printf("\nsql code = %d",sqlca.sqlcode);
			A999_02_dberr();
			errcode=SE_check;
		}
	}


	#if DEBUG
		printf("\nEnd of API Update Function");
		printf("\nUpdate CAT1 (%c)",update_cat1);
	#endif
	return(errcode);
}
/*

*/
int	A5999_01a_delimited_setup_ha()
{
        int	errcode=0;
        int	dlsc_check=0;

	#if DEBUG
		printf("\nA5999_01a_delimited_setup_ha");
		printf("\ncreate_new_cat1 = %s",&create_new_cat1);
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\npart pn (%s) (%d) ",(char *) part.arr, strlen((char *) part.arr));
		printf("\nmanufac cage (%s) (%d) ",(char *) manufac_cage.arr,strlen((char *) manufac_cage.arr));
		printf("\ncat1 part pn (%s) (%d) ",(char *) cat1_part.arr, strlen((char *) cat1_part.arr));
		printf("\nprocessing_seq (%s)",processing_seq);
	#endif

	if(create_new_cat1=='N')
	{
		if(strncmp((char *) prime.arr,(char *) gold_cat1_prime.arr,32)==0)
		{
			strncpy(Gold68_Cat1_delmtd_rcd.prime,(char *) prime.arr,prime.len);
		}
		else
		{
			if(gold_rcd_exists=='Y')
			{
				strncpy(Gold68_Cat1_delmtd_rcd.prime,(char *) gold_cat1_prime.arr,gold_cat1_prime.len);
			}
			else
			{
				strncpy(Gold68_Cat1_delmtd_rcd.prime,(char *) prime.arr,prime.len);
			}
		}
	}
	else
	{
		strncpy(Gold68_Cat1_delmtd_rcd.prime,(char *) prime.arr,prime.len);
	}

	if(strncmp(rcdtype,"HG",2)==0)
	{
		strncpy(Gold68_Cat1_delmtd_rcd.part,(char *) prime.arr,prime.len);
		strncpy(Gold68_Cat1_delmtd_rcd.manuf_cage,(char *) prime_cage.arr,prime_cage.len);
	}
	else
	{
		strncpy(Gold68_Cat1_delmtd_rcd.part,(char *) part.arr,part.len);
		strncpy(Gold68_Cat1_delmtd_rcd.manuf_cage,(char *) manufac_cage.arr,manufac_cage.len);
	}

	dlsc_check=A5999_01b_check_dlsc_info();

	if(nsn_updated=='Y')
	{
	        assert(strlen(setup_nsn) <= sizeof(Gold68_Cat1_delmtd_rcd.nsn)) ;
	        strncpy(Gold68_Cat1_delmtd_rcd.nsn,setup_nsn,sizeof(Gold68_Cat1_delmtd_rcd.nsn));
		if(Gold68_Cat1_delmtd_rcd.nsn[0]==' ')
		{
			strncpy(Gold68_Cat1_delmtd_rcd.nsn,"NSL",3);
		}
	}

	if(smic_updated=='Y')
	{
		strncpy(Gold68_Cat1_delmtd_rcd.nsn_smic,(char *) setup_smic,2);
	}

	if(create_new_cat1=='Y')
	{
		strncpy(Gold68_Cat1_delmtd_rcd.um_show_code,unit_issue,3);
		strncpy(Gold68_Cat1_delmtd_rcd.um_issue_code,unit_issue,3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_issue_show_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_issue_code_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_issue_factor,"0001",4);
		strncpy(Gold68_Cat1_delmtd_rcd.um_turn_code,unit_issue,3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_turn_show_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_turn_code_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_turn_factor,"0001",1);
		strncpy(Gold68_Cat1_delmtd_rcd.um_disp_code,unit_issue,3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_disp_show_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_disp_code_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_disp_factor,"0001",4);
		strncpy(Gold68_Cat1_delmtd_rcd.um_cap_code,unit_issue,3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_cap_show_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_cap_code_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_cap_factor,"0001",4);
		strncpy(Gold68_Cat1_delmtd_rcd.um_mil_code,unit_issue,3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_mil_show_count,"0001",4);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_mil_factor,"0001",4);
		Gold68_Cat1_delmtd_rcd.asset_req_on_recipt='N';
		Gold68_Cat1_delmtd_rcd.part_make_b='F';
		Gold68_Cat1_delmtd_rcd.part_buy_b='F';
		Gold68_Cat1_delmtd_rcd.hazardous_material_code[0]='F';
		Gold68_Cat1_delmtd_rcd.lot_batch_mandatory_b='F';
		Gold68_Cat1_delmtd_rcd.serial_mandatory_b='F';
		Gold68_Cat1_delmtd_rcd.mils_auto_process_b='T';
		Gold68_Cat1_delmtd_rcd.core_exc_req_b='F';
		Gold68_Cat1_delmtd_rcd.agency_peculiar_b='F';
		Gold68_Cat1_delmtd_rcd.order_cap_b='T';
		if(strncmp(Gold68_Cat1_delmtd_rcd.nsn,"NSL",3)==0)
		{
			Gold68_Cat1_delmtd_rcd.order_gfp_b='F';
		}
		else
		{
			Gold68_Cat1_delmtd_rcd.order_gfp_b='T';
		}
		Gold68_Cat1_delmtd_rcd.delete_when_gone='T';
		Gold68_Cat1_delmtd_rcd.record_changed1_yn='Y';
		Gold68_Cat1_delmtd_rcd.record_changed2_yn='Y';
		Gold68_Cat1_delmtd_rcd.record_changed3_yn='Y';
		Gold68_Cat1_delmtd_rcd.record_changed4_yn='Y';
		Gold68_Cat1_delmtd_rcd.record_changed5_yn='Y';
		Gold68_Cat1_delmtd_rcd.record_changed6_yn='Y';
		Gold68_Cat1_delmtd_rcd.record_changed7_yn='Y';
		Gold68_Cat1_delmtd_rcd.record_changed8_yn='Y';
	}

	if(create_new_cat1=='Y')
	{
		strncpy(Gold68_Cat1_delmtd_rcd.ave_cap_lead_time,(char *) &prdldtha.arr,5);
	}

	if(create_new_cat1=='Y')
	{
		strncpy(Gold68_Cat1_delmtd_rcd.noun,(char *) itnameha.arr,itnameha.len);
	}

	if(create_new_cat1=='Y')
	{
		if(physecha==' ')
		{
			Gold68_Cat1_delmtd_rcd.security_code=' ';
		}
		else
		{
			Gold68_Cat1_delmtd_rcd.security_code=physecha;
		}
	}

	if(create_new_cat1=='Y')
	{
		Gold68_Cat1_delmtd_rcd.pmi_code[0]=pmicodha;
	}

	if(create_new_cat1=='Y')
	{
		Gold68_Cat1_delmtd_rcd.demilitarization_code[0]=demiliha;
	}

	strncpy(Gold68_Cat1_delmtd_rcd.cat1_profile,"STL",3);
	strncpy(Gold68_Cat1_delmtd_rcd.ims_designator_code,"F18BZZ",6);

	if(create_new_cat1=='Y')
	{
		Gold68_Cat1_delmtd_rcd.critical_item_code[0]=crititha;
	}

	return(errcode);
}
/*

*/
int	A5999_01b_check_dlsc_info()
{
	int	errcode='N';

	#if DEBUG
		printf("\nA5999_01b_check_dlsc_info");
	#endif

	nsn_updated='N';
	smic_updated='N';
	cog_updated='N';

	if(strncmp(rcdtype,"HB",2)==0)
	{
		errcode=A5999_01e_get_hb_nsn();
		if(errcode==FND || errcode==NOT_FND)
		{
		}
		else
		{
			printf("\nTermination of Program in A5999_01b_check_dlsc_info");
			printf("\nPart (%s)",part.arr);
			printf("\nPart Cage (%s)",manufac_cage.arr);
			printf("\nPrime (%s)",prime.arr);
			printf("\nPrime Cage (%s)",prime_cage.arr);
			exit(errcode);
		}

	}

	errcode=A5999_01b_01_setup_nsn();

	errcode=A5999_01c_01_setup_smic();

	errcode=A5999_01d_01_setup_cog();

	return(errcode);
}

int	A5999_01b_01_setup_nsn()
{
	int	errcode='0';

	#if DEBUG
		printf("\nA5999_01b_setup_nsn");
		printf("\nSLIC HA NIIN (%s)",niinsnha.arr);
		printf("\nSLIC HA FSC  (%s)",fscnsnha.arr);
		printf("\nSLIC HAX NIIN (%s)",ansnniin.arr);
		printf("\nSLIC HAX FSC  (%s)",ansnfsc.arr);
		printf("\nSLIC HAX NICN (%s)",nicnniin.arr);
		printf("\nSLIC HAX FSC  (%s)",nicnfsc.arr);
		printf("\nSLIC HBX FSC  (%s)",adfsc.arr);
		printf("\nSLIC HBX NIIN (%s)",adniin.arr);
	#endif

	memset(hold_nsn_type,' ',sizeof(hold_nsn_type));
	memset(hold_nsn,' ',sizeof(hold_nsn));
	memset(setup_nsn,' ',sizeof(setup_nsn));
	memset(hold_nin,' ',sizeof(hold_nin));
	STRINIT(hold_fsc) ;

	if(strncmp(rcdtype,"HB",2)==0)
	{
		if(strncmp((char *) adniin.arr,"         ",9)!=0)
		{

			strcpy(hold_nsn_type,"HBXNSN");
			strncpy(hold_nsn,(char *) adniin.arr,9);
			STRSET(hold_fsc,adfsc.arr);
			errcode=A5999_01b_01a_check_nsn();
		}
	}

	if((strncmp((char *) niinsnha.arr,"         ",9)!=0) && (nsn_updated=='N'))
	{

		strncpy(hold_nsn_type,"HANSN ",6);
		hold_nsn_type[6]='\0';
		strncpy(hold_nsn,(char *) niinsnha.arr,9);
		STRSET(hold_fsc,fscnsnha.arr);
		errcode=A5999_01b_01a_check_nsn();
	}
	if((strncmp((char *) ansnniin.arr,"         ",9)!=0) && (nsn_updated=='N'))
	{
		strncpy(hold_nsn_type,"HAXNSN",6);
		strncpy(hold_nsn,(char *) ansnniin.arr,9);
		STRSET(hold_fsc,ansnfsc.arr);
		hold_nsn_type[6]='\0';
		errcode=A5999_01b_01a_check_nsn();
	}
	if((strncmp((char *) nicnniin.arr,"         ",9)!=0) && (nsn_updated=='N'))
	{
		strncpy(hold_nsn_type,"HAXNIC",6);
		hold_nsn_type[6]='\0';
		strncpy(hold_nsn,(char *) nicnniin.arr,9);
		STRSET(hold_fsc,nicnfsc.arr);
		errcode=A5999_01b_01a_check_nsn();
	}
	if((strncmp(hold_nsn,"                ",16)==0) && (nsn_updated=='N'))
	{
		errcode=A5999_01b_01a_check_nsn();
	}

	return(errcode);
}

int	A5999_01b_01a_check_nsn()
{
	int	errcode='0';
	int numOfChars = 0 ;

	#if DEBUG
		printf("\nA5999_01b_01a_check_nsn");
	#endif

	memset(setup_nsn,' ',sizeof(setup_nsn));
	/* make sure the setup_nsn can accomodate
	* 4 char's fo the fsc, 9 char's of the hold_nsn,
	* 3 dashes and a null terminator
	*/
	assert(sizeof(setup_nsn) <= (4+1+2+1+3+1+4+1) );

	/* use &hold_nsn[ n ] to get the a pointer to a char
	*  required by %s formats vs hold_nsn[ n ] which is
	*  not a pointer it is a single char 
	*/
	numOfChars = sprintf(setup_nsn,"%4.4s-%2.2s-%3.3s-%4.4s",
          hold_fsc,hold_nsn,&hold_nsn[2],&hold_nsn[5]) ;
	assert(numOfChars == 16) ;
	strncpy(setup_nsn,(char *) hold_fsc,4);
	strncpy(&setup_nsn[4],"-",1);
	strncpy(&setup_nsn[5],(char *) &hold_nsn[0],2);
	strncpy(&setup_nsn[7],"-",1);
	strncpy(&setup_nsn[8],(char *) &hold_nsn[2],3);
	strncpy(&setup_nsn[11],"-",1);
	strncpy(&setup_nsn[12],(char *) &hold_nsn[5],4);

	#if DEBUG
		printf("\nHold NSN (%s)",hold_nsn);
		printf("\nSetup NSN (%s)",setup_nsn);
		printf("\nGold NSN (%s)",gold_nsn.arr);
	#endif

	if(strncmp(setup_nsn,(char *) gold_nsn.arr,16)==0)
	{
		nsn_updated='*';
	}
	else
	{
		if((strncmp(hold_nsn,"                ",16)==0))
		{
			/* do not update GOLD*/
			nsn_updated='*';
		}
		else
		{
			nsn_updated='Y';
			update_cat1='Y';
		}
	}

	#if DEBUG
		printf("\nSetup NSN (%s)",setup_nsn);
		printf("\nNSN Updated Flag (%c)",nsn_updated);
	#endif

	return(errcode);
}

int	A5999_01c_01_setup_smic()
{
	int	errcode='0';

	#if DEBUG
		printf("\nA5999_01c_01_setup_smic");
		printf("\nSLIC SMIC (%s)",(char *) smmnsnha.arr);
		printf("\nSLIC HAX01 PNSNSMIC (%s)",(char *) ansnsmic.arr);
		printf("\nSLIC HAX01 NICNSMIC (%s)",(char *) nicnsmic.arr);
	#endif

	memset(hold_nsn_type,' ',sizeof(hold_nsn_type));
	memset(hold_smic,' ',sizeof(hold_smic));

	if(strncmp((char *) smmnsnha.arr,"  ",2)!=0)
	{

		strncpy(hold_nsn_type,"HANSN ",6);
		hold_nsn_type[6]='\0';
		strncpy(hold_smic,(char *) smmnsnha.arr,2);
		errcode=A5999_01c_01a_check_smic();
	}
	if((strncmp((char *) ansnsmic.arr,"  ",2)!=0) &&
	   (nsn_updated=='N'))
	{
		strncpy(hold_nsn_type,"HAXNSN",6);
		strncpy(hold_smic,(char *) ansnsmic.arr,2);
		hold_nsn_type[6]='\0';
		errcode=A5999_01c_01a_check_smic();
	}
	if((strncmp((char *) nicnsmic.arr,"  ",2)!=0) &&
	   (nsn_updated=='N'))
	{
		strncpy(hold_nsn_type,"HAXNIC",6);
		hold_nsn_type[6]='\0';
		strncpy(hold_smic,(char *) nicnsmic.arr,2);
		errcode=A5999_01c_01a_check_smic();
	}

	return(errcode);
}

int	A5999_01c_01a_check_smic()
{
	int	errcode='0';

	#if DEBUG
		printf("\nA5999_01c_01a_check_smic");
	#endif

	memset(setup_smic,' ',sizeof(setup_smic));
	strncpy(setup_smic,(char *) hold_smic,2);
	smic_updated='N';

	#if DEBUG
		printf("\nHold SMIC (%s)",hold_smic);
		printf("\nSetup SMIC (%s)",setup_smic);
		printf("\nGold SMIC (%s)",gold_nsn_smic.arr);
	#endif

	if(strncmp(setup_smic,(char *) gold_nsn_smic.arr,2)==0)
	{
		smic_updated='*';
	}
	else
	{
		smic_updated='Y';
		update_cat1='Y';
	}

	#if DEBUG
		printf("\nSetup SMIC (%s)",setup_smic);
		printf("\nSMIC Update Flag (%c)",smic_updated);
	#endif

	return(errcode);
}

int	A5999_01d_01_setup_cog()
{
	int	errcode='0';

	#if DEBUG
		printf("\nA5999_01d_01_setup_cog");
		printf("\nGOLD Cog Code (%s)",gold_cognizance_code.arr);
		printf("\nSLIC Cog Code (%s)",cognsnha.arr);
		printf("\nSLIC HAX01 PNSNCog Code (%s)",ansncog.arr);
		printf("\nSLIC HAX01 NICNCog Code (%s)",nicncog.arr);
	#endif

	memset(hold_nsn_type,' ',sizeof(hold_nsn_type));
	memset(hold_cog,' ',sizeof(hold_cog));

	if(strncmp((char *) cognsnha.arr,"  ",2)!=0)
	{

		strncpy(hold_nsn_type,"HANSN ",6);
		hold_nsn_type[6]='\0';
		strncpy(hold_cog,(char *) cognsnha.arr,2);
		errcode=A5999_01d_01a_check_cog();
	}
	if((strncmp((char *) ansncog.arr,"  ",2)!=0) &&
	   (nsn_updated=='N'))
	{
		strncpy(hold_nsn_type,"HAXNSN",6);
		strncpy(hold_cog,(char *) ansncog.arr,2);
		hold_nsn_type[6]='\0';
		errcode=A5999_01d_01a_check_cog();
	}
	if((strncmp((char *) nicncog.arr,"  ",2)!=0) &&
	   (nsn_updated=='N'))
	{
		strncpy(hold_nsn_type,"HAXNIC",6);
		hold_nsn_type[6]='\0';
		strncpy(hold_cog,(char *) nicncog.arr,2);
		errcode=A5999_01d_01a_check_cog();
	}

	return(errcode);
}

int	A5999_01d_01a_check_cog()
{
	int	errcode='0';

	#if DEBUG
		printf("\nA5999_01d_01a_check_cog");
	#endif

	memset(setup_cog,' ',sizeof(setup_cog));
	strncpy(setup_cog,(char *) hold_cog,2);

	#if DEBUG
		printf("\nHold Cog (%s)",hold_cog);
		printf("\nSetup Cog (%s)",setup_cog);
		printf("\nGold Cog (%s)",gold_cognizance_code.arr);
	#endif

	if(strncmp(setup_cog,(char *) gold_cognizance_code.arr,2)==0)
	{
		cog_updated='*';
	}
	else
	{
		cog_updated='Y';
		update_cat1='Y';
	}

	#if DEBUG
		printf("\nSetup COG (%s)",setup_cog);
		printf("\nCOG Updated Flag (%c)",cog_updated);
	#endif

	return(errcode);
}
int	A5999_01e_get_hb_nsn()
{
	short adfsc_ind;
	short adniin_ind;
	short adcog_ind;
	short adsmm_ind;

	adfsc_ind = -1;
	adniin_ind = -1;
	adcog_ind = -1;
	adsmm_ind = -1;

	char my_sql[500];
	int	errcode=0;

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nA5999_01e_get_hb_nsn");
	#endif

	strcpy(my_sql,"select nvl(adfsc,'    '), ");
	strcat(my_sql,"nvl(adniin,'         '), ");
	strcat(my_sql,"nvl(adcog,'  '), ");
	strcat(my_sql,"nvl(adsmic,'  ') ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hbx01 hbx01 ");
	strcat(my_sql,"where hbx01.can_int = 0 ");
	strcat(my_sql,"and hbx01.refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and hbx01.cagecdxh = '");
	strcat(my_sql,(char*) prime_cage.arr);
	strcat(my_sql,"' and hbx01.addrefhb = '");
	strcat(my_sql,(char*) part.arr);
	strcat(my_sql,"' and hbx01.adcagehb = '");
	strcat(my_sql,(char*) manufac_cage_hb.arr);
	strcat(my_sql,"'");

	#if DEBUG
		printf("\n\n*** A5999_01e_get_hb_nsn*******************************************************");
		printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
		printf("\n******************************************************************************\n\n");
	#endif

	EXEC SQL PREPARE A5999_01e_get_hb_nsn_stmnt FROM :my_sql;
	EXEC SQL DECLARE A5999_01e_get_hb_nsn_csr CURSOR FOR A5999_01e_get_hb_nsn_stmnt;

	/* open the cursor*/
	EXEC SQL OPEN A5999_01e_get_hb_nsn_csr;

	if(sqlca.sqlcode == FND)
		{
			EXEC SQL FETCH A5999_01e_get_hb_nsn_csr
		    	into  :adfsc:adfsc_ind,
					  :adniin:adniin_ind,
				      :adcog:adcog_ind,
				      :adsmm:adsmm_ind;
		}


	if(sqlca.sqlcode == FND)
	{
		if(strncmp((char *) adniin.arr,"         ",9)==0)
		{
		}
	}
	else
	{
		if(sqlca.sqlcode == NOT_FND)
		{
		  INITVCHAR(adfsc) ;
		  INITVCHAR(adniin) ;
		  INITVCHAR(adcog) ;
		  INITVCHAR(adsmm) ;
		}
		else
		{
			printf("\nA5999_01e_get_hb_nsn");
			printf("\nBad SQLCODE ");
			printf("\nrefnumha (%s)",(char *) prime.arr);
			printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
			printf("\naddrefhb (%s)",(char *) part.arr);
			printf("\nadcagehb (%s)",(char *) manufac_cage.arr);
			printf("\nSQL (%s)",my_sql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	#if DEBUG
		printf("\n\n*********A5999_01e_get_hb_nsn************************************************************");
		printf("\n* adfsc = %s",(char*) adfsc.arr);
		printf("\n* unitisha = %s",(char*) unitisha.arr);
		printf("\n* adniin = %s",(char*) adniin.arr);
		printf("\n* adcog = %s",(char*) adcog.arr);
		printf("\n* adsmm = %s",(char*) adsmm.arr);
		printf("\n* sqlcode = %d",sqlca.sqlcode);
		printf("\n**************************************");
	#endif

	return(errcode);
}
/*

*/
int     A5999_02_get_hax01()
{
	int	i;
    int	errcode=0;
	char my_sql[500];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nA5999_02_get_hax01");
	#endif


	strcpy(my_sql,"select nvl(sos,' ') ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hax01 ");
	strcat(my_sql,"where can_int = 0 ");
	strcat(my_sql,"and refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and cagecdxh = '");
	strcat(my_sql,(char*) prime_cage.arr);
	strcat(my_sql,"'");

	#if DEBUG
		printf("\n\n*** A5999_02_get_hax01*******************************************************");
		printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
		printf("\n*** sql code = %d",sqlca.sqlcode);
		printf("\n******************************************************************************\n\n");
	#endif


	EXEC SQL PREPARE A5999_02_get_hax01_stmnt FROM :my_sql;
	EXEC SQL DECLARE A5999_02_get_hax01_csr CURSOR FOR A5999_02_get_hax01_stmnt;

	/* open the cursor*/
	EXEC SQL OPEN A5999_02_get_hax01_csr;

	if(sqlca.sqlcode == FND)
	{
		EXEC SQL FETCH A5999_02_get_hax01_csr
			    	into :sos;

		#if DEBUG
			printf("\n\n*** A5999_02_get_hax01*******************************************************");
			printf("\n*** sos = %s",(char*) sos.arr);
			printf("\n*** sql code = %d",sqlca.sqlcode);
			printf("\n******************************************************************************\n\n");
		#endif

		errcode=A5999_02a_setup_hax01();
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{
		        INITVCHAR(sos) ;

			#if DEBUG
				printf("\n\n*** A5999_02_get_hax01*******************************************************");
				printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
				printf("\n*** sql code = %d",sqlca.sqlcode);
				printf("\n******************************************************************************\n\n");
			#endif
		}
		else
		{
			printf("\nA5999_02_get_hax01");
			printf("\nBad SQLCODE ");
			printf("\nrefnumha (%s)",(char *) prime.arr);
			printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
			printf("\nSQL (%s)",my_sql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}


	return(errcode);
}
/*

*/
int	A5999_02a_setup_hax01()
{

        int	errcode=0;
	#if DEBUG
		printf("\nA5999_02a_setup_hax01");
		printf("\nSOS (%d) (%s)",sos.len,sos.arr);
	#endif

	if(delimited_file=='N')
	{
		if(create_new_cat1=='N')
		{
			if(strncmp((char *) gold_source_code.arr,(char *) sos.arr,sos.len)==0)
			{
			}
			else
			{
				strncpy(Gold68_Cat1_api_rcd.source_code,(char *) sos.arr,sos.len);
				update_cat1='Y';
			}
		}
		else
		{
			strncpy(Gold68_Cat1_api_rcd.source_code,(char *) sos.arr,sos.len);
		}
	}
	else
	{
		strncpy(Gold68_Cat1_delmtd_rcd.source_code,(char *) sos.arr,sos.len);
	}

	return(errcode);
}
/*

*/

int     A5999_03_get_hg()
{

        int	errcode=0;
	char my_sql[1500];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nA5999_03_get_hg");
	#endif



	strcpy(my_sql,"select distinct ");
	strcat(my_sql,"translate(substr(smrcodhg,1,1),'PMAXK ','123456'), ");
	strcat(my_sql,"translate(substr(smrcodhg,3,1),'OFHGDLZ ','12345678'), ");
	strcat(my_sql,"smrcodhg ");
	strcat(my_sql,"from " );
	#if DEBUG
	  printf("\n1. my_sql=%s",my_sql);
	#endif
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hg ");
	strcat(my_sql,"where refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and cagecdxh = '");
	#if DEBUG
	  printf("\n2. my_sql=%s",my_sql);
	#endif
	strcat(my_sql,(char*) prime_cage.arr);
	#if DEBUG
	  printf("\n3. my_sql=%s",my_sql);
	#endif
	if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'F/A-18E/F' ");
		strcat(my_sql,"and (lsaconxb like 'A%' ");
		strcat(my_sql,"or lsaconxb like 'P%' ");
		strcat(my_sql,"or lsaconxb like 'S%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{
		strcat(my_sql,"' and eiacodxa in ('F15AV','F15SE','KOREANAV','KOREANSE','SINGAV','SINGSE') ");
		strcat(my_sql,"and (lsaconxb like 'K%' ");
		strcat(my_sql,"or lsaconxb like 'Z%' ");
		strcat(my_sql,"or lsaconxb like 'A%' ");
		strcat(my_sql,"or lsaconxb like 'B%' ");
		strcat(my_sql,"or lsaconxb like 'C%' ");
		strcat(my_sql,"or lsaconxb like 'D%' ");
		strcat(my_sql,"or lsaconxb like 'E%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'AV8B' ");
		strcat(my_sql,"and (lsaconxb like 'T%' ");
		strcat(my_sql,"or lsaconxb like 'A%' ");
		strcat(my_sql,"or lsaconxb like 'N%' ");
		strcat(my_sql,"or lsaconxb like 'H%') ");
	}
    strcat(my_sql,"order by 1,2");

        #if DEBUG
		printf("\n\n*** A5999_03_get_hg*******************************************************");
		printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
		printf("\n*** sql code = %d",sqlca.sqlcode);
		printf("\n******************************************************************************\n\n");
	#endif

	EXEC SQL PREPARE hg_smr_stmnt FROM :my_sql;
	EXEC SQL DECLARE hg_smr_csr CURSOR FOR hg_smr_stmnt;

	EXEC SQL OPEN hg_smr_csr;

	if(sqlca.sqlcode == FND)
	{
        	#if DEBUG
		  printf("\nFound: Fetch start") ;
		#endif
		EXEC SQL FETCH hg_smr_csr
           		into :smrcodhg_pos1,
           		     :smrcodhg_pos3,
           		     :smrcodhg;

                 #if DEBUG
			printf("\n\n*** A5999_03_get_hg*******************************************************");
			printf("\n*** smrcodhg_pos1 = %c",smrcodhg_pos1);
			printf("\n*** smrcodhg_pos3 = %c",smrcodhg_pos3);
			printf("\n*** smrcodhg = %s",smrcodhg.arr);
			printf("\n*** sql code = %d",sqlca.sqlcode);
			printf("\n******************************************************************************\n\n");
		#endif

                if(sqlca.sqlcode == FND)
           	{
           		errcode=A5999_03a_setup_hg();
			if(errcode==0)
			{
				errcode=A5999_03b_get_hg_check_icc();
			}
           	}
           	else
           	{
           		if(sqlca.sqlcode==NOT_FND)
           		{
           		}
           		else
           		{
           			printf("\nA5999_03_get_hg - Fetch Cursor");
				printf("\nBad SQLCODE ");
				printf("\nrefnumha (%s)",(char *) prime.arr);
				printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
				printf("\nSQL (%s)",my_sql);
				errcode=sqlca.sqlcode;
				A999_02_dberr();
           		}
           	}
         }
         else
         {
         	if(sqlca.sqlcode==NOT_FND)
        	{
        	  #if DEBUG
		    printf("\nNot Found") ;
		  #endif
         	}
             	else
           	{
           		printf("\nA5999_03_get_hg - Open Cursor");
			printf("\nBad SQLCODE ");
			printf("\nrefnumha (%s)",(char *) prime.arr);
			printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
			printf("\nSQL (%s)",my_sql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
           	}
         }

       #if DEBUG
	 printf("\nA5999_03_get_hg - end errcode=%d", errcode);
       #endif

       return(errcode);
}
/*

*/
int	A5999_03a_setup_hg()
{
        int	errcode=0;

	#if DEBUG
		printf("\nA5999_03a_setup_hg");
		printf("\nGold SMRCODE (%s)",gold_smr_code.arr);
		printf("\nSLIC SMRCODE (%s)",smrcodhg.arr);
	#endif

	if(delimited_file=='N')
	{
		if(create_new_cat1=='N')
		{
			if(strncmp((char *) gold_smr_code.arr,(char *) smrcodhg.arr,smrcodhg.len)==0)
			{
			}
			else
			{
				strncpy(Gold68_Cat1_api_rcd.smrc,(char *) smrcodhg.arr,smrcodhg.len);
				update_cat1='Y';
			}
		}
		else
		{
			strncpy(Gold68_Cat1_api_rcd.smrc,(char *) smrcodhg.arr,smrcodhg.len);
			if(smrcodhg.arr[0]=='P')
			{
				Gold68_Cat1_api_rcd.part_buy_b='T';
			}
			else
			{
				if(smrcodhg.arr[0]=='M')
				{
					Gold68_Cat1_api_rcd.part_make_b='T';
				}
				else
				{
				}
			}
		}
	}
	else
	{
		strncpy(Gold68_Cat1_delmtd_rcd.smrc,(char *) smrcodhg.arr,smrcodhg.len);
		if(smrcodhg.arr[0]=='P')
		{
			Gold68_Cat1_delmtd_rcd.part_buy_b='T';
		}
		else
		{
			if(smrcodhg.arr[0]=='M')
			{
				Gold68_Cat1_delmtd_rcd.part_make_b='T';
			}
			else
			{
			}
		}
	}

	return(errcode);
}

int	A5999_03b_get_hg_check_icc()
{
	int	errcode=0;
	short itmcathg_ind;
	char my_sql[500];

	itmcathg_ind = -1;
	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
        	printf("\nA5999_03b_get_hg_chk_icc");
	#endif

	repair_item=' ';

	strcpy(my_sql,"select itmcathg ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hg ");
	strcat(my_sql,"where refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and cagecdxh = '");
	strcat(my_sql,(char*) prime_cage.arr);
	if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'F/A-18E/F' ");
		strcat(my_sql,"and (lsaconxb like 'A%' or ");
		strcat(my_sql,"lsaconxb like 'S%' or ");
		strcat(my_sql,"lsaconxb like 'P%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{
		strcat(my_sql,"' and (eiacodxa in ('F15AV','F15SE','KOREANAV','KOREANSE','SINGAV','SINGSE')) ");
		strcat(my_sql,"and (lsaconxb like 'K%' ");
		strcat(my_sql,"or lsaconxb like 'Z%' ");
		strcat(my_sql,"or lsaconxb like 'A%' ");
		strcat(my_sql,"or lsaconxb like 'B%' ");
		strcat(my_sql,"or lsaconxb like 'C%' ");
		strcat(my_sql,"or lsaconxb like 'D%' ");
		strcat(my_sql,"or lsaconxb like 'E%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'AV8B' ");
		strcat(my_sql,"and (lsaconxb like 'T%' ");
		strcat(my_sql,"or lsaconxb like 'A%' ");
		strcat(my_sql,"or lsaconxb like 'N%' ");
		strcat(my_sql,"or lsaconxb like 'H%') ");
	}
	strcat(my_sql,"and itmcathg in ('X ') ");

	#if DEBUG
		printf("\n\n*** A5999_03b_get_hg_check_icc*******************************************************");
		printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
		printf("\n*** sql code = %d",sqlca.sqlcode);
		printf("\n******************************************************************************\n\n");
	#endif

	EXEC SQL PREPARE A5999_03b_get_hg_check_icc_stmnt FROM :my_sql;
	EXEC SQL DECLARE A5999_03b_get_hg_check_icc_csr CURSOR FOR A5999_03b_get_hg_check_icc_stmnt;

	EXEC SQL OPEN A5999_03b_get_hg_check_icc_csr;

	/* open the cursor */
	EXEC SQL OPEN A5999_03b_get_hg_check_icc_csr;

	if(sqlca.sqlcode == FND)
	{
		EXEC SQL FETCH A5999_03b_get_hg_check_icc_csr
			into :itmcathg:itmcathg_ind;

			if(itmcathg_ind==-1)
			{
			  INITVCHAR(itmcathg) ;
			}
	}


	if(sqlca.sqlcode==FND ||
	   sqlca.sqlcode==MULTI_ROWS)
	{
		repair_item='Y';
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{
			repair_item='N';
		}
		else
		{
           		printf("\nA5999_03b_get_hg_chk_icc");
			printf("\nBad SQLCODE ");
			printf("\nrefnumha (%s)",(char *) prime.arr);
			printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
			printf("\nSQL (%s)",my_sql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	#if DEBUG
		printf("\n\n*** A5999_03b_get_hg_check_icc*******************************************************");
		printf("\n*** itmcathg = %s",(char*) itmcathg.arr);
		printf("\n*** itmcathg_ind = %d",itmcathg_ind);
		printf("\n*** Repair Item = %c",repair_item);
		printf("\n*** sql code = %d",sqlca.sqlcode);
		printf("\n******************************************************************************\n\n");
	#endif

	return(errcode);
}
/*

*/

int	A5999_04_get_hgx01()
{
	int	i=0;
	int	fetch_sw=1;
	int	errcode=0;
	char my_sql[2500];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nA5999_04_get_hgx01");
		printf("\nPrime (%s)",prime.arr);
		printf("\nPrime Cage (%s)",prime_cage.arr);
	#endif
	if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{
		strcpy(my_sql,"select distinct suplyrcd ");
		strcat(my_sql,"from ");
		strcat(my_sql,(char*) processing_mdl.arr);
		strcat(my_sql,"_haxsam ");
		strcat(my_sql,"where refnumha = '");
		strcat(my_sql,(char*) prime.arr);
		strcat(my_sql,"' and cagecdxh = '");
		strcat(my_sql,(char*) prime_cage.arr);
		strcat(my_sql," union all ");
	}

	strcpy(my_sql,"select distinct suplyrcd ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hgx01 ");
	strcat(my_sql,"where refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and cagecdxh = '");
	strcat(my_sql,(char*) prime_cage.arr);
	if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'F/A-18E/F' ");
		strcat(my_sql,"and (lsaconxb like 'A%' or ");
		strcat(my_sql,"lsaconxb like 'P%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{
		strcat(my_sql,"' and eiacodxa in ('F15AV','F15SE','KOREANAV','KOREANSE','SINGAV','SINGSE') ");
		strcat(my_sql,"and (lsaconxb like 'A%' or ");
		strcat(my_sql,"lsaconxb like 'B%' or ");
		strcat(my_sql,"lsaconxb like 'C%' or ");
		strcat(my_sql,"lsaconxb like 'D%' or ");
		strcat(my_sql,"lsaconxb like 'E%' or ");
		strcat(my_sql,"lsaconxb like 'K%' or ");
		strcat(my_sql,"lsaconxb like 'Z%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'AV8B' ");
		strcat(my_sql,"and (lsaconxb like 'A%' or ");
		strcat(my_sql,"lsaconxb like 'P%') ");
	}
	strcat(my_sql,"and can_int = 0 ");
	strcat(my_sql,"and suplyrcd > ' ' ");
	strcat(my_sql,"order by 1");

	EXEC SQL PREPARE hgx_stmnt FROM :my_sql;
	EXEC SQL DECLARE hgx_csr CURSOR FOR hgx_stmnt;

	for(i=0;i<=99;i++)
	{
		strncpy(suplyr_tble[i],spaces,6);
		suplyr_tble[i][5]='\0';
	}

	i=0;
	suplyr_max=0;

	EXEC SQL OPEN hgx_csr;

	if(sqlca.sqlcode==FND)
	{
		while(fetch_sw)
		{
			EXEC SQL FETCH hgx_csr
				into suplyrcd;

			if(sqlca.sqlcode==FND)
			{
				#if DEBUG
					printf("\nA5999_04_get_hgx01");
					printf("\nSupplyr (%s)",suplyrcd.arr);
				#endif
				strncpy(suplyr_tble[i],(char *) suplyrcd.arr,suplyrcd.len);
				i++;
				suplyr_max++;
			}
			else
			{
		/*		if(suplyr_max>0)
				{
					suplyr_max--;
				}  */
				fetch_sw=0;
				if(sqlca.sqlcode==NOT_FND)
				{
					#if DEBUG
						printf("\nA5999_04_get_hgx01 - Supplyrcd Not Found ");
						printf("\nSuplyr_max (%d)",suplyr_max);
					#endif
				}
				else
				{
	           			printf("\nA5999_04_get_hgx01 - Fetch Cursor");
					printf("\nBad SQLCODE ");
					printf("\nrefnumha (%s)",(char *) prime.arr);
					printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
					printf("\nSQL (%s)",my_sql);
					errcode=sqlca.sqlcode;
					A999_02_dberr();
				}
			}
			if(i<=99)
			{
			}
			else
			{
	         		printf("\nA5999_04_get_hgx01 - Fetch Cursor");
				printf("\nsuplyr_tble index exceed max allowed of 100");
				printf("\nrefnumha (%s)",(char *) prime.arr);
				printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
				printf("\nSQL (%s)",my_sql);
				errcode=520;
				exit(errcode);
			}
		}
	}
	else
	{
       		printf("\nA5999_04_get_hgx01 - Open Cursor");
		printf("\nBad SQLCODE ");
		printf("\nrefnumha (%s)",(char *) prime.arr);
		printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
		printf("\nSQL (%s)",my_sql);
		errcode=sqlca.sqlcode;
		A999_02_dberr();
	}

	EXEC SQL CLOSE hgx_csr;
	return(errcode);
}
/*

*/

int	A5999_05_get_repair_agents()
{
	int	i=0;
	int	i1=0;
	int	fetch_sw=1;
    int	errcode=0;

	char my_sql[500];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nA5999_05_get_repair_agents");
	#endif

	strcpy(my_sql,"select distinct drponehg, drptwohg ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hg ");
	strcat(my_sql,"where refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and cagecdxh = '");
	strcat(my_sql,(char*) prime_cage.arr);
	if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'F/A-18E/F' ");
		strcat(my_sql,"and (lsaconxb like 'A%' or ");
		strcat(my_sql,"lsaconxb like 'P%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{
		strcat(my_sql,"' and eiacodxa in ('F15AV','F15SE','KOREANAV','KOREANSE','SINGAV','SINGSE') ");
		strcat(my_sql,"and (lsaconxb like 'A%' or ");
		strcat(my_sql,"lsaconxb like 'B%' or ");
		strcat(my_sql,"lsaconxb like 'C%' or ");
		strcat(my_sql,"lsaconxb like 'D%' or ");
		strcat(my_sql,"lsaconxb like 'E%' or ");
		strcat(my_sql,"lsaconxb like 'K%' or ");
		strcat(my_sql,"lsaconxb like 'Z%') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
	{
		strcat(my_sql,"' and eiacodxa = 'AV8B' ");
		strcat(my_sql,"and (lsaconxb like 'A%' or ");
		strcat(my_sql,"lsaconxb like 'P%') ");
	}
	strcat(my_sql,"and drponehg > ' ' ");
	strcat(my_sql,"order by 1");


	EXEC SQL PREPARE hgx_repragnt_stmnt FROM :my_sql;
	EXEC SQL DECLARE hgx_repragnt_csr CURSOR FOR hgx_repragnt_stmnt;

	for(i=0;i<200;i++)
	{
		strncpy(repr_agnt_tble[i],spaces,6);
		repr_agnt_tble[i][6]='\0';
	}

	i=0;
	repr_agnt_max=0;

	EXEC SQL OPEN hgx_repragnt_csr;

	#if DEBUG
			printf("\n\n*** A5999_05_get_repair_agents*******************************************************");
			printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
			printf("\n*** sqlcode = %d",sqlca.sqlcode);
			printf("\n******************************************************************************\n\n");
	#endif

	if(sqlca.sqlcode==FND)
	{
		while(fetch_sw)
		{
			EXEC SQL FETCH hgx_repragnt_csr
				into repragnt,repragnt2;

			#if DEBUG
				printf("\n\n*** A5999_05_get_repair_agents*******************************************************");
				printf("\n*** drponehg = %s",(char*) repragnt.arr);
				printf("\n*** drptwohg = %s",(char*) repragnt2.arr);
				printf("\n*** sqlcode = %d",sqlca.sqlcode);
				printf("\n******************************************************************************\n\n");
			#endif


			if(sqlca.sqlcode==FND)
			{
                                if (memcmp((char *) &repragnt.arr,"     ",5)  != 0) {
				     strncpy(repr_agnt_tble[i],(char *) repragnt.arr,repragnt.len);
				     i++;
				     repr_agnt_max++;
                                }
                                if (memcmp((char *) &repragnt2.arr,"     ",5) != 0) {
	 			     strncpy(repr_agnt_tble[i],(char *) repragnt2.arr,repragnt2.len);
				     i++;
				     repr_agnt_max++;
                                }
			}
			else
			{
				if(repr_agnt_max>0)
				{
					repr_agnt_max--;
				}
				fetch_sw=0;
				if(sqlca.sqlcode==NOT_FND)
				{
				}
				else
				{
					printf("\nA5999_05_get_repair_agents - Fetch Cursor");
					printf("\nBad SQLCODE ");
					printf("\nrefnumha (%s)",(char *) prime.arr);
					printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
					printf("\nSQL (%s)",my_sql);
					errcode=sqlca.sqlcode;
					A999_02_dberr();
				}
			}
			if(i<=99)
			{
			}
			else
			{
				printf("\nA5999_05_get_repair_agents - Fetch Cursor");
				printf("\nrepr_agnt_tble index exceed max allowed of 100");
				printf("\nrefnumha (%s)",(char *) prime.arr);
				printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
				printf("\nSQL (%s)",my_sql);
				errcode=530;
				exit(errcode);
			}
		}
	}
	else
	{
		printf("\nA5999_05_get_repair_agents - Open Cursor");
		printf("\nBad SQLCODE ");
		printf("\nrefnumha (%s)",(char *) prime.arr);
		printf("\ncagecdxh (%s)",(char *) prime_cage.arr);
		printf("\nSQL (%s)",my_sql);
		errcode=sqlca.sqlcode;
		A999_02_dberr();
	}

	EXEC SQL CLOSE hgx_repragnt_csr;

	return(errcode);
}
/*

*/
int     Z9991_check_cat1_prime(void)
{

        int	errcode=0;
	gold_rcd_exists='N';

	#if DEBUG
		printf("\nZ9991_check_cat1_prime");
		printf("\nprime (%s)",prime.arr);
		printf("\nCat1 Prime (%s)",cat1_prime.arr);
	#endif

	strncpy((char *) cat1_prime.arr,spaces,50);
	strncpy((char *) cat1_prime.arr,(char *) prime.arr,32);
	cat1_prime.len=50;
	cat1_prime.arr[50]='\0';

	#if DEBUG
		printf("\nCat1 Prime (%s) (%d)",(char *) cat1_prime.arr,strlen((char *) cat1_prime.arr));
	#endif

	errcode=Z9999_initialize_gold_variables();

	EXEC SQL
	   select part,
		  rpad(prime,50),
		  nvl(category_instrument,'            '),
		  nvl(um_issue_code,' '),
		  nvl(um_show_code,' '),
		  nvl(manuf_cage,'      '),
		  nvl(cat1.nsn,'NSL             '),
		  substr(to_char(nvl(ave_cap_lead_time,'000'),'00000'),2,3),
		  nvl(security_code,' '),
		  nvl(pmi_code,' '),
		  nvl(demilitarization_code,' '),
		  nvl(critical_item_code,' '),
		  nvl(cognizance_code,' '),
		  nvl(smrc,' '),
		  nvl(nsn1.nsn_smic,'  '),
		  nvl(source_code,'   '),
		  nvl(hazardous_material_code,' '),
		  nvl(cat1_profile,'STL'),
		  nvl(ims_designator_code,' '),
		  nvl(order_cap_b,'T'),
		  nvl(order_gfp_b,'F'),
		  nvl(delete_when_gone,'F'),
		  nvl(tracked_b,'F'),
		  nvl(part_make_b,'F'),
		  nvl(part_buy_b,'F'),
		  nvl(hazardous_material_b,'F'),
		  nvl(lot_batch_mandatory_b,'F'),
		  nvl(serial_mandatory_b,'F'),
		  nvl(agency_peculiar_b,'F'),
		  nvl(mils_auto_process_b,'T'),
		  rtrim(ltrim(to_char(um_mil_show_count,'0000'))),
		  rtrim(ltrim(to_char(um_mil_code_count,'0000'))),
		  rtrim(ltrim(to_char(um_mil_factor,'0000')))
		into :gold_cat1_part,
		     :gold_cat1_prime,
		     :gold_cat_inst_code,
		     :gold_um_issue_code,
		     :gold_um_show_code,
		     :gold_manuf_cage,
		     :gold_nsn,
		     :gold_ave_cap_lead_time,
		     :gold_security_code,
		     :gold_pmi_code,
		     :gold_demilitarization_code,
		     :gold_critical_item_code,
		     :gold_cognizance_code,
		     :gold_smr_code,
		     :gold_nsn_smic,
		     :gold_source_code,
		     :gold_hazardous_material_code,
		     :gold_cat1_profile,
		     :gold_ims_designator_code,
		     :gold_order_cap_b,
		     :gold_order_gfp_b,
		     :gold_delete_when_gone,
		     :gold_tracked_b,
		     :gold_part_make_b,
		     :gold_part_buy_b,
		     :gold_hazardous_material_b,
		     :gold_lot_batch_mandatory_b,
		     :gold_serial_mandatory_b,
		     :gold_agency_peculiar_b,
		     :gold_mils_auto_process_b,
		     :gold_um_mil_show_count,
		     :gold_um_mil_code_count,
		     :gold_um_mil_factor
	     from cat1 cat1,nsn1 nsn1
	       where prime = rtrim(:cat1_prime)
		 and cat1.nsn=nsn1.nsn(+);

	if (sqlca.sqlcode == FND ||
	    sqlca.sqlcode == MULTI_ROWS)
	{
		#if DEBUG
			printf("\nGold Show Issue (%s)",gold_um_show_code.arr);
			printf("\nGold MIL Count (%s)",gold_um_mil_show_count.arr);
			printf("\nGold MIL Factor (%s)",gold_um_mil_factor.arr);
		#endif
		if(gold_part_make_b=='N')
		{
			gold_part_make_b='F';
		}
		if(gold_part_buy_b=='N')
		{
			gold_part_buy_b='F';
		}
		gold_rcd_exists='Y';
		errcode=0;
	}
	else
	{
		#if DEBUG
			printf("\nNot Found");
		#endif
		if(sqlca.sqlcode == NOT_FND)
		{
			stl_ims_des_code='Y';
			errcode=1;
		}
		else
		{
			printf("\nZ9991_check_cat1_prime");
			printf("\nBad SQLCODE ");
			printf("\nprime (%s)",(char *) prime.arr);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	#if DEBUG
		printf("\nExit of check_cat1_prime Errcode (%i)",errcode);
	#endif

	return(errcode);
}
/*

*/
int     Z9992_check_cat1_part(void)
{
        int     status;
        int	errcode=0;
	gold_rcd_exists='N';
	prime_mismatch='N';

	#if DEBUG
		printf("\nZ9992_check_cat1_part");
		printf("\nCat1 Part (%s)",cat1_part.arr);
	#endif

	errcode=Z9999_initialize_gold_variables();

	EXEC SQL

	   select part,
	   	  rpad(prime,50),
		  nvl(category_instrument,'            '),
		  nvl(noun,' '),
		  nvl(um_issue_code,' '),
		  nvl(um_show_code,' '),
		  nvl(manuf_cage,'      '),
		  nvl(cat1.nsn,'NSL             '),
		  substr(to_char(nvl(ave_cap_lead_time,'000'),'00000'),2,5),
		  nvl(security_code,' '),
		  nvl(pmi_code,' '),
		  nvl(demilitarization_code,' '),
		  nvl(critical_item_code,' '),
		  nvl(cognizance_code,' '),
		  nvl(smrc,' '),
		  nvl(nsn1.nsn_smic,'  '),
		  nvl(source_code,'   '),
		  nvl(hazardous_material_code,' '),
		  nvl(cat1_profile,'STL'),
		  nvl(ims_designator_code,' '),
		  nvl(order_cap_b,'T'),
		  nvl(order_gfp_b,'F'),
		  nvl(delete_when_gone,'F'),
		  nvl(tracked_b,'F'),
		  nvl(part_make_b,'F'),
		  nvl(part_buy_b,'F'),
		  nvl(hazardous_material_b,'F'),
		  nvl(lot_batch_mandatory_b,'F'),
		  nvl(serial_mandatory_b,'F'),
		  nvl(agency_peculiar_b,'F'),
		  nvl(mils_auto_process_b,'T'),
		  rtrim(ltrim(to_char(um_mil_show_count,'0000'))),
		  rtrim(ltrim(to_char(um_mil_code_count,'0000'))),
		  rtrim(ltrim(to_char(um_mil_factor,'0000')))
		into :gold_cat1_part,
		     :gold_cat1_prime,
		     :gold_cat_inst_code,
		     :gold_noun,
		     :gold_um_issue_code,
		     :gold_um_show_code,
		     :gold_manuf_cage,
		     :gold_nsn,
		     :gold_ave_cap_lead_time,
		     :gold_security_code,
		     :gold_pmi_code,
		     :gold_demilitarization_code,
		     :gold_critical_item_code,
		     :gold_cognizance_code,
		     :gold_smr_code,
		     :gold_nsn_smic,
		     :gold_source_code,
		     :gold_hazardous_material_code,
		     :gold_cat1_profile,
		     :gold_ims_designator_code,
		     :gold_order_cap_b,
		     :gold_order_gfp_b,
		     :gold_delete_when_gone,
		     :gold_tracked_b,
		     :gold_part_make_b,
		     :gold_part_buy_b,
		     :gold_hazardous_material_b,
		     :gold_lot_batch_mandatory_b,
		     :gold_serial_mandatory_b,
		     :gold_agency_peculiar_b,
		     :gold_mils_auto_process_b,
		     :gold_um_mil_show_count,
		     :gold_um_mil_code_count,
		     :gold_um_mil_factor
	     from cat1 cat1,nsn1 nsn1
	       where part = rtrim(:cat1_part)
		 and cat1.nsn=nsn1.nsn(+);

        errcode_global = 0;

	if (sqlca.sqlcode == FND || sqlca.sqlcode == MULTI_ROWS)
	{
		#if DEBUG
			printf("\nZ9992_check_cat1_part - Row Found");
		#endif
		if(gold_part_make_b=='N')
		{
			gold_part_make_b='F';
		}
		if(gold_part_buy_b=='N')
		{
			gold_part_buy_b='F';
		}
		stl_ims_des_code='Y';
		if(strncmp(rcdtype,"HB",2)==0)
		{
			if (strncmp((char *) prime.arr,(char *) gold_cat1_prime.arr,32)!=0)
			{
				errcode=1;
				prime_mismatch='Y';
				memset(candidates_out_area,' ',sizeof(candidates_out_area));
				strcpy(candidates_out_area,candidates_in_area);
/*				address = (int) strchr(candidates_out_area,'\n');
				memcpy((char *) address,"\0",1); */
				strcat(candidates_out_area,"   HB Part Number from activity Prime does not match Gold Prime\n");
				status = fputs(candidates_out_area,gold_log_rcds_fp);
/*				memset((char *) prime.arr,' ',32);
				strncpy((char *) prime.arr,(char *) gold_cat1_prime.arr,gold_cat1_prime.len);  */

			}
		}
		gold_rcd_exists='Y';
		create_new_cat1='N';
		errcode=0;
		if(delimited_file=='Y')
		{
		        memset(candidates_out_area,' ',sizeof(candidates_out_area));
			strcpy(candidates_out_area,candidates_in_area);
/*			address = (int) strchr(candidates_out_area,'\n');
			memcpy((char *) address,"\0",1); */
			strcat(candidates_out_area,"   Record Already In Gold\n");
			status = fputs(candidates_out_area,gold_log_rcds_fp);
			candidate_already_in_gold++;
			create_new_cat1='N';
			errcode_global=8888;
			errcode=1;
			return(errcode);
		}
	}
	else
	{
		if(sqlca.sqlcode == NOT_FND)
		{
			#if DEBUG
				printf("\nZ9992_check_cat1_part - Row Not Found");
			#endif
			stl_ims_des_code='Y';
			create_new_cat1='Y';
			errcode=0;
		}
		else
		{
			printf("\nZ9999_check_cat1_part");
			printf("\nBad SQLCODE ");
			printf("\nprime (%s)",(char *) prime.arr);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	#if DEBUG
		printf("\nZ9992 check cat1 part Errcode (%i)",errcode);
	#endif

	return(errcode);
}
/*

*/

int     Z9993_check_authorized_scm_part()
{
	int	fetch_sw=1;
	int	i=0;
	int got_one=0;
	int	errcode=0;
	int status;

	#if DEBUG
		printf("\nZ9993_check_authorized_scm_part");
	#endif

	char my_sql[500];


	memset(my_sql,' ',sizeof(my_sql));

	valid_scm_part='N';

	if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
	{
		strcpy(my_sql,"select distinct substr(scm_program,1,5) ");
	}
	else
	{
		if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
		{
			strcpy(my_sql,"select distinct substr(scm_program,1,4) ");
		}
		else
		{
			if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
			{
				strcpy(my_sql,"select distinct substr(scm_program,1,5) ");
			}
		}
	}
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
	{
		strcat(my_sql,"_hax04 ");
	}
	else
	{
		strcat(my_sql,"_haxscm ");
	}
	strcat(my_sql,"where refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and cagecdxh = '");
	strcat(my_sql,(char*) prime_cage.arr);
	strcat(my_sql,"' order by 1");


	EXEC SQL PREPARE hax04_scm_part_stmnt FROM :my_sql;
	EXEC SQL DECLARE hax04_scm_part_csr CURSOR FOR hax04_scm_part_stmnt;

	#if DEBUG
		printf("\nZ9993_check_authorized_scm_part");
		printf("\nprime pn (%s) (%d) ",(char *) prime.arr,strlen((char *) prime.arr));
		printf("\nprime cage (%s) (%d) ",(char *) prime_cage.arr,strlen((char *) prime_cage.arr));
		printf("\nValid SCM Switch (%c)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",valid_scm_part);
	#endif

	EXEC SQL OPEN hax04_scm_part_csr;

	#if DEBUG
		printf("\n\n*** Z9993_check_authorized_scm_part Open Cursor ****************************");
		printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
		printf("\n*** sql code = %d",sqlca.sqlcode);
		printf("\n******************************************************************************\n\n");
	#endif

	if(sqlca.sqlcode == FND)
	{
		while(fetch_sw)
		{
		        INITVCHAR(hax04_scm_program_temp) ;
			EXEC SQL FETCH hax04_scm_part_csr
				into :hax04_scm_program_temp;

			#if DEBUG
				printf("\n\n*** Z9993_check_authorized_scm_part FETCH ************************************************");
				printf("\n*** scm_program = %s",(char*) hax04_scm_program_temp.arr);
				printf("\n*** sql code = %d",sqlca.sqlcode);
				printf("\n******************************************************************************\n\n");
			#endif

			if(sqlca.sqlcode==FND)
			{
				got_one=1;
				for(i=0;i<=seg_code_max;i++)
				{
					#if DEBUG
						printf("\nZ9993_check_authorized_scm_part");
						printf("\nHAX04 SCM PROGRAM (%s) (%d)",hax04_scm_program_temp.arr,hax04_scm_program_temp.len);
						printf("\nTabled SCM PROGRAM (%20.20s)\n",seg_code_tble[i].pgm);
						printf("\nTabled SCM CUST Model (%20.20s)\n",seg_code_tble[i].cust_model);
						printf("\nIndex (%d)",i);
						printf("\nValid SCM Switch check seg_code_tble (%c)",valid_scm_part);
					#endif

					if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
					{
						if(strncmp((char *) hax04_scm_program_temp.arr,(char *) seg_code_tble[i].pgm,hax04_scm_program_temp.len)==0)
						{
							strncpy((char *) seg_code_tble[i].use,"Y",1);
							valid_scm_part='Y';
						}
					}
					else
					{
						if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
						{
							if(strncmp((char *) hax04_scm_program_temp.arr,(char *) seg_code_tble[i].pgm,hax04_scm_program_temp.len)==0)
							{
								strncpy((char *) seg_code_tble[i].use,"Y",1);
								valid_scm_part='Y';
							}
						}
						else
						{
							if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
							{
								if(strncmp((char *) hax04_scm_program_temp.arr,(char *) seg_code_tble[i].cust_model,hax04_scm_program_temp.len)==0)
								{
									strncpy((char *) seg_code_tble[i].use,"Y",1);
									valid_scm_part='Y';
								}
							}
						}
					}
				}
			}
			else
			{
				fetch_sw=0;
				if(sqlca.sqlcode==NOT_FND)
				{
				   if((delimited_file=='Y') && (!got_one))
				   {
				          memset(candidates_out_area,' ',sizeof(candidates_out_area));
					  strcpy(candidates_out_area,candidates_in_area);
/*					  address = (int) strchr(candidates_out_area,'\n');
					  memcpy((char *) address,"\0",1); */
					  strcat(candidates_out_area,"   Record Not In HAX04\n");
					  status = fputs(candidates_out_area,gold_log_rcds_fp);
					  candidate_not_in_hax04++;
					  create_new_cat1='N';
					  errcode_global=8887;
					  errcode=1;
					  return(errcode);
				   }
				}
				else
				{
					valid_scm_part='N';
					errcode=1;
					printf("\nZ9993_check_authorized_scm_part - Fetch Cursor");
					printf("\nBad SQLCODE ");
					printf("\nprime (%s)",(char *) prime.arr);
					errcode=sqlca.sqlcode;
					A999_02_dberr();
				}
			}

		}
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{
		}
		else
		{
			printf("\nZ9993_check_authorized_scm_part - Open Cursor");
			printf("\nBad SQLCODE ");
			printf("\nprime (%s)",(char *) prime.arr);
			printf("\nSQL (%s)",my_sql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	EXEC SQL CLOSE hax04_scm_part_csr;

	#if DEBUG
		printf("\nValid SCM Switch Z9993_check_authorized_scm_part Exit Function (%c)",valid_scm_part);
	#endif

	return(errcode);
}
/*

*/
int     Z9995_check_whse()
{


        int	errcode=0;
	#if DEBUG
		printf("\nZ9995_check_whse");
		printf("\nGold WHSE Part (%s)",(char *) gold_whse_part.arr);
		printf("\nGold WHSE Prime (%s)",(char *) gold_whse_prime.arr);
		printf("\nGold WHSE PGM SC (%s)",(char *) gold_whse_sc.arr);
		printf("\n SC_EXISTS Flag (%c)",sc_exists); 
	#endif

	sc_exists='N';
/*

	EXEC SQL
		select sc
		   into :pgm_sc
		 from whse
		 where part = :gold_whse_part
		   and prime = :gold_whse_prime
		   and sc = :gold_whse_sc;

	if(sqlca.sqlcode==FND ||
	   sqlca.sqlcode == MULTI_ROWS)
	{
		sc_exists='Y';
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{
			sc_exists='N';
		}
		else
		{
			printf("\nZ9994_check_whse");
			printf("\nGold WHSE Part (%s)",(char *) gold_whse_part.arr);
			printf("\nGold WHSE Prime (%s)",(char *) gold_whse_prime.arr);
			printf("\nGold WHSE PGM SC (%s)",(char *) gold_whse_sc.arr);
			printf("\nBad SQLCODE ");
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	#if DEBUG
		printf("\n SC_EXISTS Flag (%c)",sc_exists);
	#endif
	*/
	return(errcode);
}
/*

*/
int     Z9995_check_slic_gfp_price()
{
    int	errcode=0,i,j,k;
	char my_sql[1000];

	memset(my_sql,' ',sizeof(my_sql));
	fiscyrhd_i=-1;
	unit_price_i=-1;

	slic_price_exists='N';
	#if DEBUG
		printf("\nZ9995_check_slic_gfp_price");
		printf("\nPart (%s) (%d)",part.arr,part.len);
	#endif


	strcpy(my_sql,"select nvl(to_char(uiprichd,'000000000000.99'),' 000000000000.00'), ");
	strcat(my_sql,"translate(substr(fiscyrhd,1,1),'0','A') ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hd ");
	strcat(my_sql,"where refnumha = '");
	strcat(my_sql,(char*) part.arr);
	strcat(my_sql,"' and cagecdxh = '");
	strcat(my_sql,(char*) gold_prc1_cage.arr);
    strcat(my_sql,"' and can_int = 0 ");
    strcat(my_sql,"and tuiprchd = 'B' ");
    strcat(my_sql,"order by 2 desc");


	EXEC SQL PREPARE Z9995_check_slic_gfp_price_stmnt FROM :my_sql;
	EXEC SQL DECLARE Z9995_check_slic_gfp_price_csr CURSOR FOR Z9995_check_slic_gfp_price_stmnt;

	EXEC SQL OPEN Z9995_check_slic_gfp_price_csr;

	#if DEBUG
		printf("\n\n*** Z9995_check_slic_gfp_price*******************************************************");
		printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
		printf("\n*** sql code = %d",sqlca.sqlcode);
		printf("\n******************************************************************************\n\n");
	#endif

	/* open the cursor */
	EXEC SQL OPEN Z9995_check_slic_gfp_price_csr;

	if(sqlca.sqlcode == FND)
	{
		EXEC SQL FETCH Z9995_check_slic_gfp_price_csr
			into :unit_price:unit_price_i,
				 :fiscyrhd:fiscyrhd_i;
	}


	if(sqlca.sqlcode==FND ||
	   sqlca.sqlcode == MULTI_ROWS)
	{
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{
		  SETVCHAR(unit_price," 000000000000.00");
		}
		else
		{
			printf("\nZ9994_check_slic_gfp_price");
			printf("\nGold PRC1 Part (%s)",gold_prc1_part.arr);
			printf("\nGold PRC1 PGM SC (%s)",(char *) gold_prc1_sc.arr);
			printf("\nBad SQLCODE ");
			printf("sqlcode = %d",sqlca.sqlcode);
			printf("\nSQL (%s)",my_sql);
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}
	}

	#if DEBUG
		printf("\nSlic Unit Price (%s) (%d)",unit_price.arr,unit_price.len);
		printf("\n\n*** Z9995_check_slic_gfp_price*******************************************************");
		printf("\n*** unit_price = %s",(char*) unit_price.arr);
		printf("\n*** unit_price_i = %d",unit_price_i);
		printf("\n*** fiscyrhd = %s",(char*) fiscyrhd.arr);
		printf("\n*** sqlcode = %d",sqlca.sqlcode);
		printf("\n******************************************************************************\n\n");
	#endif

	return(errcode);
}
int	Z9995_check_gold_gfp_price()
{
	int	errcode=0;

	sc_exists='N';

	#if DEBUG
		printf("\nZ9995_check_gold_gfp_price");
		printf("\nGold Part (%s) (%d)",gold_prc1_part.arr,gold_prc1_part.len);
		printf("\nGold SC (%s) (%d)",gold_prc1_sc.arr,gold_prc1_sc.len);
	#endif

	/*
	EXEC SQL
	   select nvl(to_char(gfp_price,'000000000000.99'),' 000000000000.00')
	     into :gfp_price:gfp_price_i
	   from prc1
	     where part=:gold_prc1_part
	       and sc=:gold_prc1_sc;

	if(sqlca.sqlcode==FND)
	{
		if(strncmp((char *) gfp_price.arr,(char *) unit_price.arr,15)==0)
		{
			errcode=0;
			sc_exists='Y';
		}
		else
		{
			if(strncmp((char *) unit_price.arr," 000000000000.00",16)==0)
			{
				errcode=1;
				sc_exists='N';
			}
			else
			{
				errcode=0;
				sc_exists='Y';
			}
		}
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{
			errcode=1;
			strncpy((char *) gfp_price.arr," 000000000000.00",16);
			sc_exists='N';
		}
		else
		{
			printf("\nZ9995_check_gold_gfp_price");
			printf("\nGold PRC1 Part (%s)",gold_prc1_part.arr);
			printf("\nGold PRC1 PGM SC (%s)",(char *) gold_prc1_sc.arr);
			printf("\nBad SQLCODE ");
			errcode=sqlca.sqlcode;
			A999_02_dberr();
		}

	}

	#if DEBUG
		printf("\nSC Exists (%c)",sc_exists);
		printf("\nGold Prices (%s) (%d)",gfp_price.arr,gfp_price.len);
	#endif

	*/
	return(errcode);
}
/*

*/
int	Z9996_check_SE_item()
{
	char temp_refnumha[33];
	char my_sql[1000];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG1
		printf("\nZ9996_check_SE_item");
		printf("\nPrime (%s)",prime.arr);
		printf("\nCage  (%s)",prime_cage.arr);
	#endif

	strcpy(my_sql,"select distinct refnumha ");
	strcat(my_sql,"from ");
	strcat(my_sql,(char*) processing_mdl.arr);
	strcat(my_sql,"_hg ");
	if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
	{
		strcat(my_sql,"where lsaconxb like 'S%' ");
		strcat(my_sql,"and eiacodxa = 'F/A-18E/F' ");
	}
	else if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
	{
		strcat(my_sql,"where eiacodxa in ('F15SE','KOREANSE','SINGSE') ");
	}
	else if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
	{
		strcat(my_sql,"where lsaconxb like 'S%' ");
		strcat(my_sql,"and eiacodxa = 'AV8B' ");
	}
	strcat(my_sql,"and itmcathg in ('1','2','3','4','5','6','7','8','D','G','M','N',");
	strcat(my_sql,"'P','R','U','X','K','L','AA','AB','AD','AE','Z') ");
	strcat(my_sql,"and refnumha = '");
	strcat(my_sql,(char*) prime.arr);
	strcat(my_sql,"' and cagecdxh = '");
	strcat(my_sql,(char *) prime_cage.arr);
	strcat(my_sql,"'");

	#if DEBUG
		printf("\n\n*** Z9996_check_SE_item*******************************************************");
		printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
		printf("\n******************************************************************************\n\n");
	#endif

	EXEC SQL PREPARE Z9996_check_SE_item_stmnt FROM :my_sql;
	EXEC SQL DECLARE Z9996_check_SE_item_csr CURSOR FOR Z9996_check_SE_item_stmnt;

	EXEC SQL OPEN Z9996_check_SE_item_csr;
	if(sqlca.sqlcode == FND)
	{
		EXEC SQL FETCH Z9996_check_SE_item_csr
						into :temp_refnumha;
		if(sqlca.sqlcode == FND)
		{
			return sqlca.sqlcode;
		}
		else
		{
			if(sqlca.sqlcode == NOT_FND)
			{
				return 1;
			}
			else
			{
				printf("\nZ9996_check_SE_item - FETCH CURSOR");
				printf("\nPrime (%s)",prime.arr);
				printf("\nCage  (%s)",prime_cage.arr);
				printf("\nBad SQLCODE ");
				printf("\nSQL (%s)",my_sql);
				printf("\nSQL (%s)",my_sql);
				A999_02_dberr();
				return sqlca.sqlcode;
			}
		}
	}
	else
	{
		printf("\nZ9996_check_SE_item - OPEN CURSOR");
		printf("\nPrime (%s)",prime.arr);
		printf("\nCage  (%s)",prime_cage.arr);
		printf("\nBad SQLCODE ");
		printf("\nSQL (%s)",my_sql);
		A999_02_dberr();
		return sqlca.sqlcode;
	}


	#if DEBUG
		printf("\n\n*** Z9996_check_SE_item*******************************************************");
		printf("\n*** sql code = %d",sqlca.sqlcode);
		printf("\n*** temp_refnumha = %s", temp_refnumha);
		printf("\n******************************************************************************\n\n");
	#endif

	return sqlca.sqlcode;
}
/*

*/
int	Z9999_chk_alternate(char *cage, char rncc, char rnvc)
{
	int	errcode=1;

	#if DEBUG
		printf("\nZ9999_chk_alternate");
		printf("\ncage (%s)",cage);
		printf("\nrncc (%c)",rncc);
		printf("\nrnvc (%c)",rnvc);
	#endif

	if(rncc=='3' && rnvc=='2')
	{
		errcode=0;
	}

	if(rncc=='3' && rnvc=='1')
	{
		errcode=0;
	}

	if(rncc=='7' && rnvc=='2')
	{
		errcode=0;
	}

	if(rncc=='5' && rnvc=='2')
	{
		errcode=0;
	}

	if(rncc=='C' && rnvc=='1')
	{
		errcode=0;
	}

	if(rncc=='5' && rnvc=='1')
	{
		if(strncmp(cage,"30003",5)==0)
		{
			errcode=0;
		}
		if(strncmp(cage,"80058",5)==0)
		{
			errcode=0;
		}
	}

	if(rncc=='2' && rnvc=='2')
	{
		errcode=0;
	}

	#if DEBUG
		printf("\nerrcoce (%i)",errcode);
	#endif
	return(errcode);
}
/*

*/
int calcNullTerminator(int bufsize, int recsize) {
  assert(bufsize - 1 >= recsize) ;
  return (recsize < bufsize) ? recsize : bufsize - 1 ;
}
int     Z9999_write_gold_cat1_rcds()
{
	int i=0;
	int i1=0;
	int errcode=0;

	#if DEBUG
		printf("\nZ9999_write_gold_cat1_rcds");
		printf("\n$$$$$$$$$$$$$$$$$$Update Code (%c)",update_cat1);
		printf("\ncreate new cat1 (%c)",create_new_cat1);
		printf("\nupdate cat1 (%c)",update_cat1);
		printf("\nvalid scm part (%c)",valid_scm_part);
		printf("\nPart Number (%s)",(char *) part.arr);
		printf("\nPart Cage (%s)",(char *) manufac_cage.arr);
		printf("\nPrime Number (%s)",(char *) prime.arr);
		printf("\nPrime Cage (%s)",(char *) prime_cage.arr);
	#endif

  memset(gold_api_write_area,' ',sizeof(gold_api_write_area));
	errcode = Z9999_confirm_write_to_gold();

	#if DEBUG
		printf("\nConfirm Errcode at Z9999_write_gold_cat1_rcds - (%d)",errcode);
	#endif

	if(errcode == 0)
	{
		if(delimited_file=='N')
		{
			strncpy(Gold68_Cat1_api_rcd.customer,"STL",3);
			strncpy(Gold68_Cat1_api_rcd.table_nbr,"001",3);
			strncpy(Gold68_Cat1_api_rcd.table_name,"CATALOG",7);
			if(create_new_cat1=='Y')
			{
				Gold68_Cat1_api_rcd.update_create_delete='C';
			}
			else
			{
				Gold68_Cat1_api_rcd.update_create_delete='U';
			}
			Gold68_Cat1_api_rcd.eol='\n';
			assert(min(sizeof(Gold68_Cat1_api_rcd),sizeof(gold_api_write_area)) <= sizeof(gold_api_write_area))  ;
      			strncpy(gold_api_write_area,(char *) &Gold68_Cat1_api_rcd,min(sizeof(Gold68_Cat1_api_rcd),sizeof(gold_api_write_area)));
			gold_api_write_area[calcNullTerminator(sizeof(gold_api_write_area), sizeof(Gold68_Cat1_api_rcd))] = '\0';
			assert(strlen(gold_api_write_area) <= sizeof(gold_api_write_area)) ;
		}
		else
		{
			update_cat1='N';
			Gold68_Cat1_delmtd_rcd.eol='\n';
     	strncpy(gold_api_write_area,(char *) &Gold68_Cat1_delmtd_rcd,min(sizeof(Gold68_Cat1_delmtd_rcd), sizeof(gold_api_write_area)));
			gold_api_write_area[calcNullTerminator(sizeof(gold_api_write_area), sizeof(Gold68_Cat1_api_rcd))] = '\0';
			assert(strlen(gold_api_write_area) <= sizeof(gold_api_write_area)) ;
		}


		if(errcode==0)
		{
			errcode=Z9999_write_gold_prc1_rcds();
			#if DEBUG
				printf("\ncount_new_price_rcds (%d)",count_new_price_rcds);
			#endif
			if(count_new_price_rcds==0)
			{
			}
			else
			{
				update_cat1='Y';
			}
		}
	
		if(suplyr_max>0)
		{
			update_cat1='Y';
		}
		strncpy(prev_part,(char *) part.arr,32);
		prev_part[32]='\0';
		strncpy(prev_manufac_cage,(char *) manufac_cage.arr,5);
		prev_manufac_cage[5]='\0';

		strncpy(prev_prime,(char *) prime.arr,32);
		prev_prime[32]='\0';
		strncpy(prev_prime_cage,(char *) prime_cage.arr,5);

		if(errcode == 0)
		{
			/**  If a CATS record needs to change, format and write an API record for it  **/
			#if DEBUG
				printf("\n&&&&&&&&&&&&&&&&&&&&&&&&&&&& CATS FLAG (%c)",update_create_delete_cats);
			#endif
			if(errcode == 0)
			{
				if(update_create_delete_cats != 'N')
				{
					errcode = Z9999_write_gold_cats_rcds();
					update_create_delete_cats = 'N';
				}
			}

			if(errcode == 0)
			{
				errcode=Z9999_write_gold_whse_rcds();
			}
		}
		if(errcode==0 )
		{
			errcode=A5030_build_gold_venc();
		}


		#if DEBUG
			printf("\nWriting CAT Record #######################");
			printf("\nCreate New Flag (%c)",create_new_cat1);
			printf("\nUpdate cat1 (%c)",update_cat1);
			printf("\nvalie scm part (%c)",valid_scm_part);
			printf("\nOutput Gold CAT1 Rcd (%s) ",gold_api_write_area);
		#endif
		if (((create_new_cat1=='Y') || (update_cat1=='Y')) && (valid_scm_part=='Y'))
		{
			if(write_shelf_life == 'Y')
			{
				errcode = Z9999_write_shelf_life_rcd();
				write_shelf_life = 'N';
			}
			#if DEBUG
				printf("\nHAZMAT Code (%c)",Gold68_Cat1_api_rcd.hazardous_material_code[0]);
				printf("\nHAZMAT B    (%c)",Gold68_Cat1_api_rcd.hazardous_material_b);
			#endif
			assert(strlen(gold_api_write_area) <= sizeof(gold_api_write_area)) ;
			i1=fwrite(gold_api_write_area,strlen(gold_api_write_area),1,gold_cat1_rcds_fp);
			if(i1!=1)
			{
				printf("\n**********************************************************");
				printf("\nError writing output gold_cat1_rcds_fp (%d)",i1);
				errcode=510;
			}
			else
			{
				fflush(gold_cat1_rcds_fp);
				gold_cat1_rcds_out++;
			}
		}
	}

	if(errcode == NOT_FND || errcode == 9999)
		errcode = 0;

	return(errcode);
}
/*

*/
int Z9999_write_shelf_life_rcd()
{
	shelf_life_rcd sl_rcd;
	char shelf_life_write_area[200];
	int i = 0;
	int errcode = 0;

	#if DEBUG
		printf("\nZ9999_write_shelf_life_rcd");
	#endif

	memset(&sl_rcd, ' ', sizeof(sl_rcd));
	memset(shelf_life_write_area, ' ', sizeof(shelf_life_write_area));

	strncpy(sl_rcd.part,Gold68_Cat1_api_rcd.part,50);
	sl_rcd.activity_code[0] = shlifeha;
	strncpy(sl_rcd.lead_time,(char *) prdldtha_m.arr,5);
	sl_rcd.update_create_delete = Gold68_Cat1_api_rcd.update_create_delete;
	sl_rcd.eol = '\n';

	strncpy(shelf_life_write_area,(char *) &sl_rcd,sizeof(shelf_life_rcd));
	shelf_life_write_area[calcNullTerminator(sizeof(shelf_life_write_area),sizeof(shelf_life_rcd))]='\0';

	assert(strlen(shelf_life_write_area) <= sizeof(shelf_life_write_area)) ;
	i = fwrite(shelf_life_write_area,strlen(shelf_life_write_area),1,shelf_life_rcds_fp);
	if(i != 1)
	{
		printf("\n******************************************************");
		printf("\nError writing output shelf_life_rcds_fp (%d)",i);
		errcode = 500;
	}
	else
	{
		fflush(shelf_life_rcds_fp);
		shelf_life_rcds_out++;
	}

	return(errcode);
}
/*

*/
int Z9999_write_gold_cats_rcds()
{
	int errcode = 0;
	int i;

	#if DEBUG
		printf("\nZ9999_write_gold_cats_rcds");
		printf("\nsec code (%s)",sec_code.arr);
		printf("\nsec code len(%d)",sec_code.len);
	#endif

  memset(gold_cats_write_area,' ',sizeof(gold_cats_write_area));

	if(delimited_file == 'N')
	{
		strncpy(Gold68_Cats_api_rcd.customer,"STL",3);
		strncpy(Gold68_Cats_api_rcd.part,Gold68_Cat1_api_rcd.part,50);
		strncpy(Gold68_Cats_api_rcd.table_nbr,"004",3);
		strncpy(Gold68_Cats_api_rcd.table_name,"SPECIAL_ATTRIBUTES",18);
		Gold68_Cats_api_rcd.update_create_delete = update_create_delete_cats;
		strncpy(Gold68_Cats_api_rcd.sc,"DEF",3);
		strncpy(Gold68_Cats_api_rcd.category_instrument,"DEF",3);
		if(Gold68_Cats_api_rcd.update_create_delete == 'C')
		  if(Gold68_Cat1_api_rcd.hazardous_material_code[0] != ' ')
		    strncpy(Gold68_Cats_api_rcd.security_code,Gold68_Cat1_api_rcd.hazardous_material_code,strlen(Gold68_Cat1_api_rcd.hazardous_material_code));
		 if(Gold68_Cats_api_rcd.update_create_delete == 'D')
		    strncpy(Gold68_Cats_api_rcd.security_code,(char *) sec_code.arr,sec_code.len);

		Gold68_Cats_api_rcd.eol = '\n';
		strncpy(gold_cats_write_area,(char *) &Gold68_Cats_api_rcd,sizeof(Gold68_Cats_api_rcd));
		gold_cats_write_area[calcNullTerminator(sizeof(gold_cats_write_area),sizeof(Gold68_Cats_api_rcd))] = '\0';
	}

	assert(strlen(gold_cats_write_area) <= sizeof(gold_cats_write_area)) ;
	i = fwrite(gold_cats_write_area,strlen(gold_cats_write_area),1,gold_cats_rcds_fp);
	if(i != 1)
	{
		printf("\n**********************************************************");
		printf("\nError writing output gold_cats_rcds_fp (%d)",i);
		errcode=525;
 	}
 	else
 	{
		#if DEBUG
			printf("\nOutput Gold CATS Rcd (%s) ",gold_cats_write_area);
		#endif
		fflush(gold_cats_rcds_fp);
		gold_cats_rcds_out++;
	}
	return(errcode);
}
/*

*/
int     Z9999_write_gold_venc_rcds()
{
	int     errcode=0;
        int	i=0;
	int	i1=0;

	#if DEBUG
		printf("\nZ9999_write_gold_venc_rcds");
	#endif
  memset(gold_venc_write_area,' ',sizeof(gold_venc_write_area));
/*
	if(memcmp(rcdtype,"Z",1)==0)
	{
		return(errcode);
	} */

	if(strncmp(Gold68_Venc_api_rcd.part,"    ",4)==0)
	{
		#if DEBUG
			printf("\nexiting Z9999_write_gold_venc_rcds....");
			printf("\npart number not found....");
		#endif

		return(errcode);
	}

	if(delimited_file=='Y')
	{
	}
	else
	{
		strncpy(Gold68_Venc_api_rcd.customer,"STL",3);
		strncpy(Gold68_Venc_api_rcd.table_nbr,"008",3);
		strncpy(Gold68_Venc_api_rcd.table_name,"VENDOR_PART",11);
		Gold68_Venc_api_rcd.eol='\n';
		strncpy(gold_venc_write_area,(char *) &Gold68_Venc_api_rcd,sizeof(Gold68_Venc_api_rcd));
		gold_venc_write_area[calcNullTerminator(sizeof(gold_venc_write_area),sizeof(Gold68_Venc_api_rcd))]='\0';
	}

	if(delimited_file=='N')
	{
		Gold68_Venc_api_rcd.update_create_delete='C';
		#if DEBUG
			printf("\nupdate create (%c)",Gold68_Venc_api_rcd.update_create_delete);
			printf("\nupdate_venc ### (%c)",update_venc);
		#endif
		if (update_venc == 'Y')
		{
			Gold68_Venc_api_rcd.update_create_delete='U';
			#if DEBUG
				printf("\nupdate create (%c)",Gold68_Venc_api_rcd.update_create_delete);
			#endif
		}
		Gold68_Venc_api_rcd.eol='\n';
		strncpy(gold_venc_write_area,(char *) &Gold68_Venc_api_rcd,sizeof(Gold68_Venc_api_rcd));
		gold_venc_write_area[calcNullTerminator(sizeof(gold_venc_write_area),sizeof(Gold68_Venc_api_rcd))]='\0';
	}
	else
	{
		Gold68_Venc_delmtd_rcd.eol='\n';
		strncpy(gold_venc_write_area,(char *) &Gold68_Venc_delmtd_rcd,sizeof(Gold68_Venc_delmtd_rcd));
		gold_venc_write_area[calcNullTerminator(sizeof(gold_venc_write_area),sizeof(Gold68_Venc_delmtd_rcd))]='\0';
	}
	#if DEBUG
		printf("\nVenc Count (%d)",gold_venc_count);
		printf("\nvalid scm Part (%c)",valid_scm_part);
		printf("\nupdate_venc (%c)",update_venc);
	#endif
	if(((gold_venc_count==0) || (update_venc=='Y')) && (valid_scm_part=='Y'))
	{
		#if DEBUG
			printf("\nOutput Gold VENC Rcd (%s) ",gold_venc_write_area);
			printf("\nOutput Gold VENC Rcd strlen(gold_venc_write_area)=%d",strlen(gold_venc_write_area));
		#endif
		assert(strlen(gold_venc_write_area) <= sizeof(gold_venc_write_area)) ;
		assert(gold_venc_write_area[strlen(gold_venc_write_area) - 1]  = '\n') ;
		i1=fwrite(gold_venc_write_area,strlen(gold_venc_write_area),1,gold_venc_rcds_fp);
		if(i1!=1)
		{
			printf("\n**********************************************************");
			printf("\nError writing output gold_venc_rcds_fp (%d)",i1);
			errcode=525;
 		}
 		else
 		{
                        fflush(gold_venc_rcds_fp);
			gold_venc_rcds_out++;
		}
 	}

	return(errcode);
}
/*

*/
int     Z9999_write_gold_whse_rcds()
{
	int	i=0;
	int	i1=0;
        int	errcode=0;

	#if DEBUG
		printf("\nZ9999_write_gold_whse_rcds start");
	#endif

	if(delimited_file=='Y')
	{
		strncpy(Gold68_Whse_delmtd_rcd.part,Gold68_Cat1_delmtd_rcd.part,50);
		strncpy(Gold68_Whse_delmtd_rcd.prime,Gold68_Cat1_delmtd_rcd.prime,50);
		strncpy((char *) gold_whse_part.arr,Gold68_Cat1_delmtd_rcd.part,50);
		gold_whse_part.len=50;
		gold_whse_part.arr[50]='\0';
		strncpy((char *) gold_whse_prime.arr,Gold68_Cat1_delmtd_rcd.prime,50);
		gold_whse_prime.len=50;
		gold_whse_prime.arr[50]='\0';
	}
	else
	{
		strncpy(Gold68_Whse_api_rcd.customer,"STL",3);
		strncpy(Gold68_Whse_api_rcd.table_nbr,"009",3);
		strncpy(Gold68_Whse_api_rcd.table_name,"WAREHOUSE",9);
		Gold68_Whse_api_rcd.update_create_delete='C';
		strncpy(Gold68_Whse_api_rcd.part,Gold68_Cat1_api_rcd.part,50);
/*		strncpy(Gold68_Whse_api_rcd.prime,Gold68_Cat1_api_rcd.prime,50); */
		strncpy((char *) gold_whse_part.arr,Gold68_Cat1_api_rcd.part,50);
		gold_whse_part.len=50;
		gold_whse_part.arr[50]='\0';
		strncpy((char *) gold_whse_prime.arr,Gold68_Cat1_api_rcd.prime,50);
		gold_whse_prime.len=50;
		gold_whse_prime.arr[50]='\0';
	}
	for (i=0;i<=seg_code_max;i++)
	{
		#if DEBUG
      printf("\n##########################################gold_whse_part = %s",gold_whse_part.arr);
      printf("\nsos = %2.2s",(char *) &sos.arr);
			printf("\nSeg_code_tble #1-Seg Code (%20.20s)",seg_code_tble[i].sc);
			printf("\nSeg_code_tble #2-Program (%10.10s)",seg_code_tble[i].pgm);
			printf("\nSeg_code_tble #3-Use (%1.1s)",seg_code_tble[i].use);
			printf("\nSeg_code_tble #4-EDI (%1.1s)",seg_code_tble[i].edi);
			printf("\nSeg_code_tble #5-Repair (%1.1s)",seg_code_tble[i].repair);
			printf("\nRepair Item (%c)",repair_item);
		#endif
		strncpy((char *) gold_whse_sc.arr,(char *) seg_code_tble[i].sc,20);
		gold_whse_sc.len=20;
		gold_whse_sc.arr[20]='\0';
		if(strncmp((char *) seg_code_tble[i].use,"Y",1)==0)
		{
			strncpy(Gold68_Whse_api_rcd.ims_designator_code,seg_code_tble[i].ims_des,20);
			if (memcmp((char *) seg_code_tble[i].edi,"N",1)==0)
			{
				if(memcmp((char *) seg_code_tble[i].repair,"Y",1)==0)
				{
					if(repair_item=='Y')
					{
						errcode==Z9999_write_gold_whse_rcds_format();
					}
					else
					{
					}
				}
				else
				{
					errcode=Z9999_write_gold_whse_rcds_format();
				}
			}
		}
	}

	#if DEBUG
		printf("\nZ9999_write_gold_whse_rcds end");
	#endif

	return(errcode);
}

static int min(int i1, int i2) {
  if (i1 <= i2)
    return i1 ;
  else
    return i2 ;  
}

int	Z9999_write_gold_whse_rcds_format()
{
	int	errcode=0;
	int	i=0;
	int	i1=0;

  memset(gold_whse_write_area,' ',sizeof(gold_whse_write_area));

	if(memcmp(rcdtype,"Z",1)==0)
	{
		return(errcode);
	}


	#if DEBUG
		printf("\nZ9999_write_gold_whse_rcds_format");
		printf("\nSeg Code (%s) (%d)",(char *) gold_whse_sc.arr,gold_whse_sc.len);
	#endif
	errcode=Z9995_check_whse();
	#if DEBUG
          printf("\nZ9999_write_gold_whse_rcds_format sc_exists=%c errcode=%d FND=%d", sc_exists, errcode, FND);
	#endif
	if(sc_exists=='N' &&
	   errcode==FND)
	{
	  #if DEBUG
            printf("\nZ9999_write_gold_whse_rcds_format delimited_file=%c", delimited_file);
	  #endif
	  if(delimited_file=='Y')
	  {
             strncpy(Gold68_Whse_delmtd_rcd.sc,(char *) gold_whse_sc.arr,sizeof(Gold68_Whse_delmtd_rcd.sc));
	     Gold68_Whse_delmtd_rcd.eol='\n';
             strncpy(gold_whse_write_area,(char *) &Gold68_Whse_delmtd_rcd,min(sizeof(Gold68_Whse_delmtd_rcd), sizeof(gold_whse_write_area)));
	     gold_whse_write_area[calcNullTerminator(sizeof(gold_whse_write_area),sizeof(Gold68_Whse_delmtd_rcd))]='\0';
	  }
	  else
	  {
    		strncpy(Gold68_Whse_api_rcd.sc,(char *) gold_whse_sc.arr,sizeof(Gold68_Whse_delmtd_rcd.sc));
		Gold68_Whse_api_rcd.eol='\n';
                strncpy(gold_whse_write_area,(char *) &Gold68_Whse_api_rcd,min(sizeof(Gold68_Whse_api_rcd),sizeof(gold_whse_write_area)));
		gold_whse_write_area[calcNullTerminator(sizeof(gold_whse_write_area),sizeof(Gold68_Whse_api_rcd))] = '\0';
	  }

  	#if DEBUG
          printf("\nsizeof(gold_whse_write_area)=%d stlen(gold_whse_write_area)=%d ",sizeof(gold_whse_write_area), strlen(gold_whse_write_area));
	  printf("\nOutput Gold Whse Rcd (%s) ",gold_whse_write_area);
	#endif

       if (gold_whse_rcds_fp != NULL) {
        assert(strlen(gold_whse_write_area) <= sizeof(gold_whse_write_area)) ;
        i1=fwrite(gold_whse_write_area,min(sizeof(gold_whse_write_area),strlen(gold_whse_write_area)),1,gold_whse_rcds_fp);
       } else {
         i1 = 0 ;
       } 

		if(i1!=1)
		{
			printf("\n**********************************************************");
			printf("\nError writing output gold_whse_rcds_fp (%d)",i1);
			errcode=526;
		}
		else
		{
			fflush(gold_whse_rcds_fp);
			gold_whse_rcds_out++;
		}
	}

	return(errcode);
}
/*

*/
int     Z9999_write_gold_prc1_rcds()
{
	int	i=0;
	int	i1=0;
        int	errcode=0;

	#if DEBUG
		printf("\nZ9999_write_gold_prc1_rcds");
		printf("\nGold68_Cat_api_rcd.part (%s)",Gold68_Cat1_api_rcd.part);
	#endif

	count_new_price_rcds=0;
	if(delimited_file=='Y')
	{
    REC2REC(Gold68_Prc1_delmtd_rcd.part,Gold68_Cat1_delmtd_rcd.part) ;
		SETVCHAR(gold_prc1_part,Gold68_Cat1_delmtd_rcd.part);
		SETVCHAR(gold_prc1_cage,Gold68_Cat1_delmtd_rcd.manuf_cage);
		SETVCHAR(part,Gold68_Cat1_api_rcd.part);
	}
	else
	{
		memset(&Gold68_Prc1_api_rcd, ' ', sizeof(Gold68_Prc1_api_rcd));
		strncpy(Gold68_Prc1_api_rcd.customer,"STL",3);
		strncpy(Gold68_Prc1_api_rcd.table_nbr,"105",3);
		strncpy(Gold68_Prc1_api_rcd.table_name,"PRICES",6);
		Gold68_Prc1_api_rcd.update_create_delete='C';
    REC2REC(Gold68_Prc1_api_rcd.part,Gold68_Cat1_api_rcd.part);
		SETVCHAR(gold_prc1_part,Gold68_Cat1_api_rcd.part);
		SETVCHAR(part,Gold68_Cat1_api_rcd.part);
		SETVCHAR(gold_prc1_cage,Gold68_Cat1_api_rcd.manuf_cage);
	}
	errcode=Z9995_check_slic_gfp_price();
	if(errcode==0)
	{
		for (i=0;i<=seg_code_max;i++)
		{
			#if DEBUG
				printf("\nSeg_code_tble #1 (%20.20s)",seg_code_tble[i].sc);
				printf("\nSeg_code_tble #2 (%10.10s)",seg_code_tble[i].pgm);
				printf("\nSeg_code_tble #3 (%1.1s)",seg_code_tble[i].use);
				printf("\nSeg_code_tble #4 (%1.1s)",seg_code_tble[i].edi);
				printf("\nSeg_code_tble #5 (%1.1s)",seg_code_tble[i].repair);
				printf("\nRepair Item (%c)",repair_item);
			#endif
			if(strncmp((char *) seg_code_tble[i].use,"Y",1)==0)
			{
				 if (memcmp((char *) seg_code_tble[i].edi,"N",1)==0)
				{
					strncpy((char *) gold_prc1_sc.arr,(char *) seg_code_tble[i].sc,20);
					gold_prc1_sc.len=20;
					gold_prc1_sc.arr[20]='\0';
					if(memcmp((char *) seg_code_tble[i].repair,"Y",1)==0)
					{
						if(repair_item=='Y')
						{
							errcode==Z9999_write_gold_prc1_rcds_format();
						}
					}
					else
					{
						errcode=Z9999_write_gold_prc1_rcds_format();
					}
				}
			}
		}
	}
	return(errcode);
}
int     Z9999_write_gold_prc1_rcds_format()
{
	int	errcode=0;
	int	i1=0;
	char sc_sm[4];

  memset(gold_prc1_write_area,' ',sizeof(gold_prc1_write_area));
	if(memcmp(rcdtype,"Z",1)==0)
	{
		return(errcode);
	}


	#if DEBUG
		printf("\nZ9999_write_gold_prc1_rcds_format");
		printf("\nSC (%s)",gold_prc1_sc.arr);
	#endif

	sc_exists='N';

	if(strncmp((char *) &gold_prc1_sc.arr[9],"VRT",3) == 0)
		return(errcode);

	#if DEBUG
		printf("\nsc_exists (%c)",sc_exists);
		printf("\nFND (%d)",errcode);
	#endif

	if(sc_exists=='N')
	{
		if(delimited_file=='Y')
		{
			strncpy(Gold68_Prc1_delmtd_rcd.sc,(char *) gold_prc1_sc.arr,20);
			memcpy(Gold68_Prc1_delmtd_rcd.gfp_price,&unit_price.arr[1],15);
			Gold68_Prc1_delmtd_rcd.eol='\n';
			strncpy(gold_prc1_write_area,(char *) &Gold68_Prc1_delmtd_rcd,sizeof(Gold68_Prc1_delmtd_rcd));
			gold_prc1_write_area[calcNullTerminator(sizeof(gold_prc1_write_area),sizeof(Gold68_Prc1_delmtd_rcd))]='\0';
		}
		else
		{
			strncpy(Gold68_Prc1_api_rcd.sc,(char *) gold_prc1_sc.arr,20);
			memcpy(Gold68_Prc1_api_rcd.gfp_price,&unit_price.arr[1],15);
			Gold68_Prc1_api_rcd.eol='\n';
			#if DEBUG
				printf("\nPRC1 CUSTOMER   (%20.20s)",Gold68_Prc1_api_rcd.customer);
				printf("\nPRC1 PART       (%50.50s)",Gold68_Prc1_api_rcd.part);
				printf("\nPRC1 SC         (%20.20s)",Gold68_Prc1_api_rcd.sc);
				printf("\nPRC1 TABLE NBR  (%3.3s)",Gold68_Prc1_api_rcd.table_nbr);
				printf("\nPRC1 TABLE NAME (%30.30s)",Gold68_Prc1_api_rcd.table_name);
				printf("\nPRC1 UC FLAG    (%c)",Gold68_Prc1_api_rcd.update_create_delete);
				printf("\nPRC1 CMAV       (%15.15s)",Gold68_Prc1_api_rcd.cmav);
				printf("\nPRC1 CAP PRICE  (%15.15s)",Gold68_Prc1_api_rcd.cap_price);
				printf("\nPRC1 GFP PRICE  (%15.15s)",Gold68_Prc1_api_rcd.gfp_price);
				printf("\nPRC1 PRICE1     (%15.15s)",Gold68_Prc1_api_rcd.price1);
				printf("\nPRC1 PRICE2     (%15.15s)",Gold68_Prc1_api_rcd.price2);
				printf("\nPRC1 PRICE3     (%15.15s)",Gold68_Prc1_api_rcd.price3);
				printf("\nPRC1 PRICE4     (%15.15s)",Gold68_Prc1_api_rcd.price4);
				printf("\nPRC1 PRICE5     (%15.15s)",Gold68_Prc1_api_rcd.price5);
				printf("\nPRC1 PRICE6     (%15.15s)",Gold68_Prc1_api_rcd.price6);
				printf("\nPRC1 PRICE7     (%15.15s)",Gold68_Prc1_api_rcd.price7);
				printf("\nPRC1 PRICE8     (%15.15s)",Gold68_Prc1_api_rcd.price8);
				printf("\nPRC1 PRICE9     (%15.15s)",Gold68_Prc1_api_rcd.price9);
				printf("\nPRC1 PRICE10    (%15.15s)",Gold68_Prc1_api_rcd.price10);
				printf("\nPRC1 PRICE11    (%15.15s)",Gold68_Prc1_api_rcd.price11);
				printf("\nPRC1 PRICE12    (%15.15s)",Gold68_Prc1_api_rcd.price12);
				printf("\nPRC1 PRICE DATE (%10.10s)",Gold68_Prc1_api_rcd.price_date);
				printf("\nPRC1 PRICE TYPE (%20.20s)",Gold68_Prc1_api_rcd.price_type);
			#endif
			strncpy(gold_prc1_write_area,(char *) &Gold68_Prc1_api_rcd,sizeof(Gold68_Prc1_api_rcd));
			gold_prc1_write_area[calcNullTerminator(sizeof(gold_prc1_write_area),sizeof(Gold68_Prc1_api_rcd))]='\0';
		}

		#if DEBUG
			printf("\nOutput Gold Prc1 Rcd (%s) ",gold_prc1_write_area);
		#endif

		count_new_price_rcds++;

                assert(strlen(gold_prc1_write_area) <= sizeof(gold_prc1_write_area)) ;
		i1=fwrite(gold_prc1_write_area,strlen(gold_prc1_write_area),1,gold_prc1_rcds_fp);

		if(i1!=1)
		{
			printf("\n**********************************************************");
			printf("\nError writing output gold_prc1_rcds_fp (%d)",i1);
			errcode=526;
		}
		else
		{
	        fflush(gold_prc1_rcds_fp);
			gold_prc1_rcds_out++;
		}
	}

	return(errcode);
}
/*

*/
int Z9999_confirm_write_to_gold()
{
	int errcode = 9999;
	char itmcathg[3];
	char my_sql[500];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nZ9999_confirm_write_to_gold");
		printf("\ncreate_new_cat1 (%c)",create_new_cat1);
		printf("\naaplccha (%c)",aaplccha);
		printf("\nCog Code (%2.2s)",Gold68_Cat1_api_rcd.cognizance_code);
		printf("\nSMR Code (%2.2s)",Gold68_Cat1_api_rcd.smrc);
	#endif

	if(create_new_cat1 == 'Y')
	{
		if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
		{
			errcode=Z9999_confirm_write_to_gold_chk_cog_icc();
		}
		else
		{
			if(aaplccha != 'A')
			{
				errcode=Z9999_confirm_write_to_gold_chk_cog_icc();
			}
		}
	}
	else
		errcode = 0;

	#if DEBUG
		printf("\nConfirm Errcode at Z9999_confirm_write_to_gold - (%d)",errcode);
	#endif
	return(errcode);
}
/*

*/
int Z9999_confirm_write_to_gold_chk_cog_icc()
{
	int errcode = 9999;
	char itmcathg[3];
	char my_sql[500];

	memset(my_sql,' ',sizeof(my_sql));

	#if DEBUG
		printf("\nZ9999_confirm_write_to_gold_chk_cog_icc");
		printf("\ncreate_new_cat1 (%c)",create_new_cat1);
		printf("\naaplccha (%c)",aaplccha);
		printf("\nCog Code (%2.2s)",Gold68_Cat1_api_rcd.cognizance_code);
		printf("\nSMR Code (%2.2s)",Gold68_Cat1_api_rcd.smrc);
	#endif

	if(Gold68_Cat1_api_rcd.cognizance_code[0] == '9')
		errcode = 0;
	else
	{
		#if DEBUG
			printf("\nZ9999_confirm_write_to_gold_chk_cog_icc");
			printf("\nCog Code not equal '9'");
		#endif
		if(Gold68_Cat1_api_rcd.smrc[0] == 'P')
			errcode = 0;
		else
		{
			/* Query for valid ICCs */
			strcpy(my_sql,"select itmcathg ");
			strcat(my_sql,"from ");
			strcat(my_sql,(char*) processing_mdl.arr);
			strcat(my_sql,"_hg ");
			strcat(my_sql,"where refnumha = rpad('");
			strcat(my_sql,(char*) part.arr);
			strcat(my_sql,"',32,' ') ");
			strcat(my_sql,"and itmcathg in ('4','7','8','G','H','X','AB')");
			errcode = sqlca.sqlcode;

			EXEC SQL PREPARE Z9999_confirm_write_to_gold_stmnt FROM :my_sql;
			EXEC SQL DECLARE Z9999_confirm_write_to_gold_csr CURSOR FOR Z9999_confirm_write_to_gold_stmnt;

			EXEC SQL OPEN Z9999_confirm_write_to_gold_csr;

			EXEC SQL FETCH Z9999_confirm_write_to_gold_csr
				into :itmcathg;

			#if DEBUG
				printf("\n\n*** Z9999_confirm_write_to_gold_chk_cog_icc*********************************");
				printf("\n*** dynamic sql = %s string length = %d",my_sql,strlen(my_sql));
				printf("\n*** sqlcode = %d",sqlca.sqlcode);
				printf("\n*** itmcathg = %s",itmcathg);
				printf("\n******************************************************************************\n\n");
			#endif

			if(sqlca.sqlcode == FND || sqlca.sqlcode == MULTI_ROWS ||sqlca.sqlcode==NOT_FND)
				errcode = 0;
			else if(sqlca.sqlcode != NOT_FND)
				db_err("Z9999_confirm_write_to_gold_chk_cog_icc");
		}
	}
	#if DEBUG
		printf("\nConfirm Errcode Z9999_confirm_write_to_gold_chk_cog_icc - (%d)",errcode);
	#endif

	return(errcode);
}
/*

*/
int	Z9999_initialize_cat1()
{

        int	errcode=0;
	#if DEBUG
		printf("\nZ9999_initialize_cat1");
	#endif

  memset(&Gold68_Cat1_api_rcd,' ',sizeof(Gold68_Cat1_api_rcd)) ;

	if(delimited_file=='N')
	{
		Gold68_Cat1_api_rcd.eol='\0';
		memset (Gold68_Cat1_api_rcd.customer,' ',sizeof(Gold68_Cat1_api_rcd.customer));
	}
	else
	{
		Gold68_Cat1_delmtd_rcd.eol='\0';
		memset (Gold68_Cat1_delmtd_rcd.part,' ',sizeof(Gold68_Cat1_delmtd_rcd.part));
		Gold68_Cat1_delmtd_rcd.start_quote='"';
		Gold68_Cat1_delmtd_rcd.end_quote='"';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr01,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr02,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr02a,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr03,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr04,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr05,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr06,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr07,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr08,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr09,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr10,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr11,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr12,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr13,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr14,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr15,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr16,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr17,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr18,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr19,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr20,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr21,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr22,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr23,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr24,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr25,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr26,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr27,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr28,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr29,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr30,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr31,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr32,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr33,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr34,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr35,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr36,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr37,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr38,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr39,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr40,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr41,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr42,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr43,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr44,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr45,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr46,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr47,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr48,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr49,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr50,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr51,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr52,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr53,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr54,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr54a,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr55,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr56,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr57,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr58,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr59,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr60,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr61,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr62,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr63,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr64,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr65,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr66,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr67,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr68,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr69,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr70,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr71,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr72,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr73,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr74,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr75,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr76,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr77,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr78,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr79,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr80,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr81,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr82,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr83,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr84,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr85,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr86,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr87,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr88,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr89,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr90,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr91,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr92,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr93,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr94,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr95,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr96,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr97,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr98,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr99,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr100,"\",\"",3);

		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr101,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr102,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr103,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr104,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr105,"\",\"",3);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.delimitr106,"\",\"",3);

/*
	the following code is used for validating the alignment of the data to an
	EXCEL spreadsheet.  The info being moved should correspond to a column in
	the Spreadsheet    */

/*
		strncpy((char *) Gold68_Cat1_delmtd_rcd.part,"A ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.nsn,"B ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.nsn_smic,"C ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.noun,"D ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.prime,"E ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.noun_mod_1,"F ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.noun_mod_2,"G ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.created_datetime,"H ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.smrc,"I ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.errc,"J ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_show_code,"K ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_issue_code,"L ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_issue_show_count,"M ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_issue_code_count,"N ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_issue_factor,"O ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_turn_code,"P ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_turn_show_count,"Q ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_turn_code_count,"R ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_turn_factor,"S ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_disp_code,"T ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_disp_show_count,"U ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_disp_code_count,"V ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_disp_factor,"W ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_cap_code,"X ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_cap_show_count,"Y ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_cap_code_count,"Z ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_cap_factor,"AA",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_mil_code,"AB",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_mil_show_count,"AC",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_mil_code_count,"AD",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.um_mil_factor,"AE",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.created_userid,"AF",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ave_cap_lead_time,"AG",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ave_mil_lead_time,"AH",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.category_instrument,"AI",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.last_changed_userid,"AJ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.last_changed_datetime,"AK",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.security_code,"L",1);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.source_code,"AM",2);
		Gold68_Cat1_delmtd_rcd.order_cap_b='N';
		Gold68_Cat1_delmtd_rcd.order_gfp_b='O';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.exp_warranty_code,"AP",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.buyer,"AQ",2);
		Gold68_Cat1_delmtd_rcd.status_type='R';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.cognizance_code,"AS",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.abbr_part,"AT",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref1,"AU",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref2,"AV",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref3,"AW",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref4,"AX",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref5,"AY",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref6,"AZ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ship_reps_code,"BA",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ship_reps_priority,"BB",2);
		Gold68_Cat1_delmtd_rcd.delete_when_gone='C';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.asset_req_on_receipt,"BD",2);
		Gold68_Cat1_delmtd_rcd.record_changed1_yn='E';
		Gold68_Cat1_delmtd_rcd.record_changed2_yn='F';
		Gold68_Cat1_delmtd_rcd.record_changed3_yn='G';
		Gold68_Cat1_delmtd_rcd.record_changed4_yn='H';
		Gold68_Cat1_delmtd_rcd.record_changed5_yn='I';
		Gold68_Cat1_delmtd_rcd.record_changed6_yn='J';
		Gold68_Cat1_delmtd_rcd.record_changed7_yn='K';
		Gold68_Cat1_delmtd_rcd.record_changed8_yn='L';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.nin,"BM",2);
		Gold68_Cat1_delmtd_rcd.tracked_b='N';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.dodic,"BO",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.cfa,"BP",2);
		Gold68_Cat1_delmtd_rcd.part_make_b='Q';
		Gold68_Cat1_delmtd_rcd.part_buy_b='R';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.remarks,"BS",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ims_designator_code,"BT",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.demilitarization_code,"BU",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.hazardous_material_code,"BV",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.pmi_code,"BW",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.critical_item_code,"BX",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.inv_class_code,"BY",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.data_chapter_no,"BZ",2);
		Gold68_Cat1_delmtd_rcd.hazardous_material_b='A';
		Gold68_Cat1_delmtd_rcd.lot_batch_mandatory_b='B';
		Gold68_Cat1_delmtd_rcd.serial_mandatory_b='C';
		Gold68_Cat1_delmtd_rcd.key_ref_mandatory_b='D';
		Gold68_Cat1_delmtd_rcd.core_exc_req_b='E';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.tec,"CF",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.wip_type,"CG",2);
		Gold68_Cat1_delmtd_rcd.order_com_b='H';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ave_com_lead_time,"CI",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.manuf_cage,"CJ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.depr_pct_override,"CK",2);
		Gold68_Cat1_delmtd_rcd.min_equipment_list_b='L';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.compressed_part,"CM",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ave_bld_lead_time,"CN",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ave_rep_lead_time,"CO",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.ave_vrep_lead_time,"CP",2);
		Gold68_Cat1_delmtd_rcd.budget_code='Q';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.isgp_group_no,"CS",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref7,"CT",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref8,"CU",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref9,"CV",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref10,"CW",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref11,"CX",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref12,"CY",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref13,"CZ",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref14,"DA",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.user_ref15,"DB",2);
		Gold68_Cat1_delmtd_rcd.agency_peculiar_b='C';
		strncpy((char *) Gold68_Cat1_delmtd_rcd.es_designator_code,"DD",2);
		strncpy((char *) Gold68_Cat1_delmtd_rcd.cat1_profile,"DE",2);
		Gold68_Cat1_delmtd_rcd.mils_auto_process_b='F';
	*/
	}

	return(errcode);
}
int Z9999_initialize_cats()
{

	int errcode=0;
	#if DEBUG
		printf("\nZ9999_initialize_cats");
	#endif

  memset(&Gold68_Cats_api_rcd,' ',sizeof(Gold68_Cats_api_rcd)) ;

	if(delimited_file=='N')
	{
		Gold68_Cats_api_rcd.eol='\0';
		memset (Gold68_Cats_api_rcd.customer,' ',sizeof(Gold68_Cats_api_rcd.customer));
	}

	return(errcode);
}
int	Z9999_initialize_venc()
{
        int	errcode=0;
	#if DEBUG
		printf("\nZ9999_initialize_venc");
	#endif

  memset(&Gold68_Venc_api_rcd,' ',sizeof(Gold68_Venc_api_rcd)) ;

	if(delimited_file=='N')
	{
		Gold68_Venc_api_rcd.eol='\0';
		memset (Gold68_Venc_api_rcd.sort_cage,' ',sizeof(Gold68_Venc_api_rcd.sort_cage));
	}
	else
	{
		Gold68_Venc_delmtd_rcd.eol='\0';
		memset (Gold68_Venc_delmtd_rcd.sort_cage,' ',sizeof(Gold68_Venc_delmtd_rcd.sort_cage));

		Gold68_Venc_delmtd_rcd.start_quote='"';
		Gold68_Venc_delmtd_rcd.end_quote='"';

		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr01,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr02,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr03,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr04,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr04a,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr05,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr06,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr07,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr08,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr09,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr10,"\",\"",3);

		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr11,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr12,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr13,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr14,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr15,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr16,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr17,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr18,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr19,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr20,"\",\"",3);

		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr21,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr22,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr23,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr24,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr25,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr26,"\",\"",3);
		strncpy((char *) Gold68_Venc_delmtd_rcd.delimitr27,"\",\"",3);

/*
	the following code is used for validating the alignment of the data to an
	EXCEL spreadsheet.  The info being moved should correspond to a column in
	the Spreadsheet    */

/*
		strncpy((char *) Gold68_Venc_delmtd_rcd.part,"A ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.seq,"B ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.vendor_part,"C ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.vendor_code,"D ",2);
		Gold68_Venc_delmtd_rcd.vendor_flag='E';
		strncpy((char *) Gold68_Venc_delmtd_rcd.last_order_price,"F ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.vendor_model,"G ",2);
		Gold68_Venc_delmtd_rcd.approved_vendor_b='H';
		strncpy((char *) Gold68_Venc_delmtd_rcd.approved_date,"I ",2);
		Gold68_Venc_delmtd_rcd.agency_approved_b='J';
		Gold68_Venc_delmtd_rcd.preferred_vendor_b='K';
		strncpy((char *) Gold68_Venc_delmtd_rcd.last_order_date,"L ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.list_price,"M ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.list_price_date,"N ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.list_price_valid_date,"O ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.customer_discount,"P ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.customer_cost,"Q ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.total_deliveries,"S ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.late_deliveries,"T ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.system_calc_leadtime,"U ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.vendor_leadtime,"V ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.turnaround_time,"W ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.priority,"X ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.cost,"Y ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.lead_time,"Z ",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.agency_approved_date,"AA",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.minimum_order_qty,"AB",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.total_days_late,"AC",2);
		strncpy((char *) Gold68_Venc_delmtd_rcd.total_leadtime,"AD",2);

*/
	}

	return(errcode);
}
int	Z9999_initialize_whse()
{
        int	errcode=0;
	#if DEBUG
		printf("\nZ9999_initialize_whse");
	#endif

  memset(&Gold68_Whse_api_rcd,' ',sizeof(Gold68_Whse_api_rcd)) ;

	if(delimited_file=='N')
	{
		Gold68_Whse_api_rcd.eol='\0';
		memset (Gold68_Whse_api_rcd.customer,' ',sizeof(Gold68_Whse_api_rcd.customer));
	}
	else
	{
		Gold68_Whse_delmtd_rcd.eol='\0';
		memset (Gold68_Whse_delmtd_rcd.part,' ',sizeof(Gold68_Whse_delmtd_rcd.part));
		Gold68_Whse_delmtd_rcd.start_quote='"';
		Gold68_Whse_delmtd_rcd.end_quote='"';
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr01,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr02,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr03,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr04,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr05,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr06,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr07,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr08,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr09,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr10,"\",\"",3);

		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr11,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr12,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr13,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr14,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr15,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr16,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr17,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr18,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr19,"\",\"",3);

		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr20,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr21,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr22,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr23,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr24,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr25,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr26,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr27,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr28,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr29,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr30,"\",\"",3);

		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr31,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr32,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr33,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr34,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr35,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr36,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr37,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr38,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr39,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr40,"\",\"",3);

		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr41,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr42,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr43,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr44,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr45,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr46,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr47,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr48,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr49,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr50,"\",\"",3);

		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr51,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr52,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr53,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr54,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr55,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr56,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr57,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr58,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr59,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr60,"\",\"",3);

		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr61,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr62,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr63,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr64,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr65,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr66,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr67,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr68,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr69,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr70,"\",\"",3);

		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr71,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr72,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr73,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr74,"\",\"",3);
		strncpy((char *) Gold68_Whse_delmtd_rcd.delimitr75,"\",\"",3);

/*
	the following code is used for validating the alignment of the data to an
	EXCEL spreadsheet.  The info being moved should correspond to a column in
	the Spreadsheet    */

/*
		strncpy((char *) Gold68_Whse_delmtd_rcd.part,"A ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.sc,"B ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.prime,"C ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref1,"D ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref2,"E ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref3,"F ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref4,"G ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref5,"H ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref6,"I ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref7,"J ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref8,"K ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref9,"L ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref10,"M ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref11,"N ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref12,"O ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref13,"P ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref14,"Q ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.user_ref15,"R ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.stock_level,"S ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.reorder_point,"T ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.price_cap,"U ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.price_gfp,"V ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.price_actual,"W ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.price_ave,"X ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.price_last_receipt,"Y ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_physical_qty,"Z ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_physical_date,"AA",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.created_datetime,"AB",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.created_userid,"AC",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_changed_datetime,"AD",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_changed_userid,"AE",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.price_changed_datetime,"AF",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.price_changed_userid,"AG",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.date_last_issue,"AH",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.date_last_activity,"AI",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.mur,"AJ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.mur_start_date,"AK",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.mur_end_date,"L",1);
		strncpy((char *) Gold68_Whse_delmtd_rcd.mdr,"AM",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.mdr_start_date,"AN",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.mdr_end_date,"AO",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.remarks,"AP",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.default_bin,"AQ",2);
		Gold68_Whse_delmtd_rcd.archive_yn='R';
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_archive_datetime,"AS",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.govg_1662_type,"AT",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.govg_price,"AU",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.govg_qty,"AV",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.govc_1662_type,"AW",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.govc_price,"AX",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.govc_qty,"AY",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.usage_mrl_percent,"AZ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.freeze_codes,"BA",2);
		Gold68_Whse_delmtd_rcd.record_changed1_yn='B';
		Gold68_Whse_delmtd_rcd.record_changed2_yn='C';
		Gold68_Whse_delmtd_rcd.record_changed3_yn='D';
		Gold68_Whse_delmtd_rcd.record_changed4_yn='E';
		Gold68_Whse_delmtd_rcd.record_changed5_yn='F';
		Gold68_Whse_delmtd_rcd.record_changed6_yn='G';
		Gold68_Whse_delmtd_rcd.record_changed7_yn='H';
		Gold68_Whse_delmtd_rcd.record_changed8_yn='I';
		strncpy((char *) Gold68_Whse_delmtd_rcd.auth_allow,"BJ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.best_estimate_qty,"BK",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.qty_per_assembly,"BL",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_acquisition_price,"BM",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.stock_level_floor,"BN",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.stock_level_ceiling,"BO",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.stock_level_additive,"BP",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_level_userid,"BQ",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_level_method,"BR",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.last_level_datetime,"BS",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.computed_ord_qty,"BT",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.computed_exc_oh_qty,"BU",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.computed_exc_di_qty,"BV",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.min_ord_qty,"BW",2);
		strncpy((char *) Gold68_Whse_delmtd_rcd.c_elin,"BX",2);
	*/
	}


	return(errcode);
}
int	Z9999_initialize_prc1()
{
        int	errcode=0;
	#if DEBUG
		printf("\nZ9999_initialize_prc1");
	#endif

  memset(&Gold68_Prc1_api_rcd,' ',sizeof(Gold68_Prc1_api_rcd)) ;

	if(delimited_file=='N')
	{
		Gold68_Prc1_api_rcd.eol='\0';
		memset (Gold68_Prc1_api_rcd.customer,' ',sizeof(Gold68_Prc1_api_rcd.customer));
		#if DEBUG
			printf("\nPRC1 CUSTOMER   (%20.20s)",Gold68_Prc1_api_rcd.customer);
			printf("\nPRC1 PART       (%50.50s)",Gold68_Prc1_api_rcd.part);
			printf("\nPRC1 SC         (%20.20s)",Gold68_Prc1_api_rcd.sc);
			printf("\nPRC1 TABLE NBR  (%3.3s)",Gold68_Prc1_api_rcd.table_nbr);
			printf("\nPRC1 TABLE NAME (%30.30s)",Gold68_Prc1_api_rcd.table_name);
			printf("\nPRC1 UC FLAG    (%c)",Gold68_Prc1_api_rcd.update_create_delete);
			printf("\nPRC1 CMAV       (%15.15s)",Gold68_Prc1_api_rcd.cmav);
			printf("\nPRC1 CAP PRICE  (%15.15s)",Gold68_Prc1_api_rcd.cap_price);
			printf("\nPRC1 GFP PRICE  (%15.15s)",Gold68_Prc1_api_rcd.gfp_price);
			printf("\nPRC1 PRICE1     (%15.15s)",Gold68_Prc1_api_rcd.price1);
			printf("\nPRC1 PRICE2     (%15.15s)",Gold68_Prc1_api_rcd.price2);
			printf("\nPRC1 PRICE3     (%15.15s)",Gold68_Prc1_api_rcd.price3);
			printf("\nPRC1 PRICE4     (%15.15s)",Gold68_Prc1_api_rcd.price4);
			printf("\nPRC1 PRICE5     (%15.15s)",Gold68_Prc1_api_rcd.price5);
			printf("\nPRC1 PRICE6     (%15.15s)",Gold68_Prc1_api_rcd.price6);
			printf("\nPRC1 PRICE7     (%15.15s)",Gold68_Prc1_api_rcd.price7);
			printf("\nPRC1 PRICE8     (%15.15s)",Gold68_Prc1_api_rcd.price8);
			printf("\nPRC1 PRICE9     (%15.15s)",Gold68_Prc1_api_rcd.price9);
			printf("\nPRC1 PRICE10    (%15.15s)",Gold68_Prc1_api_rcd.price10);
			printf("\nPRC1 PRICE11    (%15.15s)",Gold68_Prc1_api_rcd.price11);
			printf("\nPRC1 PRICE12    (%15.15s)",Gold68_Prc1_api_rcd.price12);
			printf("\nPRC1 PRICE DATE (%10.10s)",Gold68_Prc1_api_rcd.price_date);
			printf("\nPRC1 PRICE TYPE (%20.20s)",Gold68_Prc1_api_rcd.price_type);
		#endif
	}
	else
	{
		Gold68_Prc1_delmtd_rcd.eol='\0';
		memset (Gold68_Prc1_delmtd_rcd.sc,' ',sizeof(Gold68_Prc1_delmtd_rcd.sc));
		Gold68_Prc1_delmtd_rcd.start_quote='"';
		Gold68_Prc1_delmtd_rcd.end_quote='"';
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr01,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr02,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr03,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr04,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr05,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr06,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr07,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr08,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr09,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr10,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr11,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr12,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr13,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr14,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr15,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr16,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr17,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr18,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr19,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr20,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr21,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr22,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr23,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr24,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr25,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr26,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr27,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr28,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr29,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr30,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr31,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr32,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr33,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr34,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr35,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr36,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr37,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr38,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr39,"\",\"",3);
		strncpy((char *) Gold68_Prc1_delmtd_rcd.delimitr40,"\",\"",3);
	}

	return(errcode);
}
/*

*/
int	Z9999_initialize_gold_variables()
{
        int	errcode=0;
	#if DEBUG
		printf("\nZ9999_gold_variables");
	#endif

	INITVCHAR(gold_um_issue_code) ;
	INITVCHAR(gold_um_show_code) ;
	INITVCHAR(gold_um_mil_show_count) ;
	INITVCHAR(gold_um_mil_code_count) ;
	INITVCHAR(gold_um_mil_factor) ;
	INITVCHAR(gold_noun);
	INITVCHAR(gold_manuf_cage) ;
	INITVCHAR(gold_nsn) ;
	INITVCHAR(gold_ave_cap_lead_time) ;
	gold_security_code=' ';
	INITVCHAR(gold_pmi_code) ;
	INITVCHAR(gold_demilitarization_code) ;
	INITVCHAR(gold_hazardous_material_code) ;
	INITVCHAR(gold_critical_item_code) ;
	INITVCHAR(gold_cognizance_code) ;
	INITVCHAR(gold_smr_code) ;
	INITVCHAR(gold_source_code) ;
	INITVCHAR(gold_ims_designator_code) ;
	INITVCHAR(gold_nsn_smic) ;
	INITVCHAR(gold_cat1_profile) ;

	return(errcode);
}
