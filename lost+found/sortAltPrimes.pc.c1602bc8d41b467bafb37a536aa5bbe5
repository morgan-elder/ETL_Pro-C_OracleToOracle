/*     Program - Prime and Alternate Parts Sort  */
/*
 **************************************************************************
 *  PROGRAM NAME: sortAltPrimes.c
 *
 *  PURPOSE: The purpose of this program is to sort the CAT1 records by 
 *           prime parts and alternate parts.
 *
 *  INPUTS:   1. Unsorted CAT1 Activity file from the Format program
 *
 *
 *  OUTPUTS:  1. CAT1 Activity file sorted by Primes and Alternates.
 *
 *
 *  CHANGE HISTORY:
 *   REV     DATE    Programmer                 CHANGE
 *   ---  --------   ----------------------     ------
 *    00  08/23/01   Ben Barth                  Initial coding
 **************************************************************************
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "gold685_cat1_api.h"

/* File Pointer Definitions           */
FILE *fp_in;
FILE *fp_prime;
FILE *fp_alt;

gold68_cat1_api_rcd cat1_api_rcd;
char buf[5001];
char part[51];
char prime[51];

/*  Counters  */
int	input_ctr;
int	output_prime_ctr;
int	output_alt_ctr;

void process_file();

int main(int argc,char **argv)
{
	input_ctr=0;
	output_prime_ctr=0;
	output_alt_ctr=0;

	printf("\n#######################################################");
	printf("\n#        Processing sortAltPrimes                     #");
	printf("\n#######################################################\n");

	if(argc != 4)
	{
		printf("Usage: %s input_file primes_file alts_file\n",argv[0]);
		exit(1);
	}

	if ((fp_in = fopen(argv[1],"r"))== NULL)
	{
		printf("\n*******************************************************");
		printf("* Could not open Input file (%s)\n",argv[1]);
		printf("*******************************************************");
		exit(100);
	}
	else
	{
		printf("\n*******************************************************");
	    	printf("\nProcessing Input File (%s)\n",argv[1]);
	}
	
	if ((fp_prime = fopen(argv[2],"w"))== NULL)
	{
		printf("\n*******************************************************");
		printf("*\n Could not open output Prime file (%s)\n",argv[2]);
		printf("*******************************************************");
		exit(101);
	}
	else
	{
	    	printf("Processing Output Prime File (%s)\n",argv[2]);
	}
	if ((fp_alt = fopen(argv[3],"w")) == NULL)
	{
		printf("\n*******************************************************");
		printf("*\n Could not open Output Alt file (%s)\n",argv[3]);
		printf("*******************************************************");
		exit(102);
	}
	else
	{
	    	printf("Processing Output Alt File (%s)\n",argv[3]);
		printf("*******************************************************");
	}

	process_file();

	printf("\n*******************************************************");
	printf("\nTotal Input Records (%d)",input_ctr);
	printf("\nTotal Output Prime Records (%d)",output_prime_ctr);
	printf("\nTotal Output Alt Records (%d)",output_alt_ctr);
	printf("\n*******************************************************\n");
	
	return(0);
}
	
void process_file()
{
	char out[2500];

	memset(part,' ',50);
	memset(prime,' ',50);

	#if DEBUG
	    	printf("\n process_file");
	#endif

	while(fgets(buf,5000,fp_in) != NULL)
	{
		input_ctr++;

		memset(part,' ',50);
		memset(prime,' ',50);
		strncpy(part,&buf[20],50);
		part[50] = '\0';

		strncpy(prime,&buf[162],50);
		prime[50] = '\0';

		memcpy((char *)&cat1_api_rcd,buf,sizeof(gold68_cat1_api_rcd));
		strncpy(out,(char *)&cat1_api_rcd,sizeof(gold68_cat1_api_rcd));
		out[sizeof(gold68_cat1_api_rcd)] = '\0';

		#if DEBUG
			printf("\nPart   (%s)\nPrime  (%s)\n",part,prime);
		#endif

		if(strncmp(part,prime,50) == 0)
		{
			#if DEBUG
				printf("\n#################################################################");
				printf("\nOutput Prime Record (%s)",out);
				printf("\n#################################################################");
			#endif
			if(fwrite(out,sizeof(gold68_cat1_api_rcd),1,fp_prime) != 1)
			{
				printf("Error writing to prime output file.\n");
				exit(2);
			}
			else
			{
				output_prime_ctr++;
			}
		}
		else
		{
			#if DEBUG
				printf("\n#################################################################");
				printf("\nOutput Alternate Record (%s)",out);
				printf("\n#################################################################");
			#endif
			if(fwrite(out,sizeof(gold68_cat1_api_rcd),1,fp_alt) != 1)
			{
				printf("Error writing to alternates output file.\n");
				exit(2);
			}
			else
			{
				output_alt_ctr++;
			}
		}
	}
}	
