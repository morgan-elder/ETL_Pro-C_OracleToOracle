/* vim: syntax=c:ts=2:sw=2:sts=2:et: 
 */
/*     Program -  SLIC/GOLD HA Change Table Extract Program  */
/*
 **************************************************************************
 *  PROGRAM NAME: slicgldHA.pc
 *
 *  PURPOSE: The purpose of this program is to extract and qualify from the 
 *		slic_ha_chg Table activity that needs to be passed to Gold.
 *
 *  INPUTS:   1. Oracle Table slic_ha_chg Table
 *           
 *
 *  OUTPUTS:  1. Candidate HA Records
 *           
 *
 *  CHANGE HISTORY:
 *   REV     DATE    Programmer                 CHANGE
 *   ---  --------   ----------------------     ------
 *    00  03/02/00   Larry Mills                Initial coding 
 *    01  01/13/06   Larry Mills                Converted to Dynamic SQL and modified to pull based upon Model being passed in
 *    02  01/11/15   Douglas Elder              use fflush only when debugging - buffering is more efficient for regular I/O
 *                                              use exists query to speed up funtion A2000_sql_chk_hax04
 *                                              use Method 2 Dynamic EXECUTE for delete which incurs less overhead than a cursor
 *
 **************************************************************************
*/
/* C System Includes                  */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <assert.h>

/* Application Peculiar Includes      */
#include "../../includes/slicha_chgrcd.h"

/* File Pointer Definitions           */
FILE *ha_candidates_fp;
FILE *fh_block2;
FILE *fh_block3;

/* #define SQLCA_STORAGE_CLASS extern */
#define NOT_FND 1403
#define FND 0
#define MULTI_ROWS -2112

/* Application Peculiar Structures    */

EXEC SQL BEGIN DECLARE SECTION;

/*      Oracle User Sign-on Area   */
	char	uid[20];
	char	pwd[20];

/*      SLIC HA Change Table Host Variables */
	
	varchar	refnumha[33];
	varchar	cagecdha[6];

/*       program variables  */
char	hax04_exists[1];
char	ha_chgrcd[100];
char	ha_candidates[500];
char	program_model[10];

/*       Flags              */

/*       Record Counts      */
int	rows_fetched=0;
int	rows_deleted=0;
int	ha_candidate_written=0;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

/*  Function prototype area       */

int	A999_00_open_files(void);
void	A999_02_dberr(void);
int     A1000_sql_select();
int	A2000_sql_chk_hax04();
int	A2100_delete_row();
int     Z9999_write_ha_candidates();

/*       program variables  */
char	ha_chgrcd[100];
char	ha_candidates[500];

	slicha_chgrcd	Slicha_Chgrcd;

main(int argc, char *argv[])
{

	int	errcode=0;
        int     opt;
        char    spaces[]={"                                               "};
        extern  char *optarg;

  printf("\n%s compiled on %s at %s\n",__FILE__,__DATE__,__TIME__) ;
	printf("\n********  Processing SLIC/GOLD HA Changes Extract - slicgldHA  *********\n");

	memset(ha_candidates,' ',sizeof(ha_candidates));
	memset(program_model,' ',sizeof(program_model));

        while ((opt=getopt (argc, argv,"a:b:A:B")) != EOF)
        {
            switch (opt)
            {
                 case 'a':
                 case 'A':
	        	strncpy(ha_candidates,spaces,100);
			strncpy(ha_candidates,(char *) optarg,strlen((char *) optarg));
			strncat(ha_candidates,spaces,100-strlen(ha_candidates));
                        ha_candidates[strlen((char *) optarg)]='\0';
                        break;
                 case 'b':
                 case 'B':
	        	strncpy(program_model,spaces,10);
			strncpy(program_model,(char *) optarg,strlen((char *) optarg));
			strncat(program_model,spaces,10-strlen(program_model));
                        program_model[strlen((char *) optarg)]='\0';
			printf("\nProcessing Model (%s)\n",program_model);
                        break;
                 case '?':
                     errcode=12;
                     break;
		}
	}

	if((strncmp(program_model,"F18",3)==0)||
	   (strncmp(program_model,"AV8B",4)==0)||
	   (strncmp(program_model,"F15",3)==0))
	{
	}
	else
	{
		printf("\n#######################################################");
		printf("\n# Processing an invalid Program Model (%s) ",program_model);
		printf("\n#######################################################\n\n");
		errcode=-1;
	}

	if (errcode == FND)
	{
		Login(); 
		if (sqlca.sqlcode == FND)
		{
			printf("\nconnected.\n");
		}
		else
		{
			printf("\n***********************************************************");
			printf("\n*                                                         *");
			printf("\n*       Not connected.                                    *");
			printf("\n*                                                         *");
			printf("\n***********************************************************");
			A999_02_dberr();
		}
	}
	else
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n*     Unable to Read Command Line Arguments               *");
		printf("\n*                                                         *");
		printf("\n***********************************************************");
	}

	if (errcode == FND)
	{
		errcode=A999_00_open_files();
		if (errcode == FND)
		{
			errcode=A1000_sql_select();
		}
		else
		{
			printf("\n***********************************************************");
			printf("\n*                                                         *");
			printf("\n*  Unable to Open Files for Processing                    *");
			printf("\n*                                                         *");
			printf("\n***********************************************************");
		}
	}

	printf("\n-----------------------------------------------------------");
	printf("\n- Number of rows selected\t\t\t%d",rows_fetched);
	printf("\n- Number of HA Candidates written\t\t%d",ha_candidate_written);
	printf("\n- Number of HA Candidates deleted\t\t%d",rows_deleted);
	printf("\n\n- Program Error Code (%d)\t\t",errcode);
	printf("\n-----------------------------------------------------------");

  if (ha_candidates_fp != NULL)
	  fclose(ha_candidates_fp);

	if (errcode == FND)
	{
		printf("\n-----------------------------------------------------------");
		printf("\n-                                                         -");
		printf("\n-                    Commit Work                          -");
		printf("\n-                                                         -");
		printf("\n-----------------------------------------------------------");
		EXEC SQL COMMIT WORK RELEASE;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~            Work not Committed                           ~");
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		EXEC SQL ROLLBACK WORK RELEASE;
	}
	printf("\n");
	exit(errcode);
}
/*

*/
int	A999_00_open_files(void)
{
	int	errcode=0;

	if ((ha_candidates_fp=fopen(ha_candidates,"w")) == NULL)
	{
		printf("\n***********************************************************");
		printf("\n*                                                         *");
		printf("\n*       Could not open Input File (%s)",ha_candidates);
		printf("\n*                                                         *");
		printf("\n***********************************************************");
		errcode=500;
	}
	else
	{
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		printf("\n~                                                         ~");
		printf("\n~  Processing Output File (%s)",ha_candidates);
		printf("\n~                                                         ~");
		printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	return(errcode);
}
/*

*/
void	A999_02_dberr()
{
	char msg_buf[513];
	size_t  buf_size=sizeof(msg_buf);
	size_t  msg_len;
	printf("\n???????????????????????????????????????????????????????????");
	printf("\n?                                                         ?");
	printf("\n?\tData Base Error has occurred:");
	sqlglm(msg_buf, &buf_size, &msg_len);
	sqlglm(msg_buf, &buf_size, &msg_len);
	msg_buf[msg_len]='\0';
	printf("\n?\t\t%s",msg_buf);
	printf("\n?\t\tSQLCODE: %d",sqlca.sqlcode);
	printf("\n?\t\tSQLERR MSG %s",sqlca.sqlerrm.sqlerrmc);
	printf("\n?");
	printf("\n???????????????????????????????????????????????????????????");

	return;
}
/*

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
							*/
int     A1000_sql_select()
{

	int	errcode=0;
	int	fetch_ha_chgs=1;
	char	mysql[1000];
	
	#if DEBUG
		printf("\nA1000_sql_select");
	#endif

	memset (mysql,' ',sizeof(mysql));

	strcpy(mysql,"select distinct replace(refnumha,'''',''),cagecdxh ");
	strcat(mysql,"from scm.slic_ha_chgs");
	if((strncmp(program_model,"AV8B",4)==0)||
	   (strncmp(program_model,"F15",3)==0))
	{
		strcat(mysql,"_");
		strcat(mysql,program_model);
		strcat(mysql," ");
	}
	else
	{
		strcat(mysql," ");
	}
	strcat(mysql,"where slicgld_flag = 'Y' ");
	strcat(mysql,"and chg_update_cde in ('A','U')");

	#if DEBUG
		printf("\nSQL STATEMENT (%s)",mysql);
	#endif

	EXEC SQL PREPARE S1 from :mysql;
	EXEC SQL DECLARE C1 CURSOR FOR S1;

	EXEC SQL OPEN C1;

	if(sqlca.sqlcode==FND)
	{
		while (fetch_ha_chgs==1)
		{
			#if DEBUG
				printf("\nA1000_sql_select ********************************************");
			#endif

			memset(refnumha.arr,' ',sizeof(refnumha.arr));
			memset(cagecdha.arr,' ',sizeof(cagecdha.arr));

			EXEC SQL FETCH C1 into
				:refnumha, :cagecdha;

			if(sqlca.sqlcode==FND)
 			{ 
				rows_fetched++;
				errcode=A2000_sql_chk_hax04();
				#if DEBUG
					printf("\nA1000_sql_select errcode after chk_hax04 (%d)",errcode);
				#endif
				if (errcode == FND)
				{
                    			errcode=Z9999_write_ha_candidates();
				}
				else
				{
					if(errcode==2)
					{
						errcode=0;
					}
					else
					{
						fetch_ha_chgs=0;
					}
				}
                	}
			else
			{
				fetch_ha_chgs=0;
				if(sqlca.sqlcode==NOT_FND)
				{
					if(ha_candidate_written==0)
					{
						printf("\nNo HA Change Records- Fetch");
					}
				}
				else
				{
					printf("\nA1000_sql_select - Fetch HA");
					printf("\nBad SQLCODE ");
					errcode=501;
					A999_02_dberr();
					exit(errcode);
				}
			}

                }
	}
	else
	{
		printf("\nNo HA Change Records - Open Cursor");
	}

	EXEC SQL CLOSE C1;

	#if DEBUG
		printf("\nReturn Code from A1000_sql_select (%d)",errcode);
	#endif

	return(errcode);

}
        		
int	A2000_sql_chk_hax04()
{
	int	errcode=0;
	char	mysql[1000];
	#if DEBUG
		printf("\nA2000_sql_chk_hax04");
	#endif

	memset(mysql,' ',sizeof(mysql));
	
  strcpy(mysql,"select to_char('Y') from dual where exists (select null ");
	if(strncmp(program_model,"F18",3)==0) {
        	strcat(mysql,"from f18_hax04 ");
	} else if((strncmp(program_model,"AV8B",4)==0)||
		   (strncmp(program_model,"F15",3)==0)) {
	        	strcat(mysql,"from ");
	        	strcat(mysql,program_model);
	        	strcat(mysql,"_HAXSCM ");
	}
	strcat(mysql,"where rtrim(refnumha) = ");
	strcat(mysql,"rtrim('");
	strcat(mysql,(char *) refnumha.arr);
	strcat(mysql,"') and ");
        strcat(mysql,"cagecdxh = '");
	strcat(mysql,(char *) cagecdha.arr);

	if(strncmp(program_model,"F18",3)==0) {
		strcat(mysql,"' and scm_program like 'FIRST%' ");
	} else if(strncmp(program_model,"AV8B",4)==0) {
			strcat(mysql,"' and scm_program like 'HISS%' ");
	} else if(strncmp(program_model,"F15",3)==0) {
				strcat(mysql,"' and scm_program in ('F15K','F15SG') ");
	} else {
				printf("\nUnidentified Program Model - A2000_sql_chk_hax04");
				printf("\nInput Program Model (%s)",program_model);
				errcode=+500;
				exit(errcode);
	}
  strcat(mysql,")");

	#if DEBUG
		printf("\nHAX04 SQL STATEMENT (%s)",mysql);
	#endif
  hax04_exists[0] = 'N' ;

	EXEC SQL PREPARE S2 from :mysql;

	EXEC SQL DECLARE C2 CURSOR FOR S2;

	EXEC SQL OPEN C2;

	if (sqlca.sqlcode == FND) {
		EXEC SQL FETCH C2
		   into :hax04_exists;
		if (sqlca.sqlcode == FND) {
        /* the row exists - do nothing */
		} else if(sqlca.sqlcode==NOT_FND) {
				errcode=A2100_delete_row();
		} else {
				printf("\nA2000_sql_chk_hax04 - Delete action FETCH CURSOR");
				printf("\nBad SQLCODE ");
				errcode=510;
				A999_02_dberr();
		}
	} else if(sqlca.sqlcode==NOT_FND) {
			errcode=A2100_delete_row();
	} else {
 			printf("\nA2000_sql_chk_hax04 - Check HAX04 OPEN CURSOR");
			printf("\nBad SQLCODE ");
			errcode=500;
			A999_02_dberr();
  }
	
	EXEC SQL CLOSE C2;
	return(errcode);
}
/*

*/
int	A2100_delete_row()
{
	int	errcode=0;
	char	mysql[1000];

	#if DEBUG
		printf("\nA2100_delete_row");
	#endif

	memset(mysql,' ',sizeof(mysql));

	strcpy(mysql,"DELETE from ");
	if(strncmp(program_model,"F18",3)==0)
	{
		strcat(mysql,"scm.slic_ha_chgs ");
	}
	else
	{
		if((strncmp(program_model,"AV8B",4)==0)||
		   (strncmp(program_model,"F15",3)==0))
		{
			strcat(mysql,"scm.slic_ha_chgs_");
			strcat(mysql,program_model);
			strcat(mysql," ");
		}
	}
	strcat(mysql,"where refnumha=rtrim('");
	strcat(mysql,(char *) refnumha.arr);
	strcat(mysql,"') and cagecdxh='");
	strcat(mysql,(char *) cagecdha.arr);
	strcat(mysql,"' ");
	
	#if DEBUG
		printf("\nA2100_delete_row SQL (%s)",mysql);
	#endif

	EXEC SQL PREPARE DELETE_HA_SQL from :mysql;
	EXEC SQL EXECUTE DELETE_HA_SQL;


	if(sqlca.sqlcode== FND)
	{
		rows_deleted++;
		errcode=2;
		#if DEBUG
			printf("\nRows Deleted (%d)",sqlca.sqlerrd[2]);
		#endif
	}
	else
	{
		if(sqlca.sqlcode==NOT_FND)
		{
		}
		else
		{
			printf("\nA2100_delete_row - SQL Delete action ");
			printf("\nBad SQLCODE ");
			printf("\nSQL (%s)",mysql);
			errcode=510;
			A999_02_dberr();
		}
	}

	return(errcode);
}
/*

*/
int     Z9999_write_ha_candidates()
{
	int	errcode=0;
	int	i=0;
	int	i1=0;
	
	#if DEBUG
		printf("\nZ9999_write_ha_candidates");
	#endif
	memset(&Slicha_Chgrcd,' ',sizeof(Slicha_Chgrcd)) ;

	strncpy (Slicha_Chgrcd.prcsseq,"04",sizeof(Slicha_Chgrcd.prcsseq));
	strncpy (Slicha_Chgrcd.rcdtype,"HA",sizeof(Slicha_Chgrcd.rcdtype));
	assert(refnumha.len <= sizeof(Slicha_Chgrcd.refnumha)) ;
	strncpy (Slicha_Chgrcd.refnumha,refnumha.arr,refnumha.len);
	assert(cagecdha.len <= sizeof(Slicha_Chgrcd.cagecdha)) ;
	strncpy(Slicha_Chgrcd.cagecdha,cagecdha.arr,cagecdha.len);
	Slicha_Chgrcd.newline='\n';
	Slicha_Chgrcd.endline='\0'; 

	assert(strlen((char *) &Slicha_Chgrcd) <= sizeof(Slicha_Chgrcd) - 1);
	fputs((char *) &Slicha_Chgrcd,ha_candidates_fp); 

	ha_candidate_written++;
  /* only use fflush when debugging otherwise
   * use the default buffering which is more efficient I/O
   */
  #if DEBUG
	fflush(ha_candidates_fp); 
	#endif

	return(errcode);
}
