/*    Program -  slicgldCHECK.pc Program */
/* vim: ts=2:sw=2:sts=2:et:syntax=c:
**************************************************************************
*  PROGRAM NAME: SLIC/GOLD Seg Code Acty Gold Validation Program
*
*  PURPOSE: The purpose of this program is to process those Gold API Records
*    records having seg code against the Gold Records.  If the
*    part number/sc exists in Gold it will not pass the record to the output.
*    If the Part Number/SC does not exist in GOLD, it will try to replace the
*    default IMS Designator assigned in the slicgldFMT program with a matching
*    IMS Designator Code for the part with matching program SC's IMS Designator Codes.
*
*    The following Seg Code Records are being processed:
*
*    Warehouse Records
*    Pricing Records.
*
*
*  INPUTS:   Consolidated Seg Code Acty.
*
*
*  OUTPUTS:  Consolidate Seg Code Update Acty.
*        Consolidate Seg Code Error Acty.
*
*
*  CHANGE HISTORY:
*   REV     DATE    Programmer                 CHANGE
*   ---  --------   ----------------------     ------
*    00  10/16/95   Larry Mills                Initial coding
*    01  11/04/02   Ben Barth                  CHAR to VARCHAR conv
*    02  01/02/03   Chandler Wilson            Corrected a problem with output file variable
**************************************************************************
*/
/* C System Includes                  */
#include <errno.h>
#include <time.h>
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <assert.h>
#include "varcharSetup.h"

/* Application Peculiar Includes      */
#include "gold685_whse_api_FMT_v2.h"
#include "gold685_prc1_api_FMT.h"
#include "gold685_whse_api_v2.h"
#include "gold685_prc1_api.h"

/* File Pointer Definitions           */
FILE *fh_block2;
FILE *fh_block3;
FILE *INPUT_SC_FILE_FP;
FILE *OUTPUT_SC_FILE_FP;
FILE *OUTPUT_SC_ERROR_FILE_FP;

gold68_whse_api_FMT_rcd   whse_FMT;
gold68_prc1_api_FMT_rcd         prc1_FMT;
gold68_whse_api_rcd           whse_API;
gold68_prc1_api_rcd           prc1_API;

/* #define SQLCA_STORAGE_CLASS extern */
#define NOT_FND 1403
#define FND 0
#define MULTI_ROWS -2112

/* Application Peculiar Structures    */

EXEC SQL BEGIN DECLARE SECTION;

/*      Oracle User Sign-on Area   */
varchar uid[20];
varchar pwd[20];

/*  Query Host Variables    */
varchar query_part[51];
varchar query_sc[21];
varchar processing_mdl[21];


/*  Whse Host Variables   */
varchar whse_sc[21];
varchar ims_designator_code[21];
short ims_designator_code_i;
varchar current_ims_designator_code[21];

/*  Prc1 Host Variables   */
varchar prc1_sc[21];
varchar prc1_gfp_price[18];
short prc1_gfp_price_i;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

/*  Function prototype area       */

int A0100_get_argmnt(char argc, char **argv);
int A999_00_open_files(void);
void  A999_02_dberr(char *);
int A1000_process_file();
int A2000_process_prc1(void);
int A2100_check_gold_prc1(void);
int A2110_compare_prc1_rcd(void);
int A2999_move_prc1_rcd(void);
int A4000_process_whse(void);
int A4100_check_gold_whse(void);
int A4100_check_gold_whse_part(void);
int A4105_check_gold_whse_select(void);
int A4110_compare_whse_rcd(void);
int A4999_move_whse_rcd(void);
int     A9999_write_output_sc_file();
int     A9999_write_output_sc_error_file();

/*       program variables  */
struct  tm *tmstruct;
time_t  tnow;

varchar prev_part[51];
varchar prev_sc[21];
varchar prev_rcd_type[4];

char  input_sc_file_area[5000];
char  output_sc_file_outarea[5000];
char  output_sc_error_file_outarea[5000];
char  *input_sc_file ;
char  *output_sc_file ;
char  *output_sc_error_file ;

varchar api_update_code[2];
varchar api_rcd_type[4];
varchar model[4];

char  whse_sc_exists;
char  write_output_prc1;
char  write_output_whse;
char  sc_error_msg[200];
char  mysql[2001];

/*       Flags              */

/*       Record Counts      */
int cnt_rcds=0;
int cnt_prc1_005=0;
int cnt_prc1_005_updates=0;
int cnt_prc1_005_inserts=0;
int cnt_prc1_005_deletes=0;
int cnt_prc1_005_nochg=0;
int cnt_whse_009=0;
int cnt_whse_009_updates=0;
int cnt_whse_009_inserts=0;
int cnt_whse_009_deletes=0;
int cnt_whse_009_ims_des_chgs=0;
int cnt_whse_009_nochg=0;
int cnt_output_error_rcds=0;

main(int argc, char **argv)
{
    int errcode=0;
    char  pgmtime[21];
    
    printf("\nCompiled %s on %s at %s\n", __FILE__,__DATE__,__TIME__);
    printf("\n\n**************************************************************************");
    time(&tnow);
    tmstruct=localtime(&tnow);
    strftime(pgmtime,sizeof(pgmtime),"%m/%d/%Y-%H:%M:%S",tmstruct);
    printf("\n\n\tStarting Time (%s)\n",&pgmtime);
    
    errcode=A0100_get_argmnt(argc, argv) ;
    
    
    if(errcode==0)
    {
        errcode=A999_00_open_files();
    }
    
    
    
    if (errcode == FND)
    {
        Login();
        if (sqlca.sqlcode == FND)
        {
        }
        else
        {
            printf("\nNot connected.\n");
            A999_02_dberr("main::Login()");
        }
    }
    
    if (errcode == FND)
    {
        errcode=A1000_process_file();
    }
    else
    {
        printf("\nNo processing.\n");
    }
    
    printf("\n***********************************************************");
    printf("\nTotal Records Records Read\t\t\t\t(%d)\n",cnt_rcds);
    printf("\tTotal Prc1 Type 005 Records Read\t\t(%d)\n",cnt_prc1_005);
    printf("\t\tTotal Prc1 Type 005 Records Updated\t(%d)\n",cnt_prc1_005_updates);
    printf("\t\tTotal Prc1 Type 005 Records Inserted\t(%d)\n\n",cnt_prc1_005_inserts);
    printf("\t\tTotal Prc1 Type 005 Records Deleted\t(%d)\n\n",cnt_prc1_005_deletes);
    printf("\tTotal Whse Type 009 Records Read\t\t(%d)\n",cnt_whse_009);
    printf("\t\tTotal Whse Type 009 Records Updated\t(%d)\n",cnt_whse_009_updates);
    printf("\t\tTotal Whse Type 009 Records Inserted\t(%d)\n\n",cnt_whse_009_inserts);
    printf("\t\tTotal Prc1 Type 009 Records Deleted\t(%d)\n\n",cnt_whse_009_deletes);
    printf("\t\tTotal Whse Type 009 Records IMS Des Code Changes (%d)\n\n",cnt_whse_009_ims_des_chgs);
    printf("\tTotal Output Error Records\t\t(%d)\n",cnt_output_error_rcds);
    printf("***********************************************************");
    
    if (INPUT_SC_FILE_FP != NULL)
      fclose(INPUT_SC_FILE_FP);
    if (OUTPUT_SC_FILE_FP != NULL)
      fclose(OUTPUT_SC_FILE_FP);
    if (OUTPUT_SC_ERROR_FILE_FP != NULL)
      fclose(OUTPUT_SC_ERROR_FILE_FP);
    
    if (errcode == FND)
    {
        printf("\nCommit Work\n");
        EXEC SQL COMMIT WORK RELEASE;
    }
    else
    {
        printf("\nWork not Committed errcode=%d\n", errcode);
        EXEC SQL ROLLBACK WORK RELEASE;
    }
    
    time(&tnow);
    tmstruct=localtime(&tnow);
    strftime(pgmtime,sizeof(pgmtime),"%m/%d/%Y-%H:%M:%S",tmstruct);
    printf("\n\n\tEnding Time (%s)\n",&pgmtime);
    printf("**************************************************************************\n");
    
    exit(errcode);
}
int A0100_get_argmnt(char argc, char **argv)
{
    int errcode=0;
    
    char opt;
    char  spaces[]={"                                       "};
    extern char *optarg;
    while ((opt=getopt (argc, argv,"a:b:c:d:A:B:C:D")) !=EOF)
    {
        switch (opt)
        {
            case 'a':
            case 'A':
            input_sc_file = optarg ;
            printf("input_sc_file=%s\n", input_sc_file) ;
            break;
            case 'b':
            case 'B':
            output_sc_file = optarg ;
            printf("output_sc_file=%s\n", output_sc_file) ;
            break;
            case 'c':
            case 'C':
            output_sc_error_file = optarg ;
            printf("output_sc_error_file=%s\n", output_sc_error_file) ;
            break;
            case 'd':
            case 'D':
            strncpy((char *) processing_mdl.arr,(char *) optarg,strlen((char *) optarg));
            strncat((char *) processing_mdl.arr,spaces,20-strlen((char *) processing_mdl.arr));
            processing_mdl.arr[strlen((char *) optarg)]='\0';
            assert(strlen(processing_mdl.arr) <= sizeof(processing_mdl.arr) - 1);
            processing_mdl.len=strlen((char *) processing_mdl.arr);
            printf("\nProcessing Model (%s)\n",(char *) processing_mdl.arr);
            break;
            case '?':
            errcode=12;
            break;
        }
    }
    
    return(errcode);
}
/*

*/
int A999_00_open_files(void)
{
    int errcode=0;
    char temp[101];
    
    
    strcpy(temp,output_sc_file);
    
    if ((INPUT_SC_FILE_FP=fopen(input_sc_file,"r")) == NULL)
    {
        printf("\nCould not open Input File (%s)",input_sc_file);
        errcode=500;
    }
    
    
    if ((OUTPUT_SC_FILE_FP=fopen(temp,"w")) == NULL)
    {
        printf("\nCould not open output File (%s)",output_sc_file);
        errcode=502;
    }
    
    if ((OUTPUT_SC_ERROR_FILE_FP=fopen(output_sc_error_file,"w")) == NULL)
    {
        printf("\nCould not open output Error File (%s)",output_sc_error_file);
        errcode=501;
    }
    
    return(errcode);
}

void  A999_02_dberr(char *str)
{
    char  msg_buf[200];
    int  buf_size=200;
    int  msg_len;
    printf("\n???????????????????????????????????????????????????????????");
    printf("\n?                                                         ?");
    printf("\n?\tData Base Error has occurred at %s:",str);
    printf("\n?\t\tSQLCODE: %d",sqlca.sqlcode);
    sqlglm(msg_buf, &buf_size, &msg_len);
    sqlglm(msg_buf, &buf_size, &msg_len);
    msg_buf[msg_len]='\0';
    printf("\n?\t\t%s",msg_buf);
    printf("\n?\t\tSQLCODE: %d",sqlca.sqlcode);
    printf("\n?\t\tSQLERR MSG %.*s",sqlca.sqlerrm.sqlerrml,sqlca.sqlerrm.sqlerrmc);
    printf("\n?");
    printf("\n???????????????????????????????????????????????????????????\n");
    
    return;
}

int A1000_process_file()
{
    int errcode=0;
    int process_file=1;
    
    #if DEBUG
    printf("A1000_processs_file\n");
    #endif
    
    while(process_file)
    {
        errcode=0;
        STRINIT(input_sc_file_area) ;
        if (fgets(input_sc_file_area,sizeof(input_sc_file_area),INPUT_SC_FILE_FP) == (char *) NULL)
        {
            printf("\nEnd of File Processing\n");
            process_file=0;
        }
        if(process_file==1)
        {
            SETVCHAR(api_rcd_type, input_sc_file_area[90]) ;
            SETVCHAR(query_part, input_sc_file_area[20]) ;
            SETVCHAR(query_sc, input_sc_file_area[70]) ;
            SETVCHAR(api_update_code, input_sc_file_area[123]) ;
            INITVCHAR(model) ;
            
            #if DEBUG
            printf("########################################################\n");
            printf("Input Rcd (%s)\n",&input_sc_file_area);
            printf("api_rcd_type (%s)\n",api_rcd_type.arr);
            printf("api_update_code (%s)\n",api_update_code.arr);
            assert(query_part.len == strlen(query_part.arr));
            printf("Query Part No (%s) (%d)\n",query_part.arr,query_part.len);
            assert(query_sc.len == strlen(query_sc.arr));
            printf("Query Seg Cde (%s) (%d)\n",query_sc.arr,query_sc.len);
            printf("Model (%s)\n",(char *) model.arr);
            #endif
            
            cnt_rcds++;
            if (strncmp(api_rcd_type.arr,"105",3) == 0)
            {
                cnt_prc1_005++;
                errcode=A2000_process_prc1();
                if(errcode==0)
                {
                }
                else
                {
                    printf("Bad Termination of A2000_process_prc1\n");
                    process_file=0;
                }
            }
            else
            {
                if (strncmp((char *) api_rcd_type.arr,"009",3) == 0)
                {
                    cnt_whse_009++;
                    errcode=A4000_process_whse();
                    if(errcode==0)
                    {
                    }
                    else
                    {
                        printf("Bad Termination of A4000_process_whse\n");
                        process_file=0;
                    }
                }
                else
                {
                    printf("Unidentified API Record (%s)\n",api_rcd_type.arr);
                    errcode=500;
                    process_file=0;
                }
            }
        }
        
    }
    return(errcode);
}
/*

*/
int A2000_process_prc1()
{
    int errcode=0;
    
    memcpy(&prc1_FMT,input_sc_file_area,sizeof(prc1_FMT));
    
    assert(query_part.len == strlen(query_part.arr));
    assert(query_sc.len == strlen(query_sc.arr));
    assert(prev_part.len == strlen(prev_part.arr));
    assert(prev_sc.len == strlen(prev_sc.arr));

    #if DEBUG
    printf("A2000_process_prc1\n");
    printf("Query Part (%s) (%d)\n",query_part.arr,query_part.len);
    printf("Query SC (%s) (%d)\n",query_sc.arr,query_sc.len);
    printf("Prev Part (%50.50s)\n",prev_part.arr);
    printf("Prev SC (%20.20s)\n",prev_sc.arr);
    #endif
    
    if((strncmp((char *) prev_part.arr,(char *) query_part.arr,50)==0) &&
    (strncmp((char *) prev_sc.arr,(char *) query_sc.arr,20)==0))
    {
    }
    else
    {
        if((strncmp((char *) model.arr,"F18",3)==0) &&
        (strncmp((char *) api_rcd_type.arr,"105",3) == 0))
        {
            whse_sc_exists='Y';
        }
        else
        {
            errcode=A4100_check_gold_whse();
            strncpy((char *) prev_part.arr,(char *) prc1_FMT.part,50);
            prev_part.arr[50]='\0';
            prev_part.len=strlen((char *) prev_part.arr);
            assert(prev_part.len <= sizeof(prev_part.arr) - 1) ;
            strncpy((char *) prev_sc.arr,(char *) prc1_FMT.sc,20);
            prev_sc.arr[20]='\0';
            prev_sc.len=strlen((char *) prev_sc.arr);
            assert(prev_sc.len <= sizeof(prev_sc.arr) - 1) ;
        }
    }
    if(errcode==0 &&
    whse_sc_exists=='Y')
    {
        errcode=A2100_check_gold_prc1();
        #if DEBUG
        printf("Write PRC1: %c\n", write_output_prc1);
        #endif
        if(errcode==0 &&
        write_output_prc1=='Y')
        {
            errcode=A2999_move_prc1_rcd();
        }
    }
    else
    {
        if(whse_sc_exists=='N')
        {
            STRINIT(sc_error_msg) ;
            strcpy(sc_error_msg,"001-WHSE Rcd does not exist in Gold for PRC1 Rcd                 \n");
            STRINIT(output_sc_error_file_outarea) ;
            strncpy(output_sc_error_file_outarea, prc1_FMT.part,32);
            strncpy((char *) &output_sc_error_file_outarea[35],(char *) prc1_FMT.sc,20);
            strncpy((char *) &output_sc_error_file_outarea[60],sc_error_msg,66);
            output_sc_error_file_outarea[126]='\0';
            errcode=A9999_write_output_sc_error_file();
        }
    }
    
    return(errcode);
}
/*

*/
int A2100_check_gold_prc1()
{
    int errcode=0;
    
    #if DEBUG
    printf("A2100_check_gold_prc1\n");
    printf("Does Whse SC Exist (%c)\n",whse_sc_exists);
    #endif
    
    EXEC SQL
    select substr(nvl(to_char(gfp_price,'000000000000.99'),' 000000000000.00'),2,15)
    into :prc1_gfp_price:prc1_gfp_price_i
    from prc1
    where part=rtrim(:query_part)
    and sc=rtrim(:query_sc);
    
    #if DEBUG
    printf("PRC1 error code: %d\n",sqlca.sqlcode);
    #endif
    
    if(sqlca.sqlcode==FND)
    {
        if(prc1_FMT.update_create_delete=='C')
        {
            prc1_FMT.update_create_delete='U';
            errcode=A2110_compare_prc1_rcd();
        }
        else
        {
            errcode=A2110_compare_prc1_rcd();
        }
    }
    else
    {
        if(sqlca.sqlcode==NOT_FND)
        {
            if(prc1_FMT.update_create_delete=='C')
            {
                write_output_prc1='Y';
            }
            else
            {
                if(prc1_FMT.update_create_delete=='U')
                {
                    STRINIT(sc_error_msg) ;
                    strcpy(sc_error_msg,"003-PRC1 Acty Rcd Code to update when Part/SC does not Exists in Gold\n");
                    STRINIT(output_sc_error_file_outarea) ;
                    strncpy((char *) output_sc_error_file_outarea,prc1_FMT.part,32);
                    strncpy((char *) &output_sc_error_file_outarea[35],prc1_FMT.sc,20);
                    strncpy((char *) &output_sc_error_file_outarea[60],sc_error_msg,70);
                    output_sc_error_file_outarea[130]='\0';
                    errcode=A9999_write_output_sc_error_file();
                    if(errcode==0)
                    {
                        errcode=A2110_compare_prc1_rcd();
                    }
                }
                else
                {
                    if(prc1_FMT.update_create_delete=='D')
                    {
                        STRINIT(sc_error_msg) ;
                        strncpy(sc_error_msg,"004-Part/SC does not Exists in Gold PRC1 to delete\n",51);
                        STRINIT(output_sc_error_file_outarea) ;
                        strncpy((char *) output_sc_error_file_outarea, prc1_FMT.part,32);
                        strncpy((char *) &output_sc_error_file_outarea[35],prc1_FMT.sc,sizeof(prc1_FMT.sc));
                        strncpy((char *) &output_sc_error_file_outarea[60],(char *) sc_error_msg,51);
                        output_sc_error_file_outarea[111]='\0';
                        errcode=A9999_write_output_sc_error_file();
                    }
                }
            }
        }
        else
        {
            printf("A2100_check_gold_prc1\n");
            printf("\nQuery Part (%s) (%d)",query_part.arr, query_part.len);
            printf("\nQuery SC (%s) (%d)", query_sc.arr, query_sc.len);
            printf("\nBad SQLCODE\n");
            errcode=sqlca.sqlcode;
            A999_02_dberr("A2100_check_gold_prc1");
        }
        
    }
    #if DEBUG
    printf("PRC1 update/create/delete: %c\n",prc1_FMT.update_create_delete);
    #endif
    
    return(errcode);
}
int A2110_compare_prc1_rcd()
{
    int errcode=0;
    write_output_prc1='N';
    
    #if DEBUG
    printf("A2110_compare_prc1_rcd\n");
    printf("Gold PRC1 GFP_PRICE (%s)\n",prc1_gfp_price.arr);
    printf("Activity GFP_PRICE (%15.15s)\n",prc1_FMT.gfp_price);
    #endif
    
    if(strncmp((char *) prc1_gfp_price.arr,prc1_FMT.gfp_price,15)==0)
    {
    }
    else
    {
        write_output_prc1='Y';
    }
    
    return(errcode);
}
/*

*/
int A2999_move_prc1_rcd()
{
    int errcode=0;
    
    #if DEBUG
    printf("A2999_move_prc1_rcd\n");
    #endif
    
    strncpy((char *) &prc1_API.customer,prc1_FMT.customer,20);
    prc1_API.update_create_delete=prc1_FMT.update_create_delete;
    strncpy((char *) &prc1_API.table_nbr,"005",3);
    strncpy((char *) &prc1_API.table_name,prc1_FMT.table_name,30);
    strncpy((char *) &prc1_API.sc,prc1_FMT.sc,20);
    strncpy((char *) &prc1_API.part,prc1_FMT.part,50);
    strncpy((char *) &prc1_API.cmav,prc1_FMT.cmav,15);
    strncpy((char *) &prc1_API.cap_price,prc1_FMT.cap_price,15);
    strncpy((char *) &prc1_API.gfp_price,prc1_FMT.gfp_price,15);
    strncpy((char *) &prc1_API.price1,prc1_FMT.price1,15);
    strncpy((char *) &prc1_API.price2,prc1_FMT.price2,15);
    strncpy((char *) &prc1_API.price3,prc1_FMT.price3,15);
    strncpy((char *) &prc1_API.price4,prc1_FMT.price4,15);
    strncpy((char *) &prc1_API.price5,prc1_FMT.price5,15);
    strncpy((char *) &prc1_API.price6,prc1_FMT.price6,15);
    strncpy((char *) &prc1_API.price7,prc1_FMT.price7,15);
    strncpy((char *) &prc1_API.price8,prc1_FMT.price8,15);
    strncpy((char *) &prc1_API.price9,prc1_FMT.price9,15);
    strncpy((char *) &prc1_API.price10,prc1_FMT.price10,15);
    strncpy((char *) &prc1_API.price11,prc1_FMT.price11,15);
    strncpy((char *) &prc1_API.price12,prc1_FMT.price12,15);
    strncpy((char *) &prc1_API.price_date,prc1_FMT.price_date,10);
    strncpy((char *) &prc1_API.price_type,prc1_FMT.price_type,20);
    prc1_API.eol='\n';
    
    if(prc1_API.update_create_delete=='C')
    {
        cnt_prc1_005_inserts++;
    }
    else
    {
        if(prc1_API.update_create_delete=='U')
        {
            /*    cnt_prc1_005_updates++; */
        }
        else
        {
            if(prc1_API.update_create_delete=='D')
            {
                cnt_prc1_005_deletes++;
            }
        }
    }
    
    if(prc1_API.update_create_delete=='U')
    {
    }
    else
    {
        STRINIT(output_sc_file_outarea) ;
        strncpy((char *) output_sc_file_outarea,(char *) &prc1_API,sizeof(prc1_API));
        output_sc_file_outarea[sizeof(prc1_API)]='\0';
        errcode=A9999_write_output_sc_file();
    }
    
    return(errcode);
}
/*

*/
int A4000_process_whse()
{
    int errcode=0;
    memcpy(&whse_FMT,input_sc_file_area,sizeof(whse_FMT));
    
    #if DEBUG
    printf("A4000_process_whse\n");
    #endif
    
    strncpy((char *) prev_part.arr,(char *) &whse_FMT.part,50);
    prev_part.arr[50]='\0';
    prev_part.len=strlen((char *) prev_part.arr);
    assert(prev_part.len <= sizeof(prev_part.arr) - 1) ;
    
    strncpy((char *) prev_sc.arr,(char *) &whse_FMT.sc,20);
    prev_sc.arr[20]='\0';
    prev_sc.len=strlen((char *) prev_sc.arr);
    assert(prev_sc.len <= sizeof(prev_sc.arr) - 1) ;
    
    errcode=A4100_check_gold_whse();
    if(errcode==0)
    {
        errcode=A4105_check_gold_whse_select();
    }
    if(errcode==0 &&
    write_output_whse=='Y')
    {
        errcode=A4999_move_whse_rcd();
    }
    
    return(errcode);
}
/*

*/
int A4100_check_gold_whse()
{
    
    /*  Checks for existence of Part/SC In GOLD.  IF found it will throw the record out */
    
    int errcode=0;
    
    whse_sc_exists='N';
    
    assert(query_part.len <= sizeof(query_part.arr) - 1) ;
    assert(query_sc.len <= sizeof(query_sc.arr) - 1) ;
    #if DEBUG
    printf("A4100_check_gold_whse\n");
    printf("Query Part (%s) (%d)\n",query_part.arr,query_part.len);
    printf("Query SC (%s) (%d)\n",query_sc.arr,query_sc.len);
    #endif
    
    EXEC SQL
    select sc,
    ims_designator_code
    into :whse_sc,
    :ims_designator_code:ims_designator_code_i
    from whse
    where part = rtrim(:query_part)
    and sc = rtrim(:query_sc);
    
    if(sqlca.sqlcode==FND ||
    sqlca.sqlcode == MULTI_ROWS)
    {
        whse_sc_exists='Y';
    }
    else
    {
        if(sqlca.sqlcode==NOT_FND)
        {
            
            /*
            There is a Logic error in the following function that prevents the sql in the following
            function from returning back a more correct IMS Designator.  Therefore, I'm commenting out
            the invoking of the function until a more sound logic can be determined to insure that a
            more accurate IMS Designator is returned instead of any IMS Designator of other programs.
            Larry Mills - 03/26/2012
            
            */
            /*      errcode=A4100_check_gold_whse_part(); */
        }
        else
        {
            printf("A4100_check_gold_whse\n");
            assert(query_part.len <= sizeof(query_part.arr) - 1) ;
            printf("\nQuery Part (%s) (%d)",query_part.arr,query_part.len);
            assert(query_sc.len <= sizeof(query_sc.arr) - 1) ;
            printf("\nQuery SC (%s) (%d)",query_sc.arr,query_sc.len);
            printf("\nBad SQLCODE\n");
            errcode=sqlca.sqlcode;
            A999_02_dberr("A4100_check_gold_whse");
        }
    }
    
    return(errcode);
}
/*

*/
int A4100_check_gold_whse_part()
{
    int errcode=0;
    
    
    assert(query_part.len <= sizeof(query_part.arr) - 1) ;
    assert(query_sc.len <= sizeof(query_sc.arr) - 1) ;
    #if DEBUG
    printf("A4100_check_gold_whse_part\n");
    printf("Query Part (%s) (%d)\n",query_part.arr,query_part.len);
    printf("Query SC (%s) (%d)\n",query_sc.arr,query_sc.len);
    #endif
    
    /*
    EXEC SQL
    select ims_designator_code
    into :ims_designator_code:ims_designator_code_i
    from whse
    where part = rtrim(:query_part);
    */
    
    STRINIT(mysql) ;
    strcpy(mysql,"select distinct ims_designator_code ");
    strcat(mysql,"from scmsec.stlscm_scinf_v a,whse w ");
    strcat(mysql,"where 1=1 ");
    strcat(mysql,"and w.part = rtrim('");
    strcat(mysql,(char *) query_part.arr);
    strcat(mysql,"') and w.sc=a.sc ");
    if(strncmp((char *) processing_mdl.arr,"AV8B",4)==0)
    {
        strcat(mysql,"and w.ims_designator_code <> 'HISSZZZ' " );
    }
    else
    {
        if(strncmp((char *) processing_mdl.arr,"F18",3)==0)
        {
            strcat(mysql,"and w.ims_designator_code <> 'F18ZZZ' ");
        }
        else
        {
            if(strncmp((char *) processing_mdl.arr,"F15",3)==0)
            {
                strcat(mysql,"and w.ims_designator_code not in ('F15KOREA','F15SG','F15SA') ");
            }
        }
    }
    strcat(mysql,"and cust_model like '");
    strcat(mysql,(char *) processing_mdl.arr);
    strcat(mysql,"%' and initl_sc = 'Y' and system like '%TAV%' order by 1 ");
    
    #if DEBUG
    printf("\nA0000_005_get_pgm_sc SQL (%s)",mysql);
    #endif
    
    EXEC SQL PREPARE pgm_sc_sql from :mysql;
    EXEC SQL DECLARE pgm_sc_csr CURSOR FOR pgm_sc_sql;
    
    EXEC SQL OPEN pgm_sc_csr;
    
    if(sqlca.sqlcode==FND)
    {
        EXEC SQL FETCH pgm_sc_csr
        into :current_ims_designator_code;
        if(sqlca.sqlcode == FND)
        {
            assert(ims_designator_code.len <= sizeof(ims_designator_code.arr) - 1) ;
            if(current_ims_designator_code.len >0)
            {
                assert(query_part.len <= sizeof(query_part.arr) - 1) ;
                assert(query_sc.len <= sizeof(query_sc.arr) - 1) ;

                #if DEBUG
                printf("A4100_check_gold_whse_part - Change IMS Des\n");
                printf("Query Part (%s) (%d)\n",query_part.arr,query_part.len);
                printf("Query SC (%s) (%d)\n",query_sc.arr,query_sc.len);
                printf("WHSE IMS Des (%s)\n",(char *) ims_designator_code.arr);
                #endif
                cnt_whse_009_ims_des_chgs++;
                memset((char *) &whse_FMT.ims_designator_code,' ',sizeof(whse_FMT.ims_designator_code));
                assert(current_ims_designator_code.len <= sizeof(whse_FMT.ims_designator_code)) ;
                strncpy((char *) &whse_FMT.ims_designator_code,(char *) current_ims_designator_code.arr,current_ims_designator_code.len);
            }
        }
        else
        {
            if(sqlca.sqlcode==NOT_FND)
            {
            }
            else
            {
                printf("A4100_check_gold_whse_part FETCH Row\n");
                assert(query_part.len <= sizeof(query_part.arr) - 1) ;
                printf("\nQuery Part (%s) (%d)",query_part.arr,query_part.len);
                printf("\nBad SQLCODE\n");
                errcode=sqlca.sqlcode;
                A999_02_dberr("A4100_check_gold_whse_part");
            }
        }
    }
    else
    {
        if(sqlca.sqlcode==NOT_FND)
        {
        }
        else
        {
            printf("A4100_check_gold_whse_part OPEN CURSOR \n");
            assert(query_part.len <= sizeof(query_part.arr) - 1) ;
            printf("\nQuery Part (%s) (%d)",query_part.arr,query_part.len);
            printf("\nBad SQLCODE\n");
            errcode=sqlca.sqlcode;
            A999_02_dberr("A4100_check_gold_whse_part");
        }
    }
    
    return(errcode);
}
/*

*/
int A4105_check_gold_whse_select()
{
    int errcode=0;
    
    #if DEBUG
    printf("A4105_check_gold_whse_select\n");
    printf("Does Whse SC Exist (%c)\n",whse_sc_exists);
    #endif
    
    if(whse_sc_exists=='Y')
    {
        if(whse_FMT.update_create_delete=='C')
        {
            whse_FMT.update_create_delete='U';
            if(ims_designator_code_i==0)
            {
                memset((char *) &whse_FMT.ims_designator_code,' ',sizeof(whse_FMT.ims_designator_code));
                assert(ims_designator_code.len <= sizeof(whse_FMT.ims_designator_code)) ;
                strncpy((char *) &whse_FMT.ims_designator_code,(char *) ims_designator_code.arr,ims_designator_code.len);
            }
            errcode=A4110_compare_whse_rcd();
        }
        else
        {
            if(whse_FMT.update_create_delete=='U')
            {
                errcode=A4110_compare_whse_rcd();
            }
            else
            {
                if(whse_FMT.update_create_delete=='D')
                {
                }
            }
        }
    }
    else
    {
        if(whse_FMT.update_create_delete=='C')
        {
            whse_sc_exists='Y';
            write_output_whse='Y';
        }
        else
        {
            if(whse_FMT.update_create_delete=='U')
            {
                STRINIT(sc_error_msg) ;
                strcpy(sc_error_msg,"006-WHSE Acty Rcd Code to update when Part/SC does not Exists in Gold\n");
                STRINIT(output_sc_error_file_outarea) ;
                strncpy((char *) output_sc_error_file_outarea,(char *) &whse_FMT.part,32);
                strncpy((char *) &output_sc_error_file_outarea[35],(char *) &whse_FMT.sc,20);
                strncpy((char *) &output_sc_error_file_outarea[60],(char *) sc_error_msg,71);
                output_sc_error_file_outarea[131]='\0';
                errcode=A9999_write_output_sc_error_file();
            }
            else
            {
                if(whse_FMT.update_create_delete=='D')
                {
                    STRINIT(sc_error_msg) ;
                    strcpy(sc_error_msg,"007-WHSE Acty Rcd Code not in Gold to Delete\n");
                    STRINIT(output_sc_error_file_outarea) ;
                    strncpy((char *) output_sc_error_file_outarea,(char *) &whse_FMT.part,32);
                    strncpy((char *) &output_sc_error_file_outarea[35],(char *) &whse_FMT.sc,20);
                    strncpy((char *) &output_sc_error_file_outarea[60],(char *) sc_error_msg,45);
                    output_sc_error_file_outarea[105]='\0';
                    errcode=A9999_write_output_sc_error_file();
                }
            }
        }
    }
    
    return(errcode);
}
int A4110_compare_whse_rcd()
{
    int errcode=0;
    write_output_whse='N';
    
    #if DEBUG
    printf("A4110_compare_whse_rcd\n");
    #endif
    
    /*  Currently there are not fields on the Whse Rcd that is being change by this process.  */
    
    write_output_whse='N';
    
    return(errcode);
}
/*

*/
int A4999_move_whse_rcd()
{
    int errcode=0;
    
    #if DEBUG
    printf("A4999_move_whse_rcd\n");
    #endif
    
    strncpy((char *) &whse_API.customer,(char *) &whse_FMT.customer,20);
    whse_API.update_create_delete=whse_FMT.update_create_delete;
    strncpy((char *) &whse_API.part,(char *) &whse_FMT.part,50);
    strncpy((char *) &whse_API.sc,(char *) &whse_FMT.sc,20);
    strncpy((char *) &whse_API.table_nbr,(char *) &whse_FMT.table_nbr,3);
    strncpy((char *) &whse_API.table_name,(char *) &whse_FMT.table_name,30);
    strncpy((char *) &whse_API.user_ref1,(char *) &whse_FMT.user_ref1,20);
    strncpy((char *) &whse_API.user_ref2,(char *) &whse_FMT.user_ref2,20);
    strncpy((char *) &whse_API.user_ref3,(char *) &whse_FMT.user_ref3,20);
    strncpy((char *) &whse_API.user_ref4,(char *) &whse_FMT.user_ref4,20);
    strncpy((char *) &whse_API.user_ref5,(char *) &whse_FMT.user_ref5,20);
    strncpy((char *) &whse_API.user_ref6,(char *) &whse_FMT.user_ref6,20);
    strncpy((char *) &whse_API.user_ref7,(char *) &whse_FMT.user_ref6,20);
    strncpy((char *) &whse_API.user_ref8,(char *) &whse_FMT.user_ref8,20);
    strncpy((char *) &whse_API.user_ref9,(char *) &whse_FMT.user_ref9,20);
    strncpy((char *) &whse_API.user_ref10,(char *) &whse_FMT.user_ref10,20);
    strncpy((char *) &whse_API.user_ref11,(char *) &whse_FMT.user_ref11,20);
    strncpy((char *) &whse_API.user_ref12,(char *) &whse_FMT.user_ref12,20);
    strncpy((char *) &whse_API.user_ref13,(char *) &whse_FMT.user_ref13,20);
    strncpy((char *) &whse_API.user_ref14,(char *) &whse_FMT.user_ref14,20);
    strncpy((char *) &whse_API.user_ref15,(char *) &whse_FMT.user_ref15,20);
    strncpy((char *) &whse_API.stock_level,(char *) &whse_FMT.stock_level,15);
    strncpy((char *) &whse_API.reorder_point,(char *) &whse_FMT.reorder_point,15);
    strncpy((char *) &whse_API.remarks,(char *) &whse_FMT.remarks,60);
    strncpy((char *) &whse_API.default_bin,(char *) &whse_FMT.default_bin,20);
    whse_API.freeze_ordering_b=whse_FMT.freeze_ordering_b;
    whse_API.freeze_receiving_b=whse_FMT.freeze_receiving_b;
    whse_API.freeze_iss_disp_b=whse_FMT.freeze_iss_disp_b;
    whse_API.freeze_xfer_i_b=whse_FMT.freeze_xfer_i_b;
    whse_API.freeze_xfer_o_b=whse_FMT.freeze_xfer_o_b;
    whse_API.freeze_other_b=whse_FMT.freeze_other_b;
    whse_API.pi_recommend_b=whse_FMT.pi_recommend_b;
    strncpy((char *) &whse_API.auth_allow,(char *) &whse_FMT.auth_allow,15);
    strncpy((char *) &whse_API.c_elin,(char *) &whse_FMT.c_elin,20);
    strncpy((char *) &whse_API.ims_designator_code,(char *) &whse_FMT.ims_designator_code,20);
    whse_API.eol='\n';
    
    if(whse_API.update_create_delete=='C')
    {
        cnt_whse_009_inserts++;
    }
    else
    {
        if(whse_API.update_create_delete=='U')
        {
            /*      cnt_whse_009_updates++;   */
        }
        else
        {
            if(whse_API.update_create_delete=='D')
            {
                cnt_whse_009_deletes++;
            }
        }
    }
    
    if((whse_API.update_create_delete=='C') ||
    (whse_API.update_create_delete=='D'))
    {
        STRINIT(output_sc_file_outarea) ;
        assert(sizeof(whse_API) <= sizeof(output_sc_file_outarea));
        strncpy((char *) output_sc_file_outarea,(char *) &whse_API,sizeof(whse_API));
        output_sc_file_outarea[sizeof(whse_API)]='\0';
        errcode=A9999_write_output_sc_file();
    }
    
    return(errcode);
}
/*

*/
int     A9999_write_output_sc_file()
{
    int errcode=0;
    int i1=0;
    
    #if DEBUG
    printf("A9999_write_output_sc_file\n");
    #endif
    
    
    #if DEBUG
    printf("Output Record (%s) (%d)\n",output_sc_file_outarea,strlen(output_sc_file_outarea));
    #endif
    
    assert(strlen(output_sc_file_outarea) <= sizeof(output_sc_file_outarea));
    i1=fwrite(output_sc_file_outarea,strlen(output_sc_file_outarea),1,OUTPUT_SC_FILE_FP);
    if(i1!=1)
    {
        printf("\n**********************************************************");
        printf("\nError writing output output_sc_file (%d)",i1);
        errcode=510;
    }
    
    return(errcode);
}
int     A9999_write_output_sc_error_file()
{
    int errcode=0;
    int i1=0;
    
    #if DEBUG
    printf("A9999_write_output_sc_error_file\n");
    #endif
    
    
    #if DEBUG
    printf("Output Error Record (%s) (%d)\n",output_sc_error_file_outarea,strlen(output_sc_error_file_outarea));
    #endif
    
    assert(strlen(output_sc_error_file_outarea) <= sizeof(output_sc_error_file_outarea));
    cnt_output_error_rcds++;
    i1=fwrite(output_sc_error_file_outarea,strlen(output_sc_error_file_outarea),1,OUTPUT_SC_ERROR_FILE_FP);
    if(i1!=1)
    {
        printf("\n**********************************************************");
        printf("\nError writing output output_sc_error_file (%d)",i1);
        errcode=511;
    }
    
    return(errcode);
}
