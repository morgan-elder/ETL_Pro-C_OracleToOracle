#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "Login.h"

#define ORA_DIR_ENV "ORALOGIN"

EXEC SQL INCLUDE sqlca;

static char pwdFile[256] ;
static char uidFile[256] ;
static char *oraLogin ;
static char *two_task ;
static int debugLogin = 0 ;

static void getOraLoginDir() {
  oraLogin = getenv("ORALOGIN");
}

static void initLoginInfo(char *oraLogin) {
  char *defaultDir = "/home/scmftp" ;
  char *oraPwd ;
  char *oraUid ;
  char *dbgLogin ;

  if (oraLogin == NULL)
    oraLogin = defaultDir ;

  strcpy(pwdFile,oraLogin) ;
  strcat(pwdFile,"/") ;
  oraPwd = getenv("ORAPWD");
  if (oraPwd == NULL)
    strcat(pwdFile,".SCM_LB_pass");
  else
    strcat(pwdFile,oraPwd);

  strcpy(uidFile,oraLogin);
  strcat(uidFile,"/");
  oraUid = getenv("ORAUID");
  if (oraUid == NULL)
    strcat(uidFile,".SCM_LB_destn");
  else
    strcat(uidFile,oraUid);

  dbgLogin = getenv("DBGLOGIN") ;
  if (dbgLogin != NULL) {
    debugLogin = 1 ;
  }
}

static void initLoginInfoX(char *uid, char *pwd, char *oraLogin) {
  if (oraLogin == NULL) {
    /* there are no env variables so used in passed values */
    strcpy(pwdFile,pwd) ;
    strcpy(uidFile,uid) ;
  } else {
    /* env variables have a higher priority - use them */
    initLoginInfo(oraLogin) ; 
  }
}


void Login3(int debug) 
{
  debugLogin = debug ;
  Login() ; 
}

void Login()
{
    FILE *fp_uid;
    FILE *fp_pass;
    char uid[20] ;
    char pass[20] ;

    initLoginInfo(getenv(ORA_DIR_ENV)) ;

    if((fp_uid = fopen(uidFile,"r")) == NULL)
    {
        printf("Unable to open file (%s) containing uid.\n", uidFile);
        exit(2);
    }

    if((fp_pass = fopen(pwdFile,"r")) == NULL)
    {
        printf("Unable to open file (%s) containing password.\n", pwdFile);
        exit(2);
    }


    fgets(uid,20,fp_uid);
    uid[strlen(uid)-1] = '\0';
    fclose(fp_uid);

    fgets(pass,20,fp_pass);
    pass[strlen(pass)-1] = '\0';


    /* Connect */

    if (debugLogin) {
     two_task = getenv("TWO_TASK") ;
     if (two_task != NULL)
       printf("\nFor %s: uidFile=%s uid=%s pwdFile=%s pwd=%s\n", two_task, uidFile, uid, pwdFile, pass) ;
     else
       printf("\nuidFile=%s uid=%s pwdFile=%s pwd=%s\n", uidFile, uid, pwdFile, pass) ;
    }

    EXEC SQL CONNECT :uid IDENTIFIED by :pass;
    if(sqlca.sqlcode != 0) {
		  db_err("Login");
    }
}

/*
*/
void Login2(char *user_file, char *pass_file, char *id, char *dsn)
{
	char temp_id[20];
	char temp_dsn[50];
  char uid[20] ;
  char pass[20] ;

	FILE *fp_uid;
	FILE *fp_pass;

  initLoginInfoX(user_file, pass_file, getenv(ORA_DIR_ENV)) ;

	strncpy(temp_id,id,strlen(id));
	strncpy(temp_dsn,dsn,strlen(dsn));
	temp_id[strlen(id)] = '\0';
	temp_dsn[strlen(dsn)] = '\0';
	printf("'%s' '%s' '%s' '%s'\n",uidFile,pwdFile,id,dsn);

	if((fp_uid = fopen(uidFile,"r")) == NULL)
	{
		printf("Unable to open file containing uid.\n");
		exit(2);
	}

	if((fp_pass = fopen(pwdFile,"r")) == NULL)
	{
		printf("Unable to open file containing password.\n");
		exit(2);
	}

	fgets(uid,20,fp_uid);
	uid[strlen(uid)-1] = '\0';
	fclose(fp_uid);

	fgets(pass,20,fp_pass);
	pass[strlen(pass)-1] = '\0';


	printf("(%s) (PW HIDDEN) (%s) (%s)\n",uid,temp_id,temp_dsn);

	/* Connect */
	EXEC SQL CONNECT :uid IDENTIFIED by :pass
		AT :temp_id USING :temp_dsn;
	if(sqlca.sqlcode != 0) {

    if (debugLogin) {
      two_task = getenv("TWO_TASK") ;
      if (two_task != NULL)
        printf("\nFor %s: uidFile=%s uid=%s pwdFile=%s pwd=%s\n", two_task, uidFile, uid, pwdFile, pass) ;
      else
        printf("\nuidFile=%s uid=%s pwdFile=%s pwd=%s\n", uidFile, uid, pwdFile, pass) ;
    }

		db_err("Login2");
  }
}

void setDebug(int debug) {
  debugLogin = debug ;
}
