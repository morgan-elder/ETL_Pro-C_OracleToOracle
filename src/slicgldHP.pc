/* vim: ts=2:sw=2:sts=2:et:syntax=c:
**************************************************************************
*  PROGRAM NAME: slicgldHP.pc
*
*  PURPOSE: The purpose of this program is to extract and qualify from the
*        slic_hp_chg Table Supersedure activity that needs to be passed to Gold.
*        It create supersedure notifications to GOLD and for the new Part numbers, it
*        create the HB and HG Candidate Record.
*
*  INPUTS:   1. Oracle Table slic_hp_chg Table
*
*
*  OUTPUTS:  1. Candidate HP Records
*          2. Candidate HG Records
*
*
*  CHANGE HISTORY:
*   REV     DATE    Programmer           CHANGE
*   ---  --------   -----------------    ------
*    00  03/02/00   Original Author          Initial coding
*    01  10/17/01   Original Author           Added code to check that the supersedure part and cage
*                                          exist in the HA Table
*    02  08/19/02   Contributor            change signon to use Login() function
*    03  01/12/15   Douglas Elder        use Method 2 for delete 
*    04  07/04/15   Douglas Elder        use struct to write hp, hb, & hg
*                                        fixed formatting of hp and used
                                         hg struct to write that rec
**************************************************************************
*/
/* C System Includes                  */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <assert.h>

/* Application Peculiar Includes      */
#include "slichb_chgrcd.h"
#include "slichg_chgrcd.h"
#include "slichp_chgrcd.h"
#include "rpad.h"
#include "varcharSetup.h"

/* File Pointer Definitions           */
FILE *hp_candidates_fp;
FILE *error_rpt_fp;
FILE *fh_block2;
FILE *fh_block3;

/* #define SQLCA_STORAGE_CLASS extern */
#define NOT_FND 1403
#define FND 0
#define MULTI_ROWS -2112

/* Application Peculiar Structures    */

EXEC SQL BEGIN DECLARE SECTION;

/*      Oracle User Sign-on Area   */
char    uid[20];
char    pwd[20];

/*      Change Table Host Variables */

varchar    chg_err_msg[50];

/*      SLIC HAX04 Table Host Variables */

varchar    hax04_refnumha[33];
varchar    hax04_cagecdxh[6];
varchar    hax04_scm_pgm[11];
varchar    rsref_scm_pgm[11];
varchar    refnum_scm_pgm[11];

/*      SLIC HB Table Host Variables */

varchar    refnumhb[33];
varchar    cagecdhb[6];
varchar    addrefhb[33];
varchar    adcagehb[6];

/*      SLIC CHG HP Table Host Variables */

char    hp_lcntypxb;
short   hp_lcntypxb_i;

/*      SLIC CHG HP Table Host Variables */

varchar    refnumha[33];
varchar    cagecdxh[6];
varchar    eiacodxa[11];
varchar    lsaconxb[19];
varchar    altlcnxb[3];
char    lcntypxb;
short   lcntypxb_i;
varchar    canumbhp[32];
char    rspindhp;
short   rspindhp_i;

/*      SLIC HPX01 Table Host Variables */

varchar    rsrefno[33];
short    rsrefno_i;
varchar    rscagecd[6];
short    rscagecd_i;
char    rspind;
short   rspind_i;

/*    GOLD Cat1 Table Host variables */
varchar gold_part[51];
varchar    imsdescde[21];
varchar    rsref_imsdes[21];
varchar    refnum_imsdes[21];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

/*  Function prototype area       */

int    A0100_get_argmnt(char argc, char **argv);
int    A999_00_open_files(void);
void    A999_02_dberr(void);
int     A1000_sql_select(slichb_chgrcd *Slichb_Chgrcd,slichp_chgrcd *Slichp_Chgrcd);
int    A1100_check_complete_supersedure();
int    A1105_get_ha_cage();
int    A1199_delete_hp_chg_table();
int    A1199_update_hp_chg_table();
int    A1200_check_hax04();
int    A1299_01_check_hax04_pn(char *partno,char *cage);
int    A1299_02_create_hax04_report();
int     A2000_build_seq_00_03_records(slichb_chgrcd *Slichb_Chgrcd,slichp_chgrcd *Slichp_Chgrcd);
int    A2010_build_seq_03_records(slichb_chgrcd *Slichb_Chgrcd);
int    A3000_get_cat1(char *partno);
int     Z9999_write_hp_candidates(slichp_chgrcd *Slichp_Chgrcd);
int     Z9999_write_hpx01_seq_00_candidates();
int     Z9999_write_hpx01_seq_03_candidates(slichb_chgrcd *Slichb_Chgrcd);

/*       program variables  */
char    hp_chgrcd[500];
char    *hp_candidates ;
char    *error_file_name ;
char    error_file_buffer[5000];
char    *program_model ;
char    spaces[]={"                                       "};

/*       Flags              */

/*       Record Counts      */
int    rows_fetched=0;
int    hp_seq_00_candidate_written=0;
int    hp_seq_02_candidate_written=0;
int    hp_seq_03_candidate_written=0;
int    hp_candidate_deleted=0;
int    hp_candidate_written=0;
int    error_rcds_written=0;
int    chk_rsrefno=0;
int    chk_refnum=0;

main(int argc, char **argv)
{
    
    slichb_chgrcd    Slichb_Chgrcd;
    slichp_chgrcd    Slichp_Chgrcd;
    
    int    errcode=0;
    printf("\nCompiled %s on %s at %s\n",__FILE__,__DATE__,__TIME__);    
    errcode=A0100_get_argmnt(argc, argv);
    
    if((strncmp(program_model,"F18",3)==0)||
    (strncmp(program_model,"AV8B",4)==0)||
    (strncmp(program_model,"F15",3)==0))
    {
    }
    else
    {
        printf("\n#######################################################");
        printf("\n# Processing an invalid Program Model (%s) ",program_model);
        printf("\n#######################################################\n\n");
        errcode=-1;
    }
    
    if (errcode == FND)
    {
        Login();
        if (sqlca.sqlcode == FND)
        {
            printf("\nconnected.\n");
        }
        else
        {
            printf("\n***********************************************************");
            printf("\n*                                                         *");
            printf("\n*       Not connected.                                    *");
            printf("\n*                                                         *");
            printf("\n***********************************************************");
            A999_02_dberr();
        }
    }
    else
    {
        printf("\n***********************************************************");
        printf("\n*                                                         *");
        printf("\n*     Unable to Read Command Line Arguments               *");
        printf("\n*                                                         *");
        printf("\n***********************************************************");
    }
    
    if (errcode == FND)
    {
        errcode=A999_00_open_files();
        if (errcode == FND)
        {
            errcode=A1000_sql_select(&Slichb_Chgrcd,&Slichp_Chgrcd);
        }
        else
        {
            printf("\n***********************************************************");
            printf("\n*                                                         *");
            printf("\n*  Unable to Open Files for Processing                    *");
            printf("\n*                                                         *");
            printf("\n***********************************************************");
        }
    }
    
    printf("\n-----------------------------------------------------------");
    printf("\n- Number of rows selected\t\t\t%d",rows_fetched);
    printf("\n- Number of HP Seq 00 Candidates written\t%d",hp_seq_00_candidate_written);
    printf("\n- Number of HP Seq 02 Candidates written\t%d",hp_seq_02_candidate_written);
    printf("\n- Number of HP Seq 03 Candidates written\t%d",hp_seq_03_candidate_written);
    printf("\n- Number of HP Change Records Deleted\t\t%d",hp_candidate_deleted);
    printf("\n- Number of HP Candidates written\t\t%d",hp_candidate_written);
    printf("\n- Number of Report Records Written\t\t%d",error_rcds_written);
    printf("\n\n- Program Error Code (%d)\t\t",errcode);
    printf("\n-----------------------------------------------------------");
    
    if (hp_candidates_fp != NULL)
      fclose(hp_candidates_fp);
    if (error_rpt_fp != NULL)
      fclose(error_rpt_fp) ;
 
    if (errcode == FND)
    {
        printf("\n-----------------------------------------------------------");
        printf("\n-                                                         -");
        printf("\n-                    Commit Work                          -");
        printf("\n-                                                         -");
        printf("\n-----------------------------------------------------------");
        EXEC SQL COMMIT WORK RELEASE;
    }
    else
    {
        printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        printf("\n~                                                         ~");
        printf("\n~            Work not Committed                           ~");
        printf("\n~                                                         ~");
        printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        EXEC SQL ROLLBACK WORK RELEASE;
    }
    printf("\n");
    exit(errcode);
}
/*

*/
int    A0100_get_argmnt(char argc, char **argv)
{
    int    errcode=0;
    char opt;
    extern char *optarg;
    while ((opt=getopt (argc, argv,"a:b:c:A:B:C")) !=EOF)
    {
        switch (opt)
        {
            case 'a':
            case 'A':
            hp_candidates = optarg;
            printf("\nhp_candidates=%s",hp_candidates);
            break;
            case 'b':
            case 'B':
            error_file_name = optarg;
            printf("\nerror_file_name=%s",error_file_name);
            break;
            case 'c':
            case 'C':
            program_model = optarg ;
            printf("\nProcessing Program Model (%s)",program_model);
            break;
            case '?':
            errcode=12;
            break;
        }
    }
    return(errcode);
}
/*

*/
int    A999_00_open_files(void)
{
    int    errcode=0;
    
    #if DEBUG
    printf("\nA999_00_open_files");
    #endif
    
    
    if ((hp_candidates_fp=fopen(hp_candidates,"w")) == NULL)
    {
        printf("\n***********************************************************");
        printf("\n*                                                         *");
        printf("\n* Could not open Output Candidates File (%s) ",hp_candidates);
        printf("\n*                                                         *");
        printf("\n***********************************************************");
        errcode=500;
    }
    else
    {
        printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        printf("\n~                                                                   ~");
        printf("\n~  Processing Output Candidates File (%s) ",hp_candidates);
        printf("\n~                                                                   ~");
        printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    }
    
    if ((error_rpt_fp=fopen(error_file_name,"w")) == NULL)
    {
        printf("\n***********************************************************");
        printf("\n*                                                         *");
        printf("\n* Could not open Error Report File (%s) ",error_file_name);
        printf("\n*                                                         *");
        printf("\n***********************************************************");
        errcode=500;
    }
    else
    {
        printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        printf("\n~                                                                   ~");
        printf("\n~  Processing error_file_name (%s) ",error_file_name);
        printf("\n~                                                                   ~");
        printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    }
    
    
    return(errcode);
}
/*

*/
void    A999_02_dberr()
{
    char msg_buf[200];
    size_t  buf_size=sizeof(msg_buf);
    size_t  msg_len;
    printf("\n???????????????????????????????????????????????????????????");
    printf("\n?                                                         ?");
    printf("\n?\tData Base Error has occurred:");
    sqlglm(msg_buf, &buf_size, &msg_len);
    sqlglm(msg_buf, &buf_size, &msg_len);
    msg_buf[msg_len]='\0';
    printf("\n?\t\t%s",msg_buf);
    printf("\n?\t\tSQLCODE: %d",sqlca.sqlcode);
    printf("\n?\t\tSQLERR MSG %s",sqlca.sqlerrm.sqlerrmc);
    printf("\n?");
    printf("\n???????????????????????????????????????????????????????????");
    
    return;
}
/*

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*/

int     A1000_sql_select(slichb_chgrcd *Slichb_Chgrcd,slichp_chgrcd *Slichp_Chgrcd)
{
    
    int    errcode=0;
    int    cmplt_supersedure=0;
    int    check_hax04=0;
    int    fetch_hp_chgs=1;
    char    mysql[5000];
    
    #if DEBUG
    printf("\nA1000_sql_select");
    #endif
    
    memset(mysql,' ',sizeof(mysql));
    
    strcpy(mysql,"select distinct chghp.refnumha, chghp.cagecdxh, chghp.eiacodxa, ");
    strcat(mysql,"chghp.lsaconxb, chghp.altlcnxb, chghp.lcntypxb, replace(chghp.canumbhp,'''',''''''), ");
    strcat(mysql,"nvl(hp.lcntypxb,' '), nvl(hpx01.rsrefno,' '), nvl(hpx01.rscagecd,' '), nvl(hpx01.rsind,' '), ");
    strcat(mysql,"nvl(hp.rspindhp,' '), nvl(hpx01.rsrefno,' ') ");
    if(strncmp(program_model,"F18",3)==0)
    {
        strcat(mysql,"from scm.slic_hp_chgs chghp, f18_hpx01 hpx01, f18_hp hp ");
    }
    else
    {
        strcat(mysql,"from scm.slic_hp_chgs_");
        strcat(mysql,program_model);
        strcat(mysql," chghp, ");
        strcat(mysql,program_model);
        strcat(mysql,"_hpx01 hpx01, ");
        strcat(mysql,program_model);
        strcat(mysql,"_hp hp ");
    }
    strcat(mysql,"where 0 = hp.can_int (+) ");
    strcat(mysql,"and rpad(chghp.refnumha,32,' ') = hp.refnumha (+) ");
    strcat(mysql,"and chghp.cagecdxh = hp.cagecdxh (+) ");
    strcat(mysql,"and rpad(chghp.eiacodxa,10,' ') = hp.eiacodxa (+) ");
    strcat(mysql,"and rpad(chghp.lsaconxb,18,' ') = hp.lsaconxb (+) ");
    strcat(mysql,"and rpad(chghp.altlcnxb,2,' ') = hp.altlcnxb (+) ");
    strcat(mysql,"and chghp.lcntypxb = hp.lcntypxb (+) ");
    strcat(mysql,"and rpad(chghp.canumbhp,15,' ') = hp.canumbhp (+) ");
    strcat(mysql,"and hp.can_int = hpx01.can_int (+) ");
    strcat(mysql,"and hp.refnumha = hpx01.refnumha (+) ");
    strcat(mysql,"and hp.cagecdxh = hpx01.cagecdxh (+) ");
    strcat(mysql,"and hp.eiacodxa = hpx01.eiacodxa (+) ");
    strcat(mysql,"and hp.lsaconxb = hpx01.lsaconxb (+) ");
    strcat(mysql,"and hp.altlcnxb = hpx01.altlcnxb (+) ");
    strcat(mysql,"and hp.lcntypxb = hpx01.lcntypxb (+) ");
    strcat(mysql,"and hp.canumbhp = hpx01.canumbhp (+) ");
    strcat(mysql,"and chghp.chg_update_cde in ('A','U') ");
    strcat(mysql,"and chghp.slicgld_flag='Y' ");
    strcat(mysql,"order by 1,2,3,4 ");
    
    
    #if DEBUG
    printf("\nA1000_sql_select SQL (%s)",mysql);
    #endif
    
    EXEC SQL PREPARE S1 from :mysql;
    EXEC SQL DECLARE C1 CURSOR FOR S1;
    
    EXEC SQL OPEN C1;
    
    if (sqlca.sqlcode == FND)
    {
        while (fetch_hp_chgs)
        {
            #if DEBUG
            printf("\n############################ A1000_sql_select FETCH ##########################################");
            #endif
            INITVCHAR(refnumha) ;
            INITVCHAR(cagecdxh) ;
            INITVCHAR(eiacodxa) ;
            INITVCHAR(lsaconxb) ;
            INITVCHAR(altlcnxb) ;
            lcntypxb=' ';
            INITVCHAR(canumbhp) ;
            hp_lcntypxb=' ';
            INITVCHAR(rsrefno) ;
            INITVCHAR(rscagecd) ;
            rspind=' ';
            rspindhp=' ';
            EXEC SQL FETCH C1 into :refnumha,
            :cagecdxh,
            :eiacodxa,
            :lsaconxb,
            :altlcnxb,
            :lcntypxb,
            :canumbhp,
            :hp_lcntypxb:hp_lcntypxb_i,
            :rsrefno:rsrefno_i,
            :rscagecd:rscagecd_i,
            :rspind:rspind_i,
            :rspindhp:rspindhp_i,
            :rsrefno:rsrefno_i;
            
            if (sqlca.sqlcode == FND)
            {
                
                rows_fetched++;
                cmplt_supersedure=A1100_check_complete_supersedure();
                if(cmplt_supersedure==0)
                {
                    errcode=Z9999_write_hp_candidates(Slichp_Chgrcd);
                    if(errcode==0)
                    {
                        errcode=A2000_build_seq_00_03_records(Slichb_Chgrcd,Slichp_Chgrcd);
                    }
                    if(rsrefno.arr[0] != ' ')
                    {
                        check_hax04=A1200_check_hax04();
                        if(check_hax04!=0)
                        {
                            fetch_hp_chgs=0;
                        }
                    }
                }
                else
                {
                    if(cmplt_supersedure==1)
                    {
                    }
                    else
                    {
                        fetch_hp_chgs=0;
                        return(cmplt_supersedure);
                    }
                }
            }
            else
            {
                fetch_hp_chgs=0;
                if (sqlca.sqlcode == NOT_FND)
                {
                    if (rows_fetched > 0)
                    {
                    }
                    else
                    {
                        printf("\n***************************************************");
                        printf("\n*                                                 *");
                        printf("\n*                                                 *");
                        printf("\n*  No HP Activity Pulled                          *");
                        printf("\n*                                                 *");
                        printf("\n*                                                 *");
                        printf("\n***************************************************");
                    }
                }
                else
                {
                    printf("\nA1000_sql_select - Fetch Cursor");
                    printf("\nBad SQLCODE ");
                    errcode=sqlca.sqlcode;
                    A999_02_dberr();
                    fetch_hp_chgs=0;
                }
            }
        }
    }
    else
    {
        if (sqlca.sqlcode == NOT_FND)
        {
        }
        else
        {
            printf("\nA1000_sql_select - Open Cursor");
            A999_02_dberr();
            errcode=sqlca.sqlcode;
            fetch_hp_chgs=0;
        }
    }
    
    return(errcode);
}
/*

*/
int    A1100_check_complete_supersedure()
{
    int    errcode=0;
    
    #if DEBUG
    printf("\nA1100_check_complete_supersedure start");
    printf("\nhp_lcntypxb (%c)",hp_lcntypxb);
    printf("\nlsaconxb (%s)",(char *) lsaconxb.arr);
    eiacodxa.arr[eiacodxa.len] = '\0';
    printf("\neiacodxa (%s)",(char *) eiacodxa.arr);
    printf("\nA1100_check_complete_supersedure 1");
    #endif
    
    INITVCHAR(chg_err_msg) ;
    #if DEBUG
    printf("\nhp_lcntypxb=%c errcode=%d",hp_lcntypxb, errcode) ;
    #endif
    
    if(hp_lcntypxb==' ')
    {
        errcode=A1199_delete_hp_chg_table();
        if(errcode==0)
        {
            errcode=1;
        }
    }
    
    if(errcode==0)
    {
        
        #if DEBUG
        printf("\ncheck rsrefno.arr[0]") ;
        printf("\nresrefno.arr[0]=%c",rsrefno.arr[0]) ;
        #endif
        
        if(rsrefno.arr[0]==' ') {
            strcpy(chg_err_msg.arr,"SUPERSEDURE PART NUMBER BLANK") ;
            chg_err_msg.len = strlen(chg_err_msg.arr);
            #if DEBUG
            printf("\nchg_err_msg.arr=%s len=%d", chg_err_msg.arr, chg_err_msg.len) ;
            printf("\ninvoke A1199") ;
            #endif
            errcode=A1199_update_hp_chg_table();
        } else {
            #if DEBUG
            printf("\nrscaged.arr[0]=%c",rscagecd.arr[0]) ;
            #endif
            if(rscagecd.arr[0]==' ') {
                errcode=A1105_get_ha_cage();
                if(errcode==FND)
                {
                }
                else
                {
                    if(errcode==1)
                    {
                        errcode=A1199_update_hp_chg_table();
                    }
                    else
                    {
                    }
                }
            } else {
                errcode=A1105_get_ha_cage();
                if(errcode==FND) {
                   /* do nothing */
                } else if (errcode==1) {
                  errcode=A1199_update_hp_chg_table();
                } else {
                   /* do nothing */
                }
            }
        }
    }
    #if DEBUG
    printf("\nA1100_check_complete_supersedure end");
    #endif
    
    return(errcode);
}
/*

*/
int    A1105_get_ha_cage()
{
    int    errcode=0;
    char    mysql[5000];
    
    #if DEBUG
    printf("\nA1105_get_ha_cage start");
    #endif
    
    memset(mysql,'\0',sizeof(mysql));
    
    #if DEBUG
    printf("\nmysql set to blanks len=%d", strlen(mysql)) ;
    #endif
    
    strcpy(mysql,"select cagecdxh from (select cagecdxh, ROW_NUMBER() OVER (PARTITION BY cagecdxh ORDER BY cagecdxh DESC) rank ");
       #if DEBUG
    printf("\n1. mysql=%s", mysql);
    #endif
    if(strncmp(program_model,"F18",3)==0) {
        strcat(mysql,"from F18_HA where refnumha = rpad('");
    } else {
        strcat(mysql,"from ");
        strcat(mysql,program_model);
        strcat(mysql,"_HA where refnumha = rpad('");
    }
    
    #if DEBUG
    printf("\n2. mysql=%s", mysql);
    #endif
    
    strcat(mysql,(char *) rsrefno.arr);
    strcat(mysql,"',32,' ')");
    
    #if DEBUG
    printf("\nget_ha_cage SQL (%s)",mysql);
    printf("\nPrepare") ;
    #endif
    strcat(mysql,") where rank = 1") ;
    
    EXEC SQL PREPARE S2 from :mysql;
    
    #if DEBUG
    printf("\nDeclare") ;
    #endif
    
    EXEC SQL DECLARE C2 CURSOR FOR S2;
    
    #if DEBUG
    printf("\nOpen") ;
    #endif
    
    EXEC SQL OPEN C2;
    
    if(sqlca.sqlcode==FND) {
      #if DEBUG
      printf("\nFetch") ;
      #endif
      
      EXEC SQL FETCH C2
      into :rscagecd ;
      
      if(sqlca.sqlcode==FND) {
          #if DEBUG
          printf("\nFound") ;
          #endif

          /* do nothing cage exists in ha */

      } else if(sqlca.sqlcode==NOT_FND) {
          #if DEBUG
          printf("\nNot Found %d NOT_FND=%d MULTI_ROWS=%d",sqlca.sqlcode, NOT_FND, MULTI_ROWS) ;
          printf("\n") ;
          #endif
          
          #if DEBUG
          printf("\nNot Found") ;
          #endif
          strcpy(chg_err_msg.arr,"UNABLE TO LOCATE SUPERSEDURE PART IN HA TABLE") ;
          chg_err_msg.len=strlen(chg_err_msg.arr);
          #if DEBUG
          printf("\nNot found: chg_err_msg.arr=%s", chg_err_msg.arr) ;
          #endif
          errcode=1;
        } else {
          printf("\nA1105_get_ha_cage - FETCH CURSOR");
          printf("\nBad SQLCODE sqlca.sqlcode=%d", sqlca.sqlcode);
          errcode=sqlca.sqlcode;
          A999_02_dberr();
        }
            
    } else if(sqlca.sqlcode==NOT_FND) {
      strcpy(chg_err_msg.arr,"UNABLE TO LOCATE SUPERSEDURE PART IN HA TABLE");
      chg_err_msg.len= strlen(chg_err_msg.arr);
      errcode=1;
    } else {
      printf("\nA1105_get_ha_cage");
      printf("\nBad SQLCODE ");
      errcode=sqlca.sqlcode;
      A999_02_dberr();
    }
        
    
    
    #if DEBUG
    printf("\nA1105_get_ha_cage end errcode=%d", errcode);
    #endif
    
    return(errcode);
}
/*

*/
int    A1199_delete_hp_chg_table()
{
    int    errcode=0;
    char    mysql[5000];
    
    #if DEBUG
    printf("\nA1199_delete_hp_chg_table");
    #endif
    
    memset(mysql,' ',sizeof(mysql));
    
    strcpy(mysql,"DELETE from ");
    if(strncmp(program_model,"F18",3)==0)
    {
        strcat(mysql,"scm.slic_hp_chgs ");
    }
    else
    {
        strcat(mysql,"scm.slic_hp_chgs_");
        strcat(mysql,program_model);
        strcat(mysql," ");
    }
    strcat(mysql,"where refnumha=rtrim('");
    strcat(mysql,(char *) refnumha.arr);
    strcat(mysql,"') and cagecdxh='");
    strcat(mysql,(char *) cagecdxh.arr);
    strcat(mysql,"' and eiacodxa = rtrim('");
    strcat(mysql,(char *) eiacodxa.arr);
    strcat(mysql,"') and lsaconxb = rtrim('");
    strcat(mysql,(char *) lsaconxb.arr);
    strcat(mysql,"') and altlcnxb = '");
    strcat(mysql,(char *) altlcnxb.arr);
    strcat(mysql,"' and lcntypxb = 'P' and canumbhp = '");
    strcat(mysql,(char *) canumbhp.arr);
    strcat(mysql,"' ");
    
    #if DEBUG
    printf("\nA1199_delete_hp_chg_table SQL (%s)",mysql);
    #endif
    
    EXEC SQL PREPARE DELETE_HP_SQL from :mysql;
    EXEC SQL EXECUTE DELETE_HP_SQL;
    
    
    if(sqlca.sqlcode==FND)
    {
        hp_candidate_deleted++;
        #if DEBUG
        printf("\nRows Deleted (%d)",sqlca.sqlerrd[2]);
        #endif
    }
    else
    {
        if(sqlca.sqlcode==NOT_FND)
        {
            /*            printf("\nunable to locate Change Rcd (%d)",rows_fetched); */
        }
        else
        {
            printf("\nA1199_delete_hp_chg_table");
            printf("\nBad SQLCODE ");
            errcode=sqlca.sqlcode;
            A999_02_dberr();
        }
    }
    
    return(errcode);
}
/*

*/
int    A1199_update_hp_chg_table()
{
    int    errcode=1;
    char    mysql[5000];
    
    #if DEBUG
    printf("\nA1199_update_hp_chg_table");
    printf("\nProgram Model (%s)",program_model);
    #endif
    
    memset(mysql,' ',sizeof(mysql));
    
    strcpy(mysql,"update ");
    if(strncmp(program_model,"F18",3)==0)
    {
        strcat(mysql,"scm.slic_hp_chgs ");
    }
    else
    {
        strcat(mysql,"scm.slic_hp_chgs_");
        strcat(mysql,program_model);
        strcat(mysql," ");
    }
    strcat(mysql," set message=rtrim('");
    strcat(mysql,(char *) chg_err_msg.arr);
    strcat(mysql,"') where refnumha = rtrim('");
    strcat(mysql,(char *) refnumha.arr);
    strcat(mysql,"') and cagecdxh = '");
    strcat(mysql,(char *) cagecdxh.arr);
    strcat(mysql,"' and eiacodxa = rtrim('");
    strcat(mysql,(char *) eiacodxa.arr);
    strcat(mysql,"') and lsaconxb = rtrim('");
    strcat(mysql,(char *) lsaconxb.arr);
    strcat(mysql,"') and altlcnxb = '");
    strcat(mysql,(char *) altlcnxb.arr);
    strcat(mysql,"' and lcntypxb = 'P' and canumbhp = rtrim('");
    strcat(mysql,(char *) canumbhp.arr);
    strcat(mysql,"') ");
    
    #if DEBUG
    printf("\nA1199_update_hp_chg_table SQL (%s)",mysql);
    #endif
    
    EXEC SQL PREPARE UPDATE_HP_CHG_SQL from :mysql;
    EXEC SQL EXECUTE UPDATE_HP_CHG_SQL;
    
    
    if(sqlca.sqlcode==FND)
    {
        if(sqlca.sqlerrd[2]>0)
        {
            #if DEBUG
            printf("\nRows Deleted (%d)",sqlca.sqlerrd[2]);
            #endif
        }
        else
        {
            printf("\nunable to locate Change Rcd (%d)",rows_fetched);
        }
    }
    else
    {
        if(sqlca.sqlcode==NOT_FND)
        {
            printf("\nunable to locate Change Rcd (%d)",rows_fetched);
        }
        else
        {
            printf("\nA1199_update_hp_chg_table");
            printf("\nBad SQLCODE ");
            errcode=sqlca.sqlcode;
            A999_02_dberr();
        }
    }
    
    return(errcode);
}
/*

*/
int    A1200_check_hax04()
{
    int    errcode=0;
    int    create_rpt=0;
    char    refnumha_scm_pgm[11];
    char    rsrefno_scm_pgm[11];
    
    #if DEBUG
    printf("\nA1200_check_hax04");
    #endif
    
    INITVCHAR(rsref_imsdes) ;
    INITVCHAR(refnum_imsdes) ;
    INITVCHAR(imsdescde) ;
    
    chk_rsrefno=A1299_01_check_hax04_pn((char *) rsrefno.arr,(char * ) rscagecd.arr);
    
    if(chk_rsrefno==1 ||
    chk_rsrefno==0)
    {
        #if DEBUG
        printf("\nRSREFNO Info");
        printf("\nSCM Program (%s) (%d)",(char *) hax04_scm_pgm.arr,hax04_scm_pgm.len);
        #endif
        if(hax04_scm_pgm.len>0)
        {
            strncpy((char *) rsref_scm_pgm.arr,(char *) hax04_scm_pgm.arr,hax04_scm_pgm.len);
            rsref_scm_pgm.len=hax04_scm_pgm.len;
        }
        if(imsdescde.len>0)
        {
            strncpy((char *) rsref_imsdes.arr,(char *) imsdescde.arr,imsdescde.len);
            rsref_imsdes.len=imsdescde.len;
        }
        chk_refnum=A1299_01_check_hax04_pn((char *) refnumha.arr,(char *) cagecdxh.arr);
        if(chk_refnum==1 ||
        chk_refnum==0)
        {
            #if DEBUG
            printf("\nREFNUM Info");
            printf("\nSCM Program (%s) (%d)",(char *) hax04_scm_pgm.arr,hax04_scm_pgm.len);
            #endif
            if(hax04_scm_pgm.len>0)
            {
                strncpy((char *) refnum_scm_pgm.arr,(char *) hax04_scm_pgm.arr,hax04_scm_pgm.len);
                refnum_scm_pgm.len=hax04_scm_pgm.len;
            }
            if(imsdescde.len>0)
            {
                strncpy((char *) refnum_imsdes.arr,(char *) imsdescde.arr,imsdescde.len);
                refnum_imsdes.len=imsdescde.len;
            }
        }
        else
        {
        }
    }
    else
    {
    }
    
    if(chk_rsrefno==0 ||
    chk_refnum==0)
    {
        create_rpt=A1299_02_create_hax04_report();
        if(create_rpt!=0)
        errcode=create_rpt;
        
    }
    
    return(errcode);
}
/*

*/
int    A1299_01_check_hax04_pn(char *partno,char *cage)
{
    int    errcode=0;
    char    mysql[5000];
    
    #if DEBUG
    printf("\nA1299_01_check_hax04_pn");
    printf("\nPartno (%s)",partno);
    printf("\ncage (%s)",cage);
    #endif
    
    INITVCHAR(hax04_refnumha) ;
    INITVCHAR(hax04_cagecdxh) ;
    INITVCHAR(hax04_scm_pgm) ;
    memset(mysql,'\0',sizeof(mysql));
    
    SETVCHAR(hax04_refnumha,partno) ;
    SETVCHAR(hax04_cagecdxh,cage) ;
    
    strcpy(mysql,"select scm_program ");
    if(strncmp(program_model,"F18",3)==0)
    {
        strcat(mysql,"from f18_hax04 ");
    }
    else
    {
        strcat(mysql,"from ");
        strcat(mysql,program_model);
        strcat(mysql,"_haxscm");
    }
    strcat(mysql," where rtrim(refnumha) = rtrim('");
    strcat(mysql,(char *) hax04_refnumha.arr);
    strcat(mysql,"') and cagecdxh = '");
    strcat(mysql,(char *) hax04_cagecdxh.arr);
    strcat(mysql,"'");
    
    #if DEBUG
    printf("\nA1299_01_check_hax04_pn SQL (%s)",mysql);
    #endif
    
    EXEC SQL PREPARE S3 from :mysql;
    EXEC SQL DECLARE C3 CURSOR FOR S3;
    EXEC SQL OPEN C3;
    
    if (sqlca.sqlcode == FND)
    {
        EXEC SQL FETCH C3
        into :hax04_scm_pgm;
        
        if (sqlca.sqlcode == FND ||
        sqlca.sqlcode == MULTI_ROWS)
        {
            #if DEBUG
            printf("\nSCM Program (%s)",(char *) hax04_scm_pgm.arr);
            #endif
            errcode=A3000_get_cat1((char *)hax04_refnumha.arr);
            if(errcode==0)
            {
            }
            else
            {
                if(errcode==1)
                {
                    imsdescde.len=0;
                    errcode=0;
                }
                else
                {
                }
            }
        }
    }
    else
    {
        if(sqlca.sqlcode==NOT_FND)
        {
            errcode=1;
            hax04_scm_pgm.len=0;
        }
        else
        {
            printf("\nA1299_01_check_hax04_pn - FETCH CSR");
            printf("\nBad SQLCODE ");
            printf("\nSQL (%s)",mysql);
            errcode=sqlca.sqlcode;
            A999_02_dberr();
        }
    }
    
    EXEC SQL CLOSE C3;
    
    #if DEBUG
    printf("\nA1299_01_check_hax04_pn-exit funciton errcode (%d)",errcode);
    #endif
    
    return(errcode);
}

int    A1299_02_create_hax04_report()
{
    int    errcode=0;
    int    bytes_wrote=0;
    int    lngth=0;
    char    error_msg_line[500];
    
    #if DEBUG
    printf("\nA1299_02_create_hax04_report");
    printf("\nSCM Program (%s)",(char *) hax04_scm_pgm.arr);
    printf("\nHP EIAC (%s)",(char *) eiacodxa.arr);
    printf("\nHP Refnumha (%s)",(char *) refnumha.arr);
    printf("\nHP CAGE (%s)",(char *) cagecdxh.arr);
    printf("\nHP LCN (%s)",(char *) lsaconxb.arr);
    printf("\nHP ALC (%s)",(char *) altlcnxb.arr);
    printf("\nHP CANUMBHP (%s)",(char *) canumbhp.arr);
    printf("\nHP RSREFNO  (%s)",(char *) rsrefno.arr);
    #endif
    
    memset(error_msg_line,'\0',sizeof(error_msg_line));
    memset(error_file_buffer,'\0',sizeof(error_file_buffer));
    
    if(refnum_imsdes.len>0)
    {
        strncpy(&error_msg_line[0],(char *) refnum_imsdes.arr,refnum_imsdes.len);
        lngth=refnum_imsdes.len;
    }
    else
    {
        if(rsref_imsdes.len>0)
        {
            strncpy(&error_msg_line[0],(char *) rsref_imsdes.arr,rsref_imsdes.len);
            lngth=rsref_imsdes.len;
        }
        else
        {
            strncpy(&error_msg_line[0],"           ",10);
            lngth=10;
        }
    }
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    if(refnum_scm_pgm.len>0)
    {
        strncpy(&error_msg_line[lngth],(char *) refnum_scm_pgm.arr,refnum_scm_pgm.len);
        lngth=lngth+refnum_scm_pgm.len;
    }
    else
    {
        if(rsref_scm_pgm.len>0)
        {
            strncpy(&error_msg_line[lngth],(char *) rsref_scm_pgm.arr,rsref_scm_pgm.len);
            lngth=lngth+rsref_scm_pgm.len;
        }
        else
        {
            strncpy(&error_msg_line[lngth],"          ",10);
            lngth=lngth+10;
        }
    }
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    strncpy(&error_msg_line[lngth],(char *) eiacodxa.arr,eiacodxa.len);
    lngth=lngth+eiacodxa.len;
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    strncpy(&error_msg_line[lngth],(char *) refnumha.arr,refnumha.len);
    lngth=lngth+refnumha.len;
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    if(chk_refnum==0)
    {
        strncpy(&error_msg_line[lngth],"IN GOLD ",8);
        lngth=lngth+8;
        strncpy(&error_msg_line[lngth],(char *) refnum_imsdes.arr,refnum_imsdes.len);
        lngth=lngth+refnum_imsdes.len;
    }
    else
    {
        strncpy(&error_msg_line[lngth],"NOT IN GOLD",11);
        lngth=lngth+11;
    }
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    strncpy(&error_msg_line[lngth],(char *) cagecdxh.arr,cagecdxh.len);
    lngth=lngth+cagecdxh.len;
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    strncpy(&error_msg_line[lngth],(char *) lsaconxb.arr,lsaconxb.len);
    lngth=lngth+lsaconxb.len;
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    strncpy(&error_msg_line[lngth],(char *) altlcnxb.arr,altlcnxb.len);
    lngth=lngth+altlcnxb.len;
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    strncpy(&error_msg_line[lngth],(char *) canumbhp.arr,canumbhp.len);
    lngth=lngth+canumbhp.len;
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    if(rspindhp=='S' ||
    rspind=='S')
    {
        strncpy(&error_msg_line[lngth]," SUPERSEDED BY ",15);
        lngth=lngth+15;
    }
    else
    {
        if(rspindhp=='R' ||
        rspind=='R')
        {
            strncpy(&error_msg_line[lngth]," REPLACED ",10);
            lngth=lngth+10;
        }
        else
        {
            strncpy(&error_msg_line[lngth],"??????????",10);
            lngth=lngth+10;
        }
    }
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    strncpy(&error_msg_line[lngth],(char *) rsrefno.arr,rsrefno.len);
    lngth=lngth+rsrefno.len;
    error_msg_line[lngth]='\t';
    lngth=lngth+1;
    if(chk_rsrefno==0)
    {
        strncpy(&error_msg_line[lngth],"IN GOLD ",8);
        lngth=lngth+8;
        strncpy(&error_msg_line[lngth],(char *) rsref_imsdes.arr,rsref_imsdes.len);
        lngth=lngth+rsref_imsdes.len;
    }
    else
    {
        strncpy(&error_msg_line[lngth],"NOT IN GOLD",11);
        lngth=lngth+11;
    }
    error_msg_line[lngth]='\0';
    strncpy(error_file_buffer,error_msg_line,strlen(error_msg_line));
    error_file_buffer[strlen(error_msg_line)]='\n';
    error_file_buffer[strlen(error_msg_line)+1]='\0';
    
    #if DEBUG
    printf("\nError Line (%s)",error_msg_line);
    #endif
    error_rcds_written++;
    assert(strlen(error_file_buffer) <= sizeof(error_file_buffer)) ;
    bytes_wrote=fwrite(error_file_buffer,strlen(error_file_buffer),1,error_rpt_fp);
    if(bytes_wrote!=1)
    {
        printf("\nA1299_02_create_hax04_report");
        printf("\nBad Return from Write (%d)",bytes_wrote);
        printf("\nHP Refnumha (%s)",(char *) refnumha.arr);
        printf("\nHP CAGE (%s)",(char *) cagecdxh.arr);
        printf("\nHP LCN (%s)",(char *) lsaconxb.arr);
        printf("\nHP ALC (%s)",(char *) altlcnxb.arr);
        printf("\nHP CANUMBHP (%s)",(char *) canumbhp.arr);
        printf("\nHP RSREFNO  (%s)",(char *) rsrefno.arr);
        exit(601);
        
    }
    
    return(errcode);
}
/*

*/
int     A2000_build_seq_00_03_records(slichb_chgrcd *Slichb_Chgrcd,slichp_chgrcd *Slichp_Chgrcd)
{
    int errcode=0;
    #if DEBUG
    printf("\nA2000_build_seq_00_03_records");
    #endif
    
    #if DEBUG
    printf("\nA2000_build_seq_00_03_records");
    printf("\nrefnumha (%s)",refnumha.arr);
    printf("\nrsrefno (%s)",rsrefno.arr);
    printf("\nrscagecd (%s)",rscagecd.arr);
    #endif
    
    if(rsrefno.arr[0]==' ' || rscagecd.arr[0]==' ')
    {
    }
    else
    {
        errcode=Z9999_write_hpx01_seq_00_candidates();
        if(errcode==0)
        {
            errcode=A2010_build_seq_03_records(Slichb_Chgrcd);
        }
    }
    
    return(errcode);
}
/*

*/
int    A2010_build_seq_03_records(slichb_chgrcd *Slichb_Chgrcd)
{
    int    errcode=0;
    int    fetch_hb=1;
    char    mysql[1000];
    
    #if DEBUG
    printf("\nA2010_build_seq_03_records");
    #endif
    
    memset(mysql,' ',sizeof(mysql));
    
    strcpy(mysql,"select hb.refnumhb, hb.cagecdhb, hb.addrefhb, hb.adcagehb ");
    if(strncmp(program_model,"F18",3)==0)
    {
        strcat(mysql,"from f18_hb hb ");
    }
    else
    {
        strcat(mysql,"from ");
        strcat(mysql,program_model);
        strcat(mysql,"_hb hb ");
    }
    strcat(mysql,"where can_int = 0 and hb.refnumhb = rpad('");
    strcat(mysql,(char *) rsrefno.arr);
    strcat(mysql,"',32,' ') and hb.cagecdhb = '");
    strcat(mysql,(char *) rscagecd.arr);
    strcat(mysql,"'");
    
    EXEC SQL PREPARE S5 from :mysql;
    EXEC SQL DECLARE C5 CURSOR FOR S5;
    
    EXEC SQL OPEN C5;
    
    if (sqlca.sqlcode == FND)
    {
        while (fetch_hb)
        {
            EXEC SQL FETCH C5 into
            :refnumhb,
            :cagecdhb,
            :addrefhb,
            :adcagehb;
            if (sqlca.sqlcode == FND)
            {
                errcode=Z9999_write_hpx01_seq_03_candidates(Slichb_Chgrcd);
            }
            else
            {
                fetch_hb=0;
                if (sqlca.sqlcode == NOT_FND)
                {
                }
                else
                {
                    printf("\nA2010_build_seq_03_records - Fetch Cursor");
                    printf("\nBad SQLCODE ");
                    errcode=sqlca.sqlcode;
                    A999_02_dberr();
                }
            }
        }
    }
    else
    {
        printf("\nA2010_build_seq_03_records - Open Cursor");
        printf("\nBad SQLCODE ");
        errcode=sqlca.sqlcode;
        A999_02_dberr();
    }
    
    EXEC SQL CLOSE C5;
    
    return(errcode);
}
/*

*/
int    A3000_get_cat1(char *partno)
{
    int    errcode=0;
    char    mysql[5000];
    
    #if DEBUG
    printf("\nA3000_get_cat1");
    printf("\nPart No (%s)",partno);
    #endif
    
    INITVCHAR(gold_part) ;
    INITVCHAR(imsdescde) ;
    memset(mysql,' ',sizeof(mysql));
    
    SETVCHAR(gold_part,partno) ;
    
    strcpy(mysql,"select ims_designator_code ");
    strcat(mysql,"from cat1 ");
    strcat(mysql,"where part=rpad('");
    strcat(mysql,(char *) gold_part.arr);
    strcat(mysql,"',32,' ') ");
    
    #if DEBUG
    printf("\nA3000_get_cat1 SQL (%s)",mysql);
    #endif
    
    EXEC SQL PREPARE S4 from :mysql;
    EXEC SQL DECLARE C4 CURSOR FOR S4;
    EXEC SQL OPEN C4;
    
    if (sqlca.sqlcode == FND)
    {
        EXEC SQL FETCH C4
        into :imsdescde;
        if(sqlca.sqlcode==FND)
        {
            #if DEBUG
            printf("\nGOLD IMS DES Code (%s)#######",(char *) imsdescde.arr);
            #endif
        }
        else
        {
            if(sqlca.sqlcode==NOT_FND)
            {
                #if DEBUG
                printf("\nNOT FOUND IN GOLD#######");
                #endif
                errcode=1;
            }
            else
            {
                printf("\nA3000_get_cat1 - FETCH");
                printf("\nBad SQLCODE ");
                errcode=sqlca.sqlcode;
                A999_02_dberr();
                errcode=510;
            }
        }
    }
    else
    {
        if(sqlca.sqlcode==NOT_FND)
        {
            #if DEBUG
            printf("\nNOT FOUND IN GOLD#######");
            #endif
            errcode=1;
        }
        else
        {
            printf("\nA3000_get_cat1 - CURSOR");
            printf("\nBad SQLCODE ");
            errcode=sqlca.sqlcode;
            A999_02_dberr();
            errcode=510;
        }
    }
    
    EXEC SQL CLOSE C4;
    
    return(errcode);
}
/*

*/
int     Z9999_write_hp_candidates(slichp_chgrcd *Slichp_Chgrcd)
{
    int    errcode=0;
    int    i=0;
    int    i1=0;
    char    spaces[]={"                                                  "};
    
    #if DEBUG
    printf("\nZ9999_write_hp_candidates");
    #endif
    
    
    memset(Slichp_Chgrcd,' ',sizeof(slichp_chgrcd) ) ;

    strncpy (Slichp_Chgrcd->rcdtype,"HP",sizeof(Slichp_Chgrcd->rcdtype));
    strncpy (Slichp_Chgrcd->prcsseq,"02",sizeof(Slichp_Chgrcd->prcsseq));
    
    assert(refnumha.len <= sizeof(Slichp_Chgrcd->refnumha) ) ;
    strncpy (Slichp_Chgrcd->refnumha,(char *) refnumha.arr,refnumha.len);
    assert(cagecdxh.len <= sizeof(Slichp_Chgrcd->cagecdxh) ) ;
    strncpy (Slichp_Chgrcd->cagecdxh,(char *) cagecdxh.arr,cagecdxh.len);
    assert(lsaconxb.len <= sizeof(Slichp_Chgrcd->lsaconxb) ) ;
    strncpy (Slichp_Chgrcd->lsaconxb,(char *) lsaconxb.arr,lsaconxb.len);
    assert(eiacodxa.len <= sizeof(Slichp_Chgrcd->eiacodxa) ) ;
    strncpy (Slichp_Chgrcd->eiacodxa,(char *) eiacodxa.arr,eiacodxa.len);
    assert(altlcnxb.len <= sizeof(Slichp_Chgrcd->altlcnxb) ) ;
    strncpy (Slichp_Chgrcd->altlcnxb,(char *) altlcnxb.arr,altlcnxb.len);
    assert(canumbhp.len <= sizeof(Slichp_Chgrcd->canumbhp) ) ;
    strncpy (Slichp_Chgrcd->canumbhp,(char *) canumbhp.arr,canumbhp.len);
    Slichp_Chgrcd->lcntypxb=lcntypxb;
    
    Slichp_Chgrcd->newline='\n';
    
    i1=fwrite(Slichp_Chgrcd,sizeof(slichp_chgrcd),1,hp_candidates_fp);
    if(i1!=1)
    {
        printf("\n**********************************************************");
        printf("\nError writing output hp_candidates_fp - writing HP Record (%d)",i1);
        errcode=510;
    }
    else
    {
        hp_seq_02_candidate_written++;
        hp_candidate_written++;
    }
    
    return(errcode);
}
/*

*/
int     Z9999_write_hpx01_seq_00_candidates()
{
    int    errcode=0;
    int    i=0;
    int    i1=0;
    slichg_chgrcd Slichg_Chgrcd ;
    
    #if DEBUG
    printf("\nZ9999_write_hpx01_seq_00_candidates");
    #endif
    
    memset(&Slichg_Chgrcd,' ',sizeof(slichg_chgrcd) ) ;

    strncpy (Slichg_Chgrcd.rcdtype,"HG",2);
    strncpy (Slichg_Chgrcd.prcsseq,"00",2);
    
    strncpy (Slichg_Chgrcd.refnumha,(char *) rsrefno.arr,rsrefno.len);
    strncpy (Slichg_Chgrcd.cagecdxh,(char *) rscagecd.arr,rscagecd.len);
    
    Slichg_Chgrcd.newline='\n';
    
    
    i1=fwrite(&Slichg_Chgrcd,sizeof(slichg_chgrcd),1,hp_candidates_fp);
    if(i1!=1)
    {
        printf("\n**********************************************************");
        printf("\nError writing HG output hp_candidates_fp - writing HPX01 Record (%d)",i1);
        errcode=515;
    }
    else
    {
        hp_seq_00_candidate_written++;
        hp_candidate_written++;
    }
    
    return(errcode);
}
/*

*/
int     Z9999_write_hpx01_seq_03_candidates(slichb_chgrcd *Slichb_Chgrcd)
{
    int    errcode=0;
    int    i=0;
    int    i1=0;
    
    #if DEBUG
    printf("\nZ9999_write_hpx01_seq_03_candidates");
    #endif
    
    Slichb_Chgrcd->newline='\n';
    memset ((char *) Slichb_Chgrcd->refnumhb,' ',sizeof(slichb_chgrcd));
    
    strncpy (Slichb_Chgrcd->rcdtype,"HB",2);
    strncpy (Slichb_Chgrcd->prcsseq,"03",2);
    
    strncpy (Slichb_Chgrcd->refnumhb,(char *) refnumhb.arr,refnumhb.len);
    strncpy (Slichb_Chgrcd->cagecdhb,(char *) cagecdxh.arr,cagecdhb.len);
    strncpy (Slichb_Chgrcd->addrefhb,(char *) addrefhb.arr,addrefhb.len);
    strncpy (Slichb_Chgrcd->adcagehb,(char *) adcagehb.arr,adcagehb.len);
    
    Slichb_Chgrcd->newline='\n';
    
    STRSET(hp_chgrcd,(char *) Slichb_Chgrcd);
    
    assert(strlen(hp_chgrcd) <= sizeof(hp_chgrcd));
    i1=fwrite(hp_chgrcd,strlen(hp_chgrcd),1,hp_candidates_fp);
    if(i1!=1)
    {
        printf("\n**********************************************************");
        printf("\nError writing output hp_candidates_fp - writing HPX01 Sequence 03 HB Records (%d)",i1);
        errcode=520;
    }
    else
    {
        hp_seq_03_candidate_written++;
        hp_candidate_written++;
    }
    
    return(errcode);
}
