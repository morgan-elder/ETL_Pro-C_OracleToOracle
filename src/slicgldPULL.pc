/* vim: ts=2:sw=2:sts=2:et:syntax=c: */
/* ************************************************************** */
/* Title:  slic to gold                                           */
/* Author: Chandler Wilson                                        */
/* Description:                                                   */
/*    Pulls all parts for a program and creates file for input    */
/*  for slicgldFMT program                                        */
/*                                                                */
/* Created: 10/01/2002                                            */
/* Modified - 05/04/2006	ldm	Removed Model qualification on    */
/*					on IMS_DESIGNATOR Code            */
/*                                                                */
/* ************************************************************** */



#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <assert.h>
#include "Login.h"

EXEC SQL INCLUDE sqlca.h;
EXEC SQL INCLUDE oraca.h;

#define NOTFND 1403
#define MAX 50
#define FND 0
#define MULTI -2112

/* Declare Record Sets */


/* Declare database ids */
char *slic_db = "slic_db";
char *gold_db = "gold_db";

char *slic_dsn = "stl_dprdsup" ;
char *gold_dsn = "dgoldsl" ;

FILE *fp_out;

char part[51];
char cage[6];
char prime[51];
char ims_des_code[21];
char niin[10];
char prime_cage[6];

char my_record[200];

char *program_name = "F18" ;

short part_ind;
short cage_ind;
short prime_ind;
short ims_des_code_ind;
short niin_ind;
short prime_cage_ind;


/* Declare functions*/
void initialize();
void get_parts();
void db_err(char[]);
void close_cursors();

#ifdef WIN32
    #include <Windows.h>
    #include <tchar.h>
#else
    #include <unistd.h>
#endif

static void __GetMachineName(char* machineName)
{
    char Name[150];
    int i=0;

    #ifdef WIN32
        TCHAR infoBuf[150];
        DWORD bufCharCount = 150;
        memset(Name, 0, 150);
        if( GetComputerName( infoBuf, &bufCharCount ) )
        {
            for(i=0; i<150; i++)
            {
                Name[i] = infoBuf[i];
            }
        }
        else
        {
            strcpy(Name, "Unknown_Host_Name");
        }
    #else
        memset(Name, 0, 150);
        gethostname(Name, 150);
    #endif
    strncpy(machineName,Name, 150);
}


static void usage() {
  printf("slicgldPULL [ -d oralogin_dir ] "
   "[ -g gold_dsn ] [ -n program_name ] [ -o file_out ] [ -p oraPwd ] [ -s slic_dsn ] "
   "[ -u oraUid ] ") ;
}

main(int argc, char *argv[])
{
	int i;
  char *dta_scm = "/data/scm" ;
  char *test_host = "svappl15.stl.mo.boeing.com" ;
	char *file_out = "slicgldPULL_fileout.txt" ;
  char *oraLogin = "/data/scm/sh/oralogin" ;
  char default_dir[] = "/home/scmftp" ;
  char data_dir[256] ;
  char path_ora_uid[256] ;
  char path_ora_pwd[256] ;
  char *oraPwd = ".SCM_LB_pass" ;
  char *oraUid = ".SCM_LB_destn" ;
  char hostname[151] ;
  char file_path[256] ;


  hostname[150] = '\0' ;
  __GetMachineName(hostname) ;
  if (strcmp(hostname,test_host) == 0) {
    printf("\nhostname=%s is the TEST host\n",hostname) ;
  } else {
    printf("\nhostname=%s is the PROD host\n",hostname) ;
  }
  

  printf("%s compiled on %s\n",__FILE__,__DATE__) ;

  if (getenv("dta_scm") != NULL) {
    printf("getenv(dta_scm)=%s\n",getenv("dta_scm")) ;
    dta_scm = getenv("dta_scm") ;
  }
  printf("dta_scm=%s\n", dta_scm) ;
  if (getenv("PROCESSING_MODEL") != NULL) {
    program_name = getenv("PROCESSING_MODEL") ;
  }
  printf("program_name=%s\n", program_name) ;

  if (getenv("DATA_DIR") != NULL) {
    strcpy(data_dir,getenv("DATA_DIR")) ;
  } else {
    strcpy(data_dir,dta_scm) ;
    strcat(data_dir,"/TEST") ;
  }

  if (getenv("PSS_ENV") != NULL) {
     if (strcmp(getenv("PSS_ENV"),"PRODN") == 0) {
       strcpy(data_dir,dta_scm) ;
       strcat(data_dir,"/PROD") ;
     } else {
       strcpy(data_dir,dta_scm) ;
       strcat(data_dir,"/TEST") ;
     }
  } else {
       strcpy(data_dir,dta_scm) ;
       strcat(data_dir,"/TEST") ;
  }

  printf("\ndata_dir=%s",data_dir) ;
   
  strcpy(file_path,data_dir) ;
  strcat(file_path, "/") ;
  strcat(file_path,file_out) ;
  printf("\ndefault file_path=%s\n", file_path) ;

  if (getenv("ORALOGIN") != NULL) {
    oraLogin = getenv("ORALOGIN") ;
  } 

/*
	strncpy(program_name, argv[1], strlen(argv[1]));
	strncpy(file_out, argv[2], strlen(argv[2]));
	strncpy(slic_dsn, argv[3], strlen(argv[3]));
	strncpy(gold_dsn, argv[4], strlen(argv[4]));
*/

 /* command line overrides env variables and take precedence */
{
  char c ;
  while ((c = getopt (argc, argv, "d:f:g:n:o:p:s:u:")) != -1)
    switch (c)
      {
      case 'd':
        oraLogin = optarg ;
        break ;
      case 'g':
        gold_dsn = optarg ;
        break ;
      case 'n':
        program_name = optarg ;
        break ;
      case 'o':
        assert(strlen(optarg) < sizeof(file_path));
        strcpy(file_path,optarg);
        break;
      case 'p':
        oraPwd = optarg;
        break;
      case 's':
        slic_dsn = optarg;
        break;
      case 'u':
        oraUid = optarg;
        break;
      case '?':
        if (optopt == 'd')
          fprintf (stderr, "Option -%c requires an directory path.\n", optopt);
        else if (optopt == 'g')
          fprintf (stderr, "Option -%c requires a gold dsn.\n", optopt);
        else if (optopt == 'p')
          fprintf (stderr, "Option -%c requires an Oracle password file.\n", optopt);
        else if (optopt == 'u')
          fprintf (stderr, "Option -%c requires an Oracle user id file.\n", optopt);
        else if (optopt == 's')
          fprintf (stderr, "Option -%c requires a SLIC dsn.\n", optopt);
        else if (isprint (optopt))
          fprintf (stderr, "Unknown option `-%c'.\n", optopt);
        else
          fprintf (stderr, "Unknown option character `\\x%x'.\n", optopt);
        usage() ;
        exit(1);
      default:
        exit(2);
      }
  }







	/*  Connect to SLIC  */
  strcpy(path_ora_uid, oraLogin) ;
  strcat(path_ora_uid,"/") ;
  strcat(path_ora_uid,oraUid) ;

 
  strcpy(path_ora_pwd, oraLogin) ;
  strcat(path_ora_pwd,"/") ;
  strcat(path_ora_pwd,oraPwd) ;

#if DEBUG
	printf("\noralogin=%s", oraLogin);
	printf("\nprogram_name=%s", program_name);
	printf("\ngold_dsn=%s", gold_dsn);
	printf("\ngold_db=%s", gold_db);
	printf("\npath_ora_uid=%s", path_ora_uid);
	printf("\noraUid=%s", oraUid);
	printf("\npath_ora_pwd=%s", path_ora_pwd);
	printf("\noraPwd=%s", oraPwd);
	printf("\nslic_db=%s", slic_db);
  setDebug(1) ; /* turn on debugging for Login2 */
#endif 

	Login2(path_ora_uid,path_ora_pwd,slic_db,slic_dsn);
	if(sqlca.sqlcode == 0)
		printf("Connected to SLIC.\n");
	else
	{
		printf("Error connecting to SLIC.  Exiting.\n");
		exit(2);
	}

	/*  Connect to GOLD  */
	Login2(path_ora_uid,path_ora_pwd,gold_db,gold_dsn);
	if(sqlca.sqlcode == 0)
		printf("Connected to GOLD.\n");
	else
	{
		printf("Error connecting to GOLD.  Exiting.\n");
		exit(2);
	}

  {

     printf("\nfile_path=%s\n", file_path) ;
	  if((fp_out = fopen(file_path, "w")) == NULL)
  	{
  		fprintf(stderr, "Error trying to open output file.");
  		exit(2);
  	}
  }



	initialize();
	get_parts();

	fclose(fp_out);

}


/*

*/

void initialize()
{
	memset(part,' ',51);
	memset(cage,' ',6);
	memset(prime,' ',51);
	memset(ims_des_code,' ',21);
	memset(niin,' ',10);
	memset(my_record,' ',140);
	memset(prime_cage,' ',6);

	part_ind=-1;
	cage_ind=-1;
	prime_ind=-1;
	ims_des_code_ind=-1;
	niin_ind=-1;
	prime_cage_ind=-1;


}


/*


*/

void get_parts()
{

	int found = 1;
	char sql_program_name[6];

	memset(sql_program_name,' ',6);

	sql_program_name[0]='%';
	sql_program_name[1]=program_name[0];
	sql_program_name[2]=program_name[1];
	sql_program_name[3]=program_name[2];
	sql_program_name[4]='%';
	sql_program_name[5]='\0';

	printf("\n\nprogram name sql = %s\n",sql_program_name);
	printf("\nprogram name = %s\n",program_name);


	/* Declare the cursor */
	EXEC SQL AT  :gold_db DECLARE get_parts_csr CURSOR FOR
		 SELECT a.part, a.manuf_cage,
		 	 	a.prime,
		 	 	a.ims_designator_code,
		 	    substr(a.nsn,6,2)||substr(a.nsn,9,3)||substr(a.nsn,13,4) niin,
		 	    b.manuf_cage
		   FROM cat1 a,
		 	    cat1 b
		  WHERE a.prime=b.part
		    AND a.noun not like 'SEE PRIME PART%'
	   ORDER BY a.prime;

	/* open the cursor */
	EXEC SQL OPEN get_parts_csr;

	if(sqlca.sqlcode == 0)
	{
		while(found)
		{

			EXEC SQL FETCH get_parts_csr INTO
				:part:part_ind,
				:cage:cage_ind,
				:prime:prime_ind,
				:ims_des_code:ims_des_code_ind,
				:niin:niin_ind,
				:prime_cage:prime_cage_ind;


			if(sqlca.sqlcode == NOTFND)
				found = 0;
			else
			{
				if(sqlca.sqlcode == 0)
				{
					if(cage_ind == -1)
					{
						strncpy(cage,"?????",5);
					}
					if(prime_cage_ind == -1)
					{
						strncpy(prime_cage,"?????",5);
					}

					strncpy(my_record,part,50);
					strncpy(&my_record[50],cage,5);
					strncpy(&my_record[55],prime,50);
					strncpy(&my_record[105],ims_des_code,20);
					strncpy(&my_record[125],niin,9);
					strncpy(&my_record[134],prime_cage,5);
					my_record[139] = '\0';

					fprintf(fp_out,"%s\n",my_record);

					initialize();
				}
				else
				{
					found=0;
					db_err("get_parts");
				}
			}
		}
	}
	else
	{
		found=0;
		db_err("get_parts");
	}

}

/*



*/


void db_err(char *procname)
{
    char msg[200];
    int size = 200;
    int msg_len;

    printf("\n===========================================================");
    /*printf("\n%d records written before error occurred.", rec_count);*/
    printf("\n=");
    printf("\n=\tError occurred in process %s",procname);
    printf("\n=");
    printf("\n=\tDatabase Error has Occurred:");
    sqlglm(msg,&size,&msg_len);
    sqlglm(msg,&size,&msg_len);
    msg[msg_len] = '\0';
    printf("\n=\t\t%s",msg);
    printf("\n=\t\tSQLCODE: %d",sqlca.sqlcode);
    printf("\n=\t\tSQLERR MSG %.*s",sqlca.sqlerrm.sqlerrml,sqlca.sqlerrm.sqlerrmc);
    printf("\n=");
    printf("\n===========================================================\n");

    exit(2);
}
